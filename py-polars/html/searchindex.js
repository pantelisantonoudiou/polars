Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.cleared", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iterrows", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pearson_corr", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_column", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/pivot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.cast_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.tz_localize", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.with_time_zone", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.argsort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cleared", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan", "reference/lazyframe/api/polars.LazyFrame.describe_plan", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_column", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.cleared", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.cast_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.tz_localize", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.with_time_zone", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_datelike", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.to_frame", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.cleared.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iterrows.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pearson_corr.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_column.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/pivot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.cast_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.tz_localize.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.with_time_zone.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.argsort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cleared.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/lazyframe/api/polars.LazyFrame.describe_plan.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_column.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.cleared.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.cast_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.tz_localize.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.with_time_zone.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_datelike.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.to_frame.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.scan_csv", "polars.scan_delta", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iterrows", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pearson_corr", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Pivot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.cast_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.tz_localize", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.with_time_zone", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.cast_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.tz_localize", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.with_time_zone", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.to_frame", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 86, 101, 114, 117, 210, 212, 239, 242, 252, 535, 610], "refer": [0, 88, 89, 91, 207, 239, 405, 461, 535, 786, 847, 884], "input": [0, 54, 88, 89, 91, 382, 390, 484, 502, 510, 511, 514, 535, 544, 768, 884], "output": [0, 24, 26, 27, 64, 91, 108, 117, 139, 140, 151, 160, 165, 168, 177, 203, 239, 248, 252, 384, 385, 389, 479, 484, 510, 521, 535, 544, 565, 566, 575, 580, 608, 610, 616, 625, 872, 884], "seri": [0, 1, 19, 45, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 81, 86, 107, 108, 110, 114, 117, 123, 131, 133, 135, 136, 141, 144, 145, 147, 149, 156, 157, 161, 173, 174, 180, 188, 192, 197, 198, 207, 208, 211, 239, 251, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 268, 272, 273, 280, 281, 284, 285, 288, 294, 295, 299, 300, 312, 313, 315, 318, 321, 323, 325, 328, 332, 334, 337, 338, 341, 342, 350, 351, 356, 357, 361, 363, 365, 366, 367, 368, 369, 371, 372, 373, 383, 384, 401, 405, 406, 407, 408, 409, 411, 424, 427, 430, 431, 438, 455, 461, 465, 470, 471, 472, 473, 478, 484, 485, 487, 488, 489, 490, 491, 492, 494, 495, 496, 502, 503, 505, 507, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 522, 523, 524, 525, 526, 535, 544, 561, 589, 604, 605, 616, 876, 878, 880, 883, 887, 888, 889], "datafram": [0, 1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 43, 45, 54, 55, 56, 57, 58, 59, 61, 62, 63, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 103, 104, 106, 108, 109, 237, 238, 242, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 282, 283, 285, 286, 287, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 333, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 487, 488, 489, 490, 491, 492, 493, 496, 499, 500, 501, 502, 504, 505, 507, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 527, 535, 544, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 616, 624, 644, 660, 669, 684, 830, 832, 843, 844, 854, 863, 864, 872, 884], "lazyfram": [0, 1, 42, 44, 54, 55, 56, 57, 58, 61, 62, 99, 100, 101, 102, 103, 104, 106, 110, 154, 167, 239, 285, 354, 535, 544, 615, 890], "express": [0, 59, 61, 64, 108, 110, 111, 117, 129, 131, 138, 163, 168, 176, 186, 208, 210, 212, 239, 248, 249, 251, 252, 269, 285, 296, 297, 298, 301, 307, 309, 329, 348, 354, 361, 363, 367, 370, 375, 378, 383, 384, 385, 389, 390, 401, 402, 403, 408, 422, 423, 424, 426, 433, 446, 461, 467, 470, 476, 478, 481, 485, 488, 489, 493, 494, 495, 496, 500, 501, 502, 503, 504, 505, 509, 510, 511, 514, 516, 518, 519, 520, 521, 523, 524, 527, 534, 544, 550, 558, 561, 583, 591, 592, 593, 595, 604, 605, 606, 609, 610, 616, 644, 673, 674, 675, 683, 711, 804, 811, 832, 884], "extend": [0, 239, 351, 535, 544, 624, 734, 884], "function": [0, 55, 56, 57, 58, 59, 63, 88, 89, 91, 99, 109, 117, 126, 133, 159, 166, 167, 168, 199, 202, 212, 222, 239, 249, 252, 285, 307, 332, 345, 346, 347, 384, 385, 399, 411, 412, 413, 414, 415, 416, 418, 419, 420, 432, 474, 482, 484, 494, 495, 502, 503, 505, 510, 518, 535, 544, 575, 579, 582, 610, 616, 625, 660, 683, 714, 728, 729, 730, 731, 792, 806, 807, 813, 818, 884], "data": [0, 1, 12, 15, 29, 45, 54, 55, 57, 62, 68, 69, 74, 75, 77, 78, 79, 80, 81, 82, 88, 89, 91, 92, 93, 96, 97, 99, 106, 107, 109, 110, 111, 118, 119, 128, 137, 139, 151, 152, 154, 167, 171, 176, 177, 178, 184, 191, 195, 196, 237, 239, 293, 312, 333, 341, 362, 369, 371, 405, 421, 422, 432, 474, 476, 488, 521, 535, 544, 548, 549, 558, 565, 582, 593, 609, 616, 624, 667, 672, 676, 688, 690, 723, 786, 802, 803, 813, 818, 865, 866, 868, 870, 874, 883, 884], "type": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 64, 68, 77, 79, 82, 86, 88, 89, 90, 91, 93, 97, 99, 100, 105, 106, 107, 110, 113, 114, 117, 127, 133, 137, 139, 140, 141, 191, 195, 196, 198, 200, 201, 239, 252, 273, 285, 293, 294, 296, 297, 298, 313, 315, 318, 321, 323, 325, 328, 334, 342, 348, 359, 363, 365, 367, 368, 408, 456, 457, 458, 461, 474, 484, 489, 497, 498, 499, 501, 502, 509, 510, 535, 544, 550, 556, 558, 565, 566, 583, 592, 593, 600, 601, 616, 648, 660, 667, 669, 673, 674, 675, 691, 693, 696, 702, 704, 707, 710, 716, 724, 742, 813, 842, 843, 844, 865, 866, 868, 875, 884], "config": [0, 54, 208, 239, 544, 605, 616], "except": [0, 153, 239, 544, 571, 616, 866, 874, 884], "test": [0, 91, 544, 567, 574, 616], "util": [0, 505, 544, 558, 616], "sql": [0, 42, 98, 152, 239, 544], "These": [1, 534], "allow": [1, 45, 68, 99, 101, 102, 103, 104, 110, 111, 151, 153, 154, 176, 177, 178, 239, 329, 407, 422, 461, 535, 570, 571, 575, 593, 606, 616, 711, 788, 803, 805, 847, 884], "you": [1, 28, 54, 78, 86, 88, 89, 91, 96, 99, 114, 117, 124, 128, 151, 153, 163, 195, 199, 212, 222, 239, 252, 269, 296, 297, 298, 348, 354, 384, 407, 412, 413, 414, 415, 416, 418, 419, 420, 447, 450, 485, 494, 503, 535, 550, 555, 567, 571, 574, 592, 593, 610, 616, 624, 644, 673, 674, 675, 788, 833, 836, 866, 874, 884], "regist": [1, 55, 56, 57, 58], "custom": [1, 55, 56, 57, 58, 117, 212, 239, 252, 285, 384, 411, 484, 510, 535, 575, 610, 616, 625, 660, 792, 884], "dedic": [1, 151, 177, 239], "namespac": [1, 238, 242, 534, 544, 615], "underli": [1, 65, 72, 96, 110, 111, 128, 151, 177, 191, 239, 312, 313, 314, 317, 319, 320, 322, 324, 326, 327, 330, 331, 333, 339, 340, 341, 343, 407, 421, 535, 624, 690, 691, 692, 695, 697, 701, 703, 706, 708, 709, 712, 713, 715, 721, 722, 723, 725, 788, 802, 813, 862, 866, 884], "polar": [1, 239, 534, 535, 544, 616, 884, 890, 891], "class": [1, 2, 3, 4, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 81, 108, 109, 195, 196, 239, 535, 544, 616, 865, 866, 884, 890], "without": [1, 63, 90, 93, 97, 100, 101, 202, 239, 307, 332, 412, 413, 414, 415, 416, 418, 419, 420, 520, 535, 683, 688, 714, 884], "requir": [1, 28, 81, 106, 107, 165, 166, 196, 200, 208, 239, 345, 346, 347, 427, 461, 476, 535, 593, 600, 605, 616, 729, 730, 731, 812, 847, 866, 870, 884], "subclass": [1, 239], "mixin": 1, "expr": [1, 54, 55, 56, 57, 58, 59, 62, 64, 124, 127, 129, 131, 138, 139, 140, 152, 163, 168, 176, 180, 186, 207, 208, 210, 239, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 535, 536, 539, 540, 541, 555, 557, 559, 561, 564, 565, 566, 570, 584, 589, 591, 595, 604, 605, 609, 616, 644, 683, 735, 811, 857, 884], "ar": [1, 14, 28, 45, 64, 70, 76, 77, 79, 81, 82, 88, 89, 90, 91, 96, 98, 99, 100, 101, 102, 103, 106, 107, 109, 110, 113, 117, 124, 126, 129, 133, 139, 140, 151, 153, 154, 159, 160, 166, 176, 192, 196, 203, 239, 249, 285, 305, 306, 310, 311, 332, 337, 344, 365, 367, 368, 369, 371, 372, 373, 376, 405, 408, 409, 411, 417, 429, 432, 434, 435, 447, 450, 468, 485, 486, 491, 521, 528, 529, 531, 534, 535, 536, 539, 540, 541, 544, 555, 559, 565, 566, 567, 571, 574, 575, 579, 580, 583, 593, 606, 616, 622, 624, 660, 681, 682, 714, 719, 727, 728, 741, 750, 753, 754, 755, 756, 757, 758, 764, 786, 790, 792, 798, 815, 818, 833, 836, 855, 866, 874, 876, 878, 880, 884, 887, 888, 889], "all": [1, 6, 11, 14, 19, 22, 29, 61, 62, 64, 77, 79, 81, 82, 83, 88, 89, 91, 92, 96, 99, 102, 103, 108, 109, 111, 124, 130, 147, 149, 151, 154, 159, 162, 163, 171, 176, 177, 185, 194, 203, 239, 250, 251, 269, 273, 283, 285, 287, 301, 307, 348, 358, 359, 362, 365, 368, 372, 373, 375, 378, 380, 384, 385, 394, 398, 402, 405, 410, 427, 433, 440, 445, 446, 449, 451, 452, 454, 460, 467, 479, 489, 501, 523, 535, 544, 550, 553, 555, 558, 560, 575, 579, 583, 592, 594, 606, 616, 644, 648, 658, 683, 748, 761, 786, 819, 826, 831, 832, 835, 837, 838, 840, 846, 884], "support": [1, 28, 62, 77, 90, 91, 98, 100, 108, 111, 185, 208, 239, 281, 433, 455, 535, 594, 605, 616, 656, 819, 841, 884], "target": [1, 60, 444, 461, 830, 847], "thi": [1, 6, 22, 24, 26, 28, 44, 45, 54, 59, 61, 62, 63, 77, 78, 79, 80, 81, 82, 85, 86, 88, 89, 90, 91, 92, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 117, 124, 126, 128, 133, 138, 139, 140, 141, 145, 147, 149, 151, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 169, 170, 171, 176, 177, 178, 180, 183, 185, 187, 188, 191, 193, 195, 196, 199, 200, 202, 203, 204, 205, 209, 210, 212, 238, 239, 242, 249, 251, 252, 261, 263, 269, 273, 285, 294, 301, 307, 312, 313, 319, 329, 332, 338, 341, 348, 350, 351, 356, 361, 362, 363, 367, 378, 383, 384, 389, 390, 396, 397, 399, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 424, 426, 427, 428, 433, 434, 435, 448, 449, 453, 454, 460, 461, 464, 465, 475, 476, 477, 478, 479, 482, 485, 490, 492, 494, 496, 501, 502, 503, 505, 520, 524, 535, 544, 545, 547, 550, 555, 558, 564, 565, 566, 568, 571, 575, 579, 580, 583, 589, 591, 592, 593, 594, 600, 606, 607, 608, 610, 615, 616, 624, 625, 634, 637, 644, 648, 669, 683, 688, 690, 691, 697, 711, 714, 720, 723, 728, 733, 734, 740, 741, 746, 747, 752, 753, 759, 762, 765, 769, 770, 771, 772, 774, 775, 777, 778, 780, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 796, 799, 800, 801, 803, 806, 807, 808, 811, 812, 813, 814, 819, 820, 822, 834, 835, 839, 840, 846, 847, 850, 851, 854, 855, 862, 864, 865, 866, 867, 869, 870, 873, 874, 884], "featur": [1, 28, 45, 60, 239], "i": [1, 11, 24, 26, 27, 45, 54, 60, 61, 62, 63, 64, 67, 68, 70, 71, 77, 80, 81, 82, 85, 88, 89, 90, 92, 96, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 117, 124, 126, 134, 137, 138, 139, 140, 141, 145, 146, 148, 150, 151, 153, 154, 157, 159, 160, 163, 165, 167, 168, 176, 177, 178, 185, 188, 191, 193, 199, 200, 202, 203, 208, 210, 212, 222, 238, 239, 242, 249, 250, 251, 252, 269, 271, 281, 285, 307, 329, 332, 337, 345, 346, 347, 350, 356, 359, 361, 363, 376, 384, 390, 399, 405, 407, 409, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 428, 429, 432, 433, 434, 435, 440, 444, 445, 446, 448, 449, 453, 454, 455, 458, 460, 461, 464, 479, 485, 486, 490, 492, 494, 495, 496, 503, 509, 520, 524, 535, 550, 555, 558, 564, 565, 566, 569, 571, 573, 575, 579, 580, 583, 592, 593, 594, 600, 605, 608, 610, 616, 623, 624, 625, 644, 646, 656, 683, 711, 714, 719, 728, 729, 730, 731, 733, 741, 742, 745, 746, 747, 749, 759, 760, 762, 763, 764, 786, 788, 790, 803, 804, 805, 806, 807, 808, 815, 818, 819, 822, 826, 830, 831, 832, 834, 835, 839, 840, 841, 844, 846, 850, 862, 866, 872, 873, 874, 884], "primarili": 1, "intend": 1, "us": [1, 8, 9, 11, 14, 19, 20, 24, 28, 45, 54, 64, 78, 80, 82, 84, 86, 88, 89, 90, 91, 92, 96, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 114, 117, 129, 130, 133, 139, 140, 151, 153, 157, 159, 162, 163, 167, 168, 176, 178, 186, 188, 199, 200, 203, 210, 212, 222, 239, 247, 252, 269, 285, 289, 290, 294, 307, 310, 311, 341, 344, 345, 346, 347, 348, 353, 354, 362, 363, 376, 384, 388, 405, 407, 409, 412, 413, 414, 415, 416, 418, 419, 420, 422, 424, 427, 428, 432, 434, 435, 441, 442, 443, 447, 448, 453, 455, 457, 459, 461, 484, 485, 486, 489, 491, 494, 496, 503, 505, 509, 511, 514, 519, 524, 534, 535, 550, 553, 559, 560, 564, 565, 566, 567, 571, 573, 574, 579, 593, 595, 600, 604, 610, 616, 625, 644, 660, 663, 664, 669, 683, 723, 727, 729, 730, 731, 735, 736, 741, 764, 786, 788, 790, 803, 806, 807, 808, 812, 818, 822, 827, 828, 833, 834, 839, 841, 843, 847, 857, 865, 866, 873, 874, 884], "librari": [1, 65, 72, 384, 535, 891], "author": 1, "domain": 1, "specif": [1, 22, 90, 98, 100, 110, 151, 239, 411, 461, 523, 535, 792, 847, 884], "capabl": 1, "which": [1, 14, 23, 24, 25, 26, 27, 28, 54, 55, 56, 57, 58, 88, 89, 90, 91, 98, 99, 100, 124, 128, 151, 186, 200, 239, 249, 285, 365, 368, 369, 371, 372, 373, 390, 535, 555, 593, 600, 608, 616, 624, 750, 754, 755, 756, 757, 758, 806, 884], "mai": [1, 28, 62, 63, 77, 88, 90, 92, 100, 101, 102, 117, 126, 128, 153, 182, 183, 202, 239, 280, 285, 307, 312, 319, 332, 348, 351, 412, 413, 414, 415, 416, 418, 419, 420, 425, 426, 461, 494, 495, 503, 518, 535, 571, 575, 590, 591, 593, 607, 610, 616, 624, 655, 683, 690, 697, 714, 728, 734, 810, 811, 847, 884], "exist": [1, 90, 100, 110, 616], "belong": [1, 139, 239, 565, 616], "core": [1, 81, 196, 239], "cannot": [1, 88, 89, 117, 178, 212, 239, 252, 422, 457, 535, 592, 610, 616, 803, 843, 884], "overrid": [1, 78, 108, 109, 111, 239], "str": [1, 5, 7, 10, 11, 14, 15, 22, 23, 24, 25, 26, 27, 28, 31, 39, 42, 43, 44, 45, 46, 54, 55, 56, 57, 58, 60, 63, 64, 78, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 135, 137, 138, 139, 140, 142, 144, 152, 153, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 168, 170, 172, 173, 174, 175, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 192, 193, 194, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 247, 248, 252, 266, 267, 271, 272, 273, 281, 284, 285, 309, 313, 329, 332, 335, 337, 338, 342, 348, 351, 352, 354, 356, 361, 367, 370, 385, 389, 391, 399, 402, 408, 410, 412, 413, 414, 415, 416, 418, 419, 420, 426, 427, 434, 435, 465, 466, 467, 470, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 535, 539, 550, 551, 552, 553, 554, 555, 557, 558, 561, 563, 564, 565, 566, 568, 570, 571, 579, 580, 583, 585, 586, 587, 589, 591, 592, 593, 594, 595, 600, 601, 605, 606, 607, 608, 610, 611, 612, 616, 621, 642, 648, 660, 667, 684, 691, 711, 714, 717, 719, 720, 724, 734, 736, 769, 772, 777, 778, 789, 806, 807, 851, 853, 864, 884, 887], "dt": [1, 54, 140, 239, 541, 566, 616, 889], "attempt": [1, 195, 239, 866, 884], "do": [1, 54, 61, 99, 128, 153, 191, 199, 202, 222, 239, 269, 307, 449, 454, 460, 482, 535, 550, 571, 575, 583, 592, 593, 616, 624, 644, 683, 835, 840, 846, 866, 874, 884], "so": [1, 45, 98, 99, 100, 137, 139, 140, 168, 239, 271, 449, 454, 460, 486, 565, 566, 616, 646, 835, 840, 846], "rais": [1, 10, 14, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 106, 107, 176, 239, 389, 401, 461, 509, 535, 847, 866, 874, 884], "an": [1, 55, 57, 58, 61, 64, 65, 68, 69, 72, 77, 88, 89, 91, 96, 98, 99, 102, 109, 110, 111, 117, 118, 119, 126, 129, 131, 133, 139, 140, 151, 153, 163, 165, 168, 174, 176, 191, 195, 202, 212, 222, 239, 248, 249, 252, 269, 271, 285, 293, 296, 297, 298, 302, 303, 304, 305, 306, 307, 341, 354, 375, 384, 385, 390, 403, 411, 412, 413, 414, 415, 416, 418, 419, 420, 445, 461, 470, 485, 489, 500, 505, 509, 518, 520, 535, 544, 548, 549, 550, 553, 558, 561, 565, 566, 571, 575, 583, 592, 595, 606, 610, 616, 644, 646, 667, 672, 673, 674, 675, 676, 679, 680, 681, 682, 683, 723, 728, 792, 793, 794, 795, 796, 797, 799, 800, 801, 806, 807, 831, 847, 866, 874, 884], "attributeerror": 1, "howev": [1, 126, 239, 728, 884], "can": [1, 54, 64, 69, 88, 89, 91, 92, 99, 101, 102, 109, 110, 111, 117, 125, 133, 138, 139, 163, 168, 186, 199, 202, 210, 212, 239, 252, 269, 285, 307, 329, 348, 362, 394, 407, 412, 413, 414, 415, 416, 418, 419, 420, 424, 427, 429, 432, 446, 449, 454, 460, 479, 482, 485, 489, 496, 501, 505, 511, 524, 534, 535, 550, 565, 595, 607, 610, 616, 625, 644, 660, 683, 711, 773, 788, 806, 807, 808, 812, 815, 818, 832, 835, 840, 846, 884], "other": [1, 14, 64, 88, 89, 91, 99, 106, 107, 124, 128, 134, 152, 153, 159, 160, 176, 237, 239, 251, 266, 296, 297, 298, 309, 367, 435, 474, 535, 544, 555, 570, 571, 579, 580, 606, 616, 624, 641, 673, 674, 675, 686, 753, 805, 868, 875, 883, 884], "onli": [1, 14, 22, 45, 54, 60, 62, 88, 89, 91, 92, 96, 99, 102, 103, 104, 110, 111, 117, 124, 138, 151, 153, 157, 186, 188, 239, 247, 295, 296, 297, 298, 329, 357, 407, 477, 519, 523, 535, 550, 555, 567, 571, 574, 595, 616, 670, 673, 674, 675, 711, 739, 788, 862, 884], "gener": [1, 98, 108, 109, 110, 111, 178, 199, 239, 285, 422, 428, 535, 660, 803, 814, 884], "userwarn": 1, "pl": [1, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 535, 545, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 643, 644, 647, 648, 650, 655, 656, 659, 660, 667, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 727, 728, 730, 731, 733, 734, 735, 736, 737, 739, 742, 743, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 766, 769, 770, 771, 772, 773, 774, 775, 781, 782, 783, 785, 786, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 810, 814, 815, 816, 817, 819, 820, 821, 822, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 884], "register_expr_namespac": [1, 55, 57, 58], "greet": 1, "def": [1, 55, 56, 57, 58, 109, 110, 111, 167, 199, 239, 582, 616], "__init__": [1, 2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 108], "self": [1, 55, 56, 57, 58, 61, 399, 535, 550, 558, 583, 592, 616, 624, 806, 807, 875, 884], "_expr": [1, 56], "hello": [1, 356, 449, 454, 460, 482, 535, 648, 835, 840, 846], "return": [1, 22, 24, 26, 27, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 70, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 114, 117, 118, 122, 124, 125, 126, 127, 129, 130, 133, 142, 144, 150, 151, 152, 154, 155, 162, 163, 165, 166, 167, 168, 176, 177, 178, 189, 190, 196, 199, 200, 207, 210, 212, 215, 219, 225, 239, 249, 250, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 267, 271, 272, 273, 284, 288, 290, 299, 300, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 343, 350, 356, 360, 363, 365, 366, 367, 368, 369, 371, 372, 373, 379, 383, 390, 394, 408, 409, 422, 429, 430, 431, 438, 440, 442, 444, 445, 446, 447, 448, 450, 453, 455, 456, 457, 458, 464, 469, 470, 471, 472, 473, 475, 477, 478, 479, 484, 485, 489, 497, 498, 499, 505, 507, 509, 510, 520, 525, 527, 535, 550, 553, 556, 558, 567, 573, 574, 575, 582, 583, 592, 593, 599, 600, 608, 611, 612, 616, 621, 622, 623, 625, 632, 633, 635, 636, 639, 640, 642, 646, 647, 648, 659, 662, 664, 684, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 725, 728, 733, 741, 743, 748, 750, 751, 753, 754, 755, 756, 757, 758, 761, 763, 766, 773, 790, 791, 803, 805, 807, 815, 824, 825, 826, 828, 830, 831, 832, 833, 834, 836, 839, 841, 842, 843, 844, 847, 850, 856, 858, 869, 871, 875, 884], "lit": [1, 86, 114, 288, 375, 494, 496, 503, 524, 527, 535, 662, 736, 884], "alia": [1, 54, 56, 58, 139, 140, 155, 201, 207, 208, 239, 252, 263, 269, 296, 297, 298, 302, 303, 304, 305, 306, 312, 314, 315, 316, 318, 321, 323, 325, 328, 329, 330, 332, 333, 334, 336, 337, 340, 341, 342, 354, 356, 361, 366, 367, 375, 378, 379, 392, 399, 400, 407, 423, 439, 440, 443, 445, 447, 450, 455, 457, 458, 459, 474, 475, 481, 487, 488, 490, 491, 496, 499, 500, 504, 519, 523, 524, 535, 565, 566, 568, 574, 601, 604, 605, 609, 616, 637, 644, 690, 691, 694, 711, 718, 723, 724, 766, 843, 844, 884], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 356, 449, 454, 460, 535, 648, 835, 840, 846], "select": [1, 54, 55, 56, 57, 59, 87, 88, 89, 90, 92, 96, 98, 99, 101, 117, 150, 153, 163, 167, 176, 185, 197, 201, 203, 239, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 282, 283, 285, 286, 287, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 355, 356, 357, 358, 359, 361, 362, 364, 365, 367, 368, 370, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 448, 449, 453, 454, 456, 457, 458, 460, 462, 463, 465, 466, 467, 468, 471, 472, 473, 475, 476, 477, 478, 479, 480, 482, 484, 485, 487, 489, 490, 492, 493, 496, 499, 501, 502, 504, 505, 507, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 535, 551, 568, 571, 582, 594, 601, 606, 608, 616, 644, 660, 806, 807, 819, 830, 832, 857, 884], "register_dataframe_namespac": [1, 56, 57, 58], "split": [1, 55, 165, 210, 239, 356, 457, 458, 535, 843, 844], "splitfram": [1, 55], "df": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 55, 56, 59, 77, 78, 79, 80, 81, 82, 83, 99, 109, 110, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 282, 283, 285, 286, 287, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 485, 487, 488, 489, 490, 491, 492, 493, 496, 499, 500, 501, 502, 504, 505, 507, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 527, 535, 548, 549, 550, 551, 553, 554, 555, 557, 558, 559, 560, 562, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 589, 590, 591, 592, 594, 595, 596, 597, 598, 600, 601, 602, 604, 607, 608, 610, 611, 612, 616, 644, 660, 669, 830, 832, 838, 843, 844, 864, 884], "_df": [1, 55], "by_alternate_row": 1, "list": [1, 31, 54, 55, 57, 61, 63, 83, 85, 87, 88, 89, 90, 92, 96, 98, 99, 100, 109, 110, 111, 120, 125, 126, 127, 131, 136, 139, 144, 151, 162, 165, 176, 177, 186, 192, 193, 199, 200, 201, 202, 208, 211, 222, 239, 247, 266, 268, 269, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 348, 350, 356, 384, 390, 391, 399, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 426, 434, 435, 445, 456, 465, 466, 470, 489, 490, 496, 500, 511, 514, 523, 524, 535, 551, 554, 555, 556, 557, 561, 565, 579, 600, 601, 605, 606, 616, 638, 641, 643, 644, 646, 647, 648, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 671, 728, 733, 737, 740, 753, 790, 792, 793, 794, 795, 796, 797, 799, 800, 801, 831, 842, 853, 857, 865, 884], "with_row_count": [1, 239, 616, 807, 884], "name": [1, 12, 16, 18, 26, 44, 55, 56, 57, 58, 63, 64, 67, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 117, 120, 123, 124, 132, 135, 137, 151, 152, 153, 159, 168, 172, 176, 177, 179, 192, 198, 199, 201, 207, 208, 209, 239, 248, 285, 332, 337, 348, 375, 385, 389, 391, 402, 465, 466, 467, 482, 483, 489, 493, 496, 501, 507, 508, 511, 514, 516, 517, 519, 521, 524, 525, 535, 551, 554, 570, 571, 579, 586, 588, 595, 601, 605, 607, 608, 609, 616, 621, 660, 672, 714, 719, 789, 851, 853, 864, 867, 884], "n": [1, 9, 11, 19, 27, 31, 32, 55, 56, 57, 58, 64, 85, 86, 88, 89, 99, 114, 117, 128, 139, 142, 155, 165, 178, 189, 190, 196, 215, 225, 239, 268, 272, 284, 307, 308, 312, 316, 336, 341, 351, 360, 379, 400, 408, 422, 432, 457, 458, 469, 471, 475, 505, 507, 519, 525, 535, 550, 565, 567, 574, 598, 599, 611, 612, 616, 624, 643, 647, 659, 683, 685, 690, 694, 718, 723, 734, 743, 766, 781, 803, 818, 822, 843, 844, 856, 858, 869, 873, 884], "filter": [1, 55, 99, 101, 124, 148, 212, 239, 443, 459, 481, 485, 535, 555, 558, 568, 610, 616, 806, 884], "col": [1, 24, 54, 55, 56, 57, 59, 80, 82, 99, 109, 110, 117, 131, 138, 139, 140, 148, 150, 163, 167, 176, 180, 186, 201, 207, 208, 210, 239, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 282, 283, 285, 286, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 354, 355, 356, 357, 361, 362, 363, 364, 366, 367, 369, 370, 371, 374, 375, 376, 377, 381, 382, 383, 386, 387, 388, 393, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 485, 490, 491, 496, 499, 502, 504, 505, 506, 511, 514, 517, 523, 524, 527, 535, 561, 564, 565, 566, 568, 582, 589, 595, 601, 604, 605, 606, 609, 616, 644, 660, 669, 711, 790, 806, 807, 830, 832, 847, 884], "2": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 77, 78, 79, 80, 81, 82, 83, 98, 99, 101, 105, 106, 107, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 246, 247, 248, 250, 251, 252, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 294, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 309, 315, 317, 318, 321, 323, 324, 325, 326, 328, 329, 331, 332, 333, 334, 337, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 438, 440, 443, 445, 446, 447, 449, 450, 451, 452, 454, 455, 457, 458, 459, 460, 462, 463, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482, 487, 488, 489, 490, 491, 492, 493, 496, 499, 500, 501, 502, 504, 505, 507, 509, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 527, 535, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 570, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 616, 621, 624, 625, 627, 631, 632, 633, 634, 635, 636, 643, 644, 647, 648, 650, 655, 656, 659, 660, 669, 670, 671, 676, 677, 680, 681, 682, 683, 684, 686, 695, 699, 700, 706, 708, 713, 714, 715, 719, 722, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 742, 743, 745, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 781, 782, 783, 785, 786, 789, 791, 792, 793, 794, 795, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 810, 814, 816, 818, 819, 820, 821, 822, 824, 826, 831, 832, 835, 836, 837, 838, 840, 843, 844, 846, 855, 856, 857, 858, 859, 862, 863, 864, 865, 866, 867, 869, 870, 871, 872, 873, 875, 884], "0": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 28, 54, 55, 56, 58, 59, 63, 83, 88, 89, 91, 92, 96, 98, 99, 101, 102, 103, 104, 105, 108, 109, 110, 111, 114, 117, 118, 119, 121, 122, 125, 129, 130, 133, 134, 136, 137, 139, 141, 145, 150, 151, 152, 154, 156, 157, 158, 161, 162, 163, 164, 166, 169, 170, 174, 178, 179, 180, 183, 185, 186, 187, 188, 194, 197, 199, 200, 202, 203, 204, 207, 208, 209, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 242, 246, 247, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 269, 271, 277, 285, 293, 295, 297, 298, 299, 300, 302, 307, 310, 311, 317, 321, 323, 324, 328, 333, 334, 345, 346, 347, 349, 352, 353, 357, 359, 362, 365, 368, 369, 371, 372, 373, 375, 376, 381, 382, 384, 386, 387, 388, 393, 396, 397, 398, 400, 401, 404, 405, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 427, 429, 430, 431, 432, 436, 437, 444, 464, 468, 472, 473, 474, 480, 485, 487, 488, 490, 493, 494, 496, 500, 503, 512, 513, 516, 517, 521, 524, 526, 527, 535, 548, 549, 554, 556, 559, 560, 565, 570, 573, 578, 583, 584, 588, 589, 591, 592, 593, 595, 596, 602, 604, 605, 606, 607, 610, 616, 626, 627, 628, 629, 630, 631, 632, 634, 636, 644, 646, 667, 670, 672, 677, 678, 683, 684, 686, 695, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 715, 716, 727, 729, 730, 731, 735, 739, 742, 750, 752, 754, 755, 756, 757, 758, 763, 764, 770, 771, 781, 785, 786, 792, 794, 795, 797, 798, 799, 801, 803, 815, 816, 817, 821, 822, 824, 830, 832, 850, 859, 860, 863, 867, 868, 873, 874, 884], "drop": [1, 117, 123, 124, 200, 239, 268, 308, 310, 311, 535, 555, 600, 616, 643, 685, 687, 884], "aaa": 1, "bbb": 1, "ccc": 1, "ddd": 1, "eee": 1, "fff": 1, "column": [1, 11, 12, 15, 16, 18, 26, 45, 54, 55, 56, 57, 62, 63, 67, 71, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 92, 93, 96, 97, 98, 99, 102, 103, 104, 106, 110, 117, 122, 123, 124, 125, 126, 127, 132, 135, 137, 138, 139, 140, 144, 145, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 170, 172, 173, 174, 176, 177, 179, 180, 186, 187, 188, 192, 194, 197, 199, 200, 201, 202, 203, 204, 207, 208, 209, 210, 222, 239, 249, 250, 252, 261, 263, 266, 285, 314, 317, 319, 320, 322, 324, 326, 327, 330, 331, 333, 339, 340, 343, 348, 354, 375, 389, 391, 399, 402, 406, 408, 412, 413, 414, 415, 416, 418, 419, 420, 427, 434, 435, 457, 458, 461, 467, 481, 482, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 505, 506, 507, 510, 511, 512, 513, 514, 515, 516, 517, 518, 521, 522, 523, 524, 525, 526, 527, 535, 554, 555, 556, 557, 564, 565, 566, 570, 571, 575, 576, 577, 578, 579, 581, 582, 584, 586, 588, 589, 595, 596, 597, 600, 601, 602, 604, 605, 606, 607, 608, 616, 622, 623, 641, 692, 695, 697, 701, 703, 706, 708, 709, 712, 713, 715, 721, 722, 725, 812, 843, 844, 864, 884], "txt": 1, "utf8": [1, 8, 14, 45, 88, 89, 99, 108, 125, 126, 133, 137, 179, 195, 239, 273, 350, 356, 438, 442, 444, 445, 446, 447, 455, 456, 457, 458, 461, 489, 491, 535, 556, 588, 616, 648, 717, 733, 762, 824, 828, 830, 831, 832, 833, 841, 842, 843, 844, 847, 866, 884], "register_lazyframe_namespac": [1, 55, 56, 58], "dtypeoper": [1, 57], "ldf": [1, 57, 547, 549, 554, 555, 557, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 586, 587, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 609, 610, 611, 612, 616], "_ldf": [1, 57], "upcast_integer_typ": [1, 57], "with_column": [1, 57, 140, 167, 239, 252, 269, 293, 294, 296, 297, 298, 359, 362, 363, 366, 369, 371, 372, 373, 375, 399, 400, 443, 447, 450, 451, 452, 455, 457, 458, 459, 461, 464, 466, 474, 485, 488, 490, 491, 496, 500, 523, 524, 527, 535, 566, 582, 616, 644, 669, 847], "tp": [1, 57], "cast": [1, 56, 57, 77, 113, 133, 139, 140, 167, 196, 239, 251, 294, 305, 306, 312, 313, 407, 446, 464, 468, 474, 491, 535, 565, 566, 582, 616, 669, 681, 682, 690, 691, 788, 832, 855, 864, 868, 884], "int64": [1, 26, 56, 57, 86, 114, 125, 133, 137, 139, 140, 167, 179, 191, 239, 305, 306, 315, 318, 321, 323, 325, 328, 334, 348, 407, 468, 474, 485, 489, 501, 535, 556, 565, 566, 582, 588, 608, 616, 681, 682, 693, 696, 702, 704, 707, 710, 716, 788, 805, 855, 866, 867, 868, 884], "int8": [1, 57, 133, 239, 305, 306, 468, 535, 681, 682, 791, 855, 884], "int16": [1, 57, 305, 306, 468, 535, 681, 682, 855, 884], "int32": [1, 57, 79, 110, 111, 139, 140, 239, 293, 319, 343, 474, 535, 565, 566, 616, 697, 725, 868, 884], "1": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 86, 88, 89, 90, 98, 99, 100, 101, 105, 106, 107, 108, 110, 111, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 294, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 487, 488, 489, 490, 491, 492, 493, 496, 497, 498, 499, 500, 501, 502, 504, 505, 507, 509, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 523, 524, 525, 526, 527, 535, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 643, 644, 646, 647, 650, 655, 656, 659, 660, 667, 669, 670, 671, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 727, 729, 730, 731, 733, 734, 735, 736, 737, 739, 742, 743, 745, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 763, 765, 766, 769, 770, 771, 772, 773, 774, 775, 781, 782, 783, 785, 786, 789, 790, 791, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 830, 832, 843, 844, 847, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 884], "b": [1, 23, 24, 25, 28, 45, 57, 62, 77, 78, 79, 80, 81, 82, 83, 91, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 144, 145, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 248, 251, 252, 262, 266, 269, 273, 275, 287, 293, 294, 301, 309, 310, 311, 348, 350, 352, 353, 354, 358, 359, 362, 365, 368, 369, 370, 371, 372, 373, 375, 378, 380, 385, 394, 398, 402, 410, 427, 433, 451, 465, 466, 467, 477, 479, 481, 482, 487, 488, 489, 491, 492, 493, 496, 500, 501, 502, 504, 507, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 535, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 570, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 611, 612, 616, 624, 644, 669, 684, 686, 727, 728, 736, 753, 762, 789, 805, 837, 871, 884], "3": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 91, 98, 99, 101, 105, 106, 107, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 247, 248, 249, 252, 261, 262, 263, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 293, 294, 295, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 324, 326, 330, 331, 332, 333, 336, 337, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 378, 380, 381, 382, 383, 385, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 434, 435, 436, 439, 442, 443, 444, 447, 450, 455, 456, 457, 458, 459, 465, 466, 467, 469, 470, 471, 475, 477, 478, 479, 481, 482, 487, 488, 489, 490, 491, 492, 493, 496, 500, 501, 502, 504, 507, 509, 511, 512, 513, 514, 516, 520, 521, 522, 523, 524, 525, 526, 527, 535, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 616, 621, 624, 625, 626, 628, 629, 630, 632, 633, 634, 635, 636, 643, 644, 647, 650, 655, 656, 659, 660, 667, 669, 670, 671, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 690, 691, 692, 693, 694, 695, 698, 699, 700, 702, 704, 705, 706, 708, 710, 712, 714, 715, 718, 719, 722, 723, 724, 728, 730, 731, 733, 734, 735, 736, 737, 739, 742, 743, 745, 747, 748, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 781, 782, 783, 785, 786, 789, 791, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 810, 814, 816, 817, 818, 819, 820, 822, 828, 829, 830, 833, 836, 841, 845, 855, 856, 857, 858, 859, 860, 862, 863, 865, 866, 867, 870, 871, 872, 873, 875, 884], "4": [1, 11, 19, 23, 24, 25, 28, 45, 54, 55, 56, 57, 58, 59, 62, 64, 77, 78, 79, 80, 81, 82, 83, 99, 105, 106, 107, 111, 117, 118, 119, 121, 124, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 159, 162, 163, 165, 167, 168, 169, 173, 177, 180, 181, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 246, 247, 251, 252, 262, 268, 269, 272, 280, 281, 284, 287, 293, 295, 296, 297, 298, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 314, 318, 324, 325, 326, 330, 331, 332, 333, 334, 337, 339, 340, 343, 349, 350, 352, 353, 357, 358, 360, 361, 362, 363, 372, 373, 375, 378, 380, 382, 385, 399, 401, 402, 404, 405, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 425, 426, 429, 433, 434, 435, 436, 439, 447, 448, 450, 453, 455, 457, 458, 461, 467, 469, 470, 471, 474, 475, 487, 488, 489, 491, 492, 493, 496, 500, 502, 507, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 527, 535, 548, 549, 550, 553, 555, 557, 558, 559, 560, 562, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 607, 610, 611, 612, 616, 624, 627, 634, 643, 644, 647, 655, 656, 659, 670, 671, 673, 683, 684, 686, 695, 696, 701, 703, 706, 707, 708, 709, 713, 714, 715, 716, 717, 719, 721, 722, 733, 735, 736, 745, 748, 753, 755, 756, 757, 758, 761, 774, 781, 782, 783, 786, 795, 797, 798, 799, 800, 801, 803, 805, 815, 819, 820, 825, 833, 834, 836, 839, 841, 843, 844, 847, 857, 858, 868, 875, 884], "c": [1, 23, 24, 25, 28, 45, 55, 57, 79, 81, 91, 99, 109, 118, 119, 120, 121, 122, 123, 124, 125, 127, 131, 132, 133, 134, 136, 137, 138, 139, 142, 144, 145, 152, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 168, 169, 170, 172, 174, 175, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 191, 195, 196, 197, 199, 200, 202, 204, 205, 208, 213, 214, 215, 216, 217, 218, 220, 222, 224, 225, 239, 252, 266, 273, 275, 375, 427, 457, 461, 477, 479, 482, 487, 488, 489, 491, 492, 493, 496, 502, 504, 507, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 535, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 561, 564, 565, 570, 573, 579, 583, 586, 587, 588, 589, 592, 594, 595, 604, 605, 606, 611, 612, 616, 684, 762, 843, 847, 871, 884], "5": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 28, 54, 55, 57, 58, 59, 62, 63, 77, 79, 80, 81, 82, 85, 86, 89, 105, 110, 111, 114, 117, 118, 119, 121, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 151, 153, 154, 155, 157, 159, 162, 163, 168, 169, 170, 173, 177, 181, 189, 190, 191, 192, 193, 198, 200, 202, 203, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 247, 269, 272, 277, 283, 284, 293, 294, 295, 296, 297, 298, 307, 309, 315, 333, 334, 339, 342, 347, 348, 350, 351, 357, 360, 363, 366, 369, 371, 372, 373, 375, 380, 399, 400, 402, 404, 405, 409, 410, 411, 412, 413, 415, 419, 421, 423, 429, 440, 446, 447, 450, 464, 467, 469, 471, 475, 487, 490, 492, 493, 496, 499, 500, 501, 502, 507, 511, 512, 513, 514, 515, 516, 521, 522, 524, 525, 526, 535, 548, 549, 550, 553, 557, 558, 559, 560, 562, 564, 565, 566, 567, 569, 571, 572, 573, 574, 577, 578, 579, 583, 590, 591, 592, 594, 596, 597, 598, 599, 603, 604, 605, 607, 610, 611, 612, 616, 624, 627, 631, 634, 644, 647, 650, 659, 669, 671, 673, 679, 683, 684, 686, 691, 692, 693, 715, 716, 721, 722, 724, 731, 734, 745, 774, 781, 782, 783, 785, 786, 792, 793, 794, 796, 797, 800, 803, 805, 815, 821, 826, 832, 833, 869, 875, 884], "6": [1, 23, 24, 25, 26, 27, 28, 55, 57, 62, 77, 79, 80, 81, 82, 83, 117, 120, 122, 123, 124, 125, 127, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 150, 151, 152, 155, 156, 157, 158, 159, 161, 164, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 201, 202, 203, 204, 205, 207, 208, 209, 210, 215, 222, 224, 225, 239, 252, 287, 293, 305, 306, 309, 329, 331, 333, 344, 350, 352, 353, 358, 360, 362, 380, 399, 403, 405, 406, 409, 412, 413, 414, 415, 416, 418, 419, 420, 423, 434, 435, 440, 447, 450, 469, 471, 482, 496, 500, 523, 524, 535, 550, 551, 553, 554, 555, 556, 557, 558, 561, 562, 564, 565, 566, 567, 569, 570, 572, 574, 575, 579, 583, 586, 588, 589, 590, 591, 592, 594, 595, 598, 599, 601, 603, 604, 605, 607, 608, 611, 612, 616, 624, 671, 677, 681, 682, 684, 686, 711, 722, 733, 774, 786, 795, 797, 798, 799, 801, 805, 826, 833, 855, 884], "7": [1, 23, 24, 25, 26, 27, 28, 55, 57, 62, 64, 120, 121, 122, 123, 125, 127, 131, 132, 134, 139, 140, 142, 144, 146, 152, 156, 157, 158, 161, 164, 166, 170, 172, 174, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 195, 196, 197, 202, 203, 204, 205, 239, 306, 314, 330, 332, 337, 340, 343, 349, 360, 362, 399, 409, 413, 419, 469, 471, 523, 535, 551, 554, 556, 557, 561, 565, 566, 567, 569, 570, 574, 584, 586, 588, 589, 595, 598, 599, 604, 608, 616, 631, 692, 697, 714, 719, 722, 800, 884], "float32": [1, 24, 57, 133, 239, 749, 884], "lazi": [1, 57, 62, 64, 86, 99, 110, 114, 153, 167, 210, 239, 252, 285, 399, 485, 505, 535, 544, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 616], "register_series_namespac": [1, 55, 56, 57], "math": [1, 58, 677, 816, 859, 884], "mathshortcut": [1, 58], "": [1, 24, 58, 63, 88, 89, 111, 122, 124, 126, 138, 139, 145, 152, 153, 173, 174, 190, 210, 239, 268, 272, 273, 280, 281, 284, 316, 348, 376, 390, 394, 396, 397, 399, 400, 407, 411, 435, 447, 448, 450, 453, 455, 456, 458, 461, 464, 466, 496, 499, 501, 504, 505, 511, 514, 516, 524, 535, 555, 564, 565, 571, 599, 609, 616, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 643, 647, 648, 650, 655, 656, 659, 667, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 686, 691, 694, 714, 719, 728, 730, 731, 733, 734, 735, 736, 737, 739, 742, 743, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 769, 770, 771, 772, 773, 774, 775, 777, 778, 781, 782, 783, 785, 786, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 810, 814, 815, 816, 817, 819, 820, 822, 825, 826, 828, 829, 831, 833, 834, 835, 836, 837, 839, 840, 841, 844, 845, 846, 847, 850, 853, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 884], "_": [1, 54, 58, 457, 843], "squar": [1, 58, 212, 376, 436, 535, 610, 764, 821, 884], "cube": [1, 58], "s2": [1, 107, 133, 239, 624, 671, 686, 753, 774, 805, 875, 884], "renam": [1, 88, 89, 239, 248, 385, 392, 466, 535, 616, 853, 864, 884], "n2": 1, "in_plac": [1, 144, 184, 205, 239, 787, 789, 813, 820, 884], "true": [1, 8, 10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 26, 28, 59, 61, 62, 64, 77, 81, 85, 88, 89, 90, 91, 92, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 118, 119, 121, 124, 130, 133, 134, 136, 137, 139, 145, 147, 148, 149, 151, 153, 154, 157, 162, 163, 165, 168, 169, 176, 177, 186, 192, 199, 200, 201, 202, 203, 208, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 247, 249, 250, 251, 252, 267, 293, 302, 303, 304, 305, 306, 332, 333, 337, 344, 345, 346, 347, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 407, 417, 422, 427, 432, 434, 435, 439, 443, 446, 456, 457, 459, 461, 465, 466, 470, 475, 476, 479, 484, 485, 492, 519, 521, 523, 527, 535, 548, 549, 550, 552, 553, 555, 558, 560, 564, 565, 570, 571, 573, 575, 583, 592, 593, 595, 600, 601, 605, 616, 622, 623, 624, 625, 635, 667, 671, 672, 714, 715, 719, 727, 729, 730, 731, 737, 741, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 764, 774, 782, 783, 788, 798, 805, 818, 820, 825, 829, 832, 842, 843, 845, 847, 866, 869, 874, 875, 884], "s3": [1, 90, 100, 101, 884], "n3": 1, "arg": [2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 167, 196, 239, 504, 582, 616, 625, 866, 884], "ani": [2, 3, 4, 6, 24, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 60, 78, 79, 80, 82, 88, 89, 90, 91, 92, 96, 99, 100, 102, 104, 108, 110, 111, 117, 124, 128, 130, 131, 133, 150, 151, 165, 166, 167, 176, 177, 192, 193, 195, 196, 202, 239, 252, 266, 269, 293, 333, 353, 367, 384, 392, 409, 411, 426, 434, 461, 470, 484, 502, 509, 521, 535, 555, 560, 582, 616, 624, 625, 641, 644, 686, 715, 736, 753, 763, 790, 792, 807, 847, 857, 865, 866, 884], "kwarg": [2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 166, 167, 196, 208, 239, 582, 605, 616, 866, 884], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 535, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 884, 890], "method": [2, 3, 4, 6, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 88, 89, 91, 108, 124, 146, 151, 163, 170, 177, 223, 239, 249, 338, 362, 404, 405, 412, 413, 414, 415, 416, 418, 419, 420, 477, 517, 528, 529, 531, 535, 536, 539, 540, 541, 544, 555, 569, 584, 616, 625, 720, 745, 785, 786, 797, 868, 876, 878, 880, 884, 887, 888, 889], "A": [4, 24, 42, 61, 64, 83, 88, 89, 96, 98, 99, 100, 133, 139, 153, 165, 168, 192, 194, 202, 203, 222, 239, 246, 285, 315, 318, 321, 323, 325, 328, 334, 365, 368, 369, 371, 384, 385, 390, 402, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 439, 440, 444, 445, 446, 464, 467, 489, 490, 500, 504, 535, 565, 571, 595, 616, 660, 693, 696, 702, 704, 707, 710, 716, 792, 793, 794, 796, 799, 800, 801, 825, 826, 830, 831, 832, 837, 838, 847, 850, 884], "encod": [4, 53, 88, 89, 99, 194, 239, 289, 441, 663, 827], "set": [4, 5, 6, 7, 8, 9, 10, 11, 14, 19, 20, 22, 24, 26, 27, 55, 64, 79, 82, 88, 89, 91, 92, 96, 99, 102, 103, 104, 106, 107, 109, 110, 111, 120, 141, 151, 153, 159, 178, 185, 199, 239, 252, 281, 285, 341, 342, 359, 367, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 428, 432, 433, 449, 454, 455, 460, 535, 544, 551, 570, 571, 575, 579, 593, 594, 608, 610, 616, 624, 625, 656, 723, 724, 742, 753, 792, 793, 794, 795, 796, 797, 799, 800, 801, 803, 807, 818, 819, 835, 840, 841, 846, 866, 884], "string": [4, 5, 7, 9, 10, 14, 24, 26, 27, 31, 45, 53, 64, 88, 89, 99, 108, 109, 111, 113, 133, 139, 140, 153, 186, 202, 203, 239, 273, 291, 294, 329, 332, 337, 412, 413, 414, 415, 416, 418, 419, 420, 438, 439, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 489, 491, 504, 511, 514, 535, 552, 553, 563, 565, 566, 571, 608, 616, 648, 665, 669, 711, 714, 719, 823, 824, 825, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 884], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 563, 585, 616], "cfg": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "previous": 5, "save": [5, 544], "share": [5, 45, 126, 239, 728, 884], "option": [5, 6, 7, 54, 64, 78, 88, 90, 91, 92, 96, 100, 102, 104, 105, 108, 109, 110, 111, 124, 153, 159, 163, 192, 194, 199, 203, 208, 239, 376, 411, 412, 413, 414, 415, 416, 418, 419, 420, 432, 455, 482, 485, 509, 535, 544, 570, 571, 579, 605, 616, 764, 792, 793, 794, 795, 796, 797, 799, 800, 801, 807, 818, 841, 864, 884], "paramet": [5, 9, 10, 11, 14, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 39, 42, 44, 46, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 114, 117, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 151, 152, 153, 155, 157, 159, 160, 162, 163, 165, 166, 167, 168, 170, 172, 173, 174, 176, 177, 178, 180, 182, 183, 185, 186, 187, 188, 189, 192, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 215, 222, 223, 225, 239, 248, 251, 252, 261, 263, 266, 267, 268, 269, 271, 272, 273, 280, 281, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 316, 329, 332, 336, 337, 338, 341, 342, 344, 345, 346, 347, 348, 351, 353, 354, 358, 359, 360, 362, 363, 367, 376, 379, 381, 384, 385, 399, 400, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 469, 470, 475, 476, 479, 480, 481, 482, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 503, 504, 505, 507, 509, 510, 511, 516, 517, 518, 519, 520, 521, 523, 524, 525, 535, 550, 553, 554, 555, 558, 559, 560, 561, 563, 564, 565, 566, 567, 570, 571, 574, 575, 579, 580, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 598, 600, 601, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 621, 624, 625, 634, 637, 641, 642, 643, 644, 646, 647, 648, 655, 656, 659, 660, 662, 663, 664, 665, 666, 667, 669, 673, 674, 675, 679, 680, 681, 682, 683, 685, 686, 690, 691, 694, 711, 714, 718, 719, 720, 723, 724, 727, 728, 729, 730, 731, 734, 735, 736, 737, 742, 743, 745, 760, 764, 766, 781, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 810, 811, 814, 818, 819, 820, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 853, 856, 857, 864, 865, 866, 869, 870, 872, 873, 874, 875, 884], "json": [5, 7, 26, 27, 94, 95, 103, 239, 446, 544, 563, 585, 608, 616, 832], "produc": [5, 110, 111, 389, 510], "reset": 6, "default": [6, 22, 23, 24, 25, 26, 27, 28, 77, 78, 80, 81, 82, 86, 88, 89, 96, 99, 108, 109, 110, 111, 114, 126, 138, 140, 141, 151, 153, 159, 168, 178, 209, 239, 281, 285, 294, 344, 359, 363, 381, 396, 397, 400, 405, 422, 428, 444, 449, 454, 455, 460, 461, 485, 486, 505, 509, 521, 535, 553, 564, 566, 571, 579, 593, 608, 616, 656, 660, 669, 727, 728, 742, 777, 778, 781, 786, 803, 822, 830, 835, 840, 841, 846, 873, 884], "state": [6, 61, 72, 494, 544, 550, 558, 583, 592, 616], "note": [6, 14, 54, 64, 80, 82, 86, 88, 90, 96, 98, 100, 109, 110, 111, 114, 117, 129, 138, 139, 140, 151, 152, 153, 163, 166, 167, 176, 193, 195, 199, 200, 203, 222, 239, 242, 269, 305, 306, 310, 311, 329, 332, 337, 369, 371, 412, 413, 414, 415, 416, 418, 419, 420, 432, 447, 449, 450, 454, 460, 461, 468, 494, 503, 518, 535, 550, 558, 559, 565, 566, 567, 571, 574, 592, 600, 616, 644, 681, 682, 711, 806, 807, 813, 818, 833, 835, 836, 840, 846, 855, 866, 884], "oper": [6, 45, 62, 68, 69, 77, 78, 79, 80, 81, 82, 88, 96, 117, 128, 133, 138, 145, 154, 160, 163, 165, 167, 171, 191, 195, 196, 199, 202, 210, 222, 239, 247, 285, 302, 303, 304, 305, 306, 307, 375, 392, 405, 407, 482, 483, 500, 535, 558, 564, 567, 570, 574, 580, 616, 624, 679, 680, 681, 682, 683, 786, 788, 862, 865, 866, 874, 884], "remov": [6, 122, 222, 239, 242, 348, 449, 454, 460, 501, 535, 554, 616, 835, 840, 846], "from": [6, 24, 54, 64, 77, 78, 79, 80, 81, 82, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 121, 122, 126, 128, 137, 139, 140, 151, 153, 154, 159, 172, 176, 178, 180, 199, 200, 202, 203, 239, 302, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 348, 362, 376, 396, 397, 400, 422, 434, 435, 444, 461, 477, 479, 488, 489, 497, 498, 499, 501, 509, 521, 534, 535, 554, 555, 558, 563, 565, 566, 571, 579, 585, 586, 589, 600, 604, 606, 616, 624, 688, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 728, 747, 764, 777, 778, 779, 781, 803, 830, 872, 875, 884], "environ": [6, 22], "local": [6, 90, 100, 338, 720, 782, 783, 884], "flag": [6, 108, 208, 239, 424, 535, 553, 575, 605, 616, 808, 884], "back": [6, 54, 128, 239, 624, 884], "valu": [6, 9, 22, 24, 26, 39, 40, 52, 54, 62, 63, 79, 81, 88, 89, 98, 99, 101, 106, 107, 108, 109, 110, 111, 113, 117, 124, 128, 129, 130, 134, 137, 139, 140, 141, 146, 151, 156, 157, 158, 159, 161, 163, 165, 168, 169, 170, 172, 176, 177, 178, 182, 183, 186, 187, 188, 192, 202, 203, 204, 213, 214, 216, 217, 218, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 239, 246, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 270, 271, 272, 274, 276, 277, 278, 280, 283, 284, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 307, 308, 310, 311, 314, 326, 330, 339, 345, 346, 347, 349, 351, 352, 353, 355, 357, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 371, 372, 373, 374, 377, 378, 382, 383, 384, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 400, 404, 405, 408, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 429, 430, 431, 432, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 451, 452, 455, 457, 458, 459, 464, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479, 488, 491, 492, 494, 495, 496, 502, 503, 509, 511, 512, 513, 514, 515, 518, 519, 524, 527, 535, 555, 559, 560, 565, 566, 568, 569, 576, 577, 578, 579, 581, 584, 586, 590, 591, 595, 596, 597, 602, 608, 609, 616, 620, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 639, 640, 643, 645, 646, 647, 649, 651, 652, 653, 655, 659, 661, 663, 664, 665, 666, 669, 670, 673, 674, 675, 677, 678, 683, 684, 685, 687, 688, 692, 708, 712, 721, 728, 729, 730, 731, 734, 735, 736, 739, 741, 742, 745, 748, 750, 751, 753, 754, 755, 756, 757, 758, 761, 769, 770, 772, 773, 775, 777, 778, 779, 780, 781, 784, 785, 786, 792, 793, 794, 795, 796, 797, 799, 800, 801, 803, 804, 805, 806, 807, 810, 811, 815, 816, 817, 818, 824, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 841, 843, 844, 845, 850, 855, 857, 858, 859, 860, 868, 871, 872, 874, 875, 884], "exampl": [6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 485, 487, 488, 489, 490, 491, 492, 493, 496, 499, 500, 501, 502, 504, 505, 507, 509, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 527, 535, 544, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616, 621, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 643, 644, 647, 648, 650, 655, 656, 659, 660, 667, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 727, 728, 730, 731, 733, 734, 735, 736, 737, 739, 742, 743, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 763, 765, 766, 769, 770, 771, 772, 773, 774, 775, 781, 782, 783, 785, 786, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 810, 814, 815, 816, 817, 819, 820, 822, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 855, 856, 857, 858, 859, 860, 862, 863, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 884], "current": [7, 22, 118, 119, 208, 239, 285, 332, 400, 535, 544, 548, 549, 605, 616, 672, 676, 714, 781, 884], "activ": [8, 12, 13, 15, 16, 17, 18, 21, 269, 644], "bool": [8, 10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 26, 28, 39, 54, 59, 61, 62, 77, 81, 88, 89, 92, 94, 96, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 118, 119, 130, 131, 133, 134, 136, 138, 139, 144, 145, 147, 148, 149, 153, 165, 168, 178, 184, 186, 192, 196, 199, 200, 201, 203, 205, 208, 214, 216, 217, 220, 239, 249, 250, 251, 261, 263, 267, 269, 282, 293, 302, 303, 304, 305, 306, 307, 333, 344, 345, 346, 347, 351, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 384, 405, 407, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 426, 427, 432, 434, 435, 439, 443, 451, 452, 456, 457, 459, 461, 465, 466, 475, 476, 479, 484, 485, 486, 488, 494, 509, 519, 521, 523, 527, 535, 548, 550, 552, 553, 558, 560, 561, 564, 565, 570, 571, 575, 583, 592, 593, 595, 600, 601, 605, 608, 616, 622, 623, 624, 625, 634, 637, 642, 644, 657, 667, 672, 679, 680, 681, 682, 683, 715, 727, 729, 730, 731, 734, 737, 741, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 782, 783, 786, 787, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 805, 807, 808, 813, 818, 820, 825, 829, 837, 838, 842, 843, 845, 847, 865, 866, 869, 870, 872, 874, 884], "ascii": [8, 14, 448, 450, 453, 464, 834, 836, 839, 850], "charact": [8, 9, 14, 20, 24, 88, 89, 99, 239, 329, 356, 447, 448, 449, 453, 454, 456, 457, 460, 464, 535, 583, 616, 711, 833, 834, 835, 839, 840, 842, 843, 846, 850], "print": [8, 9, 11, 13, 19, 105, 125, 137, 138, 154, 239, 361, 535, 568, 616, 753, 792, 884], "tabl": [8, 10, 11, 13, 14, 15, 16, 17, 19, 20, 44, 77, 88, 89, 90, 99, 100, 168, 191, 196, 202, 222, 239], "outlin": 8, "fals": [8, 10, 12, 13, 15, 16, 17, 18, 19, 22, 26, 28, 54, 59, 61, 64, 88, 89, 91, 92, 96, 99, 103, 104, 106, 107, 108, 109, 110, 111, 118, 119, 121, 133, 134, 136, 137, 138, 139, 144, 145, 147, 148, 149, 151, 153, 154, 157, 162, 163, 165, 168, 169, 176, 177, 178, 184, 186, 192, 196, 199, 200, 203, 205, 208, 213, 214, 216, 217, 218, 220, 224, 239, 249, 250, 261, 263, 267, 269, 282, 302, 303, 304, 305, 306, 307, 333, 344, 345, 346, 347, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 376, 384, 405, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 427, 432, 434, 435, 439, 443, 451, 452, 456, 457, 459, 461, 475, 476, 479, 485, 486, 494, 509, 519, 521, 523, 527, 535, 548, 549, 550, 552, 553, 558, 564, 565, 570, 571, 573, 575, 583, 592, 593, 595, 605, 616, 624, 634, 637, 644, 657, 667, 671, 672, 679, 680, 681, 682, 683, 715, 727, 729, 730, 731, 737, 746, 748, 750, 753, 754, 755, 756, 757, 758, 760, 761, 764, 774, 782, 783, 786, 787, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 805, 808, 813, 818, 820, 825, 829, 837, 838, 842, 843, 845, 847, 865, 866, 869, 870, 872, 874, 875, 884], "revert": 8, "abc": [8, 12, 13, 15, 16, 17, 18, 19, 451, 837], "xyz": [8, 12, 13, 15, 16, 17, 18, 19, 440, 445, 826, 831, 864, 884], "shape": [8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 75, 77, 78, 79, 80, 81, 82, 83, 86, 99, 101, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 152, 153, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 178, 180, 182, 183, 185, 186, 187, 188, 189, 190, 192, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 487, 488, 489, 490, 491, 492, 493, 496, 499, 500, 501, 502, 504, 505, 507, 511, 512, 513, 514, 515, 516, 520, 521, 522, 523, 524, 525, 526, 527, 535, 548, 550, 554, 555, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 586, 587, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 610, 611, 612, 616, 624, 625, 626, 627, 628, 629, 630, 631, 634, 635, 636, 643, 644, 647, 648, 650, 655, 656, 659, 660, 667, 669, 670, 672, 673, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 730, 731, 733, 734, 735, 736, 737, 739, 742, 743, 745, 748, 750, 753, 754, 755, 756, 757, 758, 761, 763, 766, 773, 781, 782, 783, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 810, 814, 815, 816, 817, 819, 820, 821, 825, 826, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 856, 857, 858, 859, 860, 863, 864, 868, 870, 871, 872, 875, 884], "f64": [8, 10, 12, 13, 15, 16, 17, 18, 19, 54, 56, 58, 63, 101, 110, 118, 119, 121, 122, 124, 125, 129, 130, 133, 136, 145, 152, 153, 157, 158, 166, 169, 170, 185, 186, 187, 200, 204, 207, 208, 214, 216, 217, 218, 219, 220, 223, 224, 239, 246, 253, 254, 255, 256, 257, 258, 277, 293, 295, 299, 300, 307, 310, 311, 333, 344, 345, 346, 347, 348, 349, 357, 362, 369, 371, 372, 373, 375, 376, 381, 382, 386, 387, 388, 393, 396, 397, 400, 401, 404, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 430, 431, 432, 436, 437, 472, 473, 480, 487, 488, 490, 493, 501, 512, 513, 516, 521, 522, 526, 535, 548, 554, 555, 559, 560, 570, 571, 577, 578, 584, 595, 596, 602, 604, 605, 606, 616, 626, 627, 628, 629, 630, 631, 670, 677, 678, 683, 684, 715, 730, 731, 735, 739, 781, 792, 794, 795, 797, 798, 799, 801, 802, 816, 817, 821, 859, 860, 884], "int": [9, 11, 19, 20, 24, 28, 39, 56, 79, 82, 85, 86, 87, 88, 89, 90, 91, 92, 96, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 112, 114, 117, 126, 129, 130, 132, 141, 142, 143, 145, 151, 153, 155, 156, 157, 161, 162, 163, 174, 176, 178, 181, 182, 183, 185, 187, 188, 189, 190, 197, 202, 204, 206, 209, 215, 225, 239, 267, 268, 271, 272, 280, 281, 284, 285, 287, 296, 297, 298, 307, 308, 345, 346, 347, 351, 352, 353, 358, 359, 360, 363, 379, 400, 401, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 428, 433, 437, 444, 448, 453, 455, 457, 458, 464, 465, 466, 469, 470, 471, 475, 480, 485, 488, 492, 496, 497, 498, 499, 505, 507, 511, 513, 514, 515, 516, 519, 521, 522, 523, 524, 525, 526, 535, 558, 559, 560, 567, 571, 574, 583, 590, 591, 593, 594, 596, 598, 599, 602, 603, 607, 611, 612, 616, 632, 633, 642, 643, 646, 647, 655, 656, 659, 660, 667, 671, 673, 674, 675, 683, 685, 728, 729, 730, 731, 734, 735, 736, 742, 743, 765, 766, 769, 770, 772, 774, 775, 777, 778, 779, 780, 781, 784, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 806, 807, 810, 811, 814, 819, 822, 830, 834, 839, 841, 843, 844, 850, 855, 856, 857, 858, 869, 873, 884], "number": [9, 11, 19, 20, 24, 28, 54, 73, 85, 86, 88, 89, 91, 99, 103, 109, 110, 114, 126, 127, 129, 130, 142, 151, 154, 155, 162, 163, 178, 182, 183, 189, 202, 213, 215, 225, 239, 268, 272, 280, 284, 285, 287, 301, 307, 308, 317, 319, 324, 326, 333, 339, 340, 343, 345, 346, 347, 351, 353, 358, 360, 369, 371, 378, 379, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 425, 426, 428, 447, 450, 457, 458, 469, 475, 492, 507, 521, 525, 535, 557, 558, 559, 560, 567, 574, 583, 590, 591, 593, 598, 611, 612, 616, 643, 647, 655, 659, 660, 683, 685, 695, 697, 706, 708, 715, 721, 722, 725, 728, 729, 730, 731, 734, 736, 743, 752, 766, 774, 775, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 810, 811, 814, 822, 833, 836, 843, 844, 856, 869, 873, 884], "format": [10, 14, 24, 26, 87, 88, 89, 94, 99, 101, 127, 159, 237, 239, 332, 335, 337, 461, 557, 563, 579, 608, 616, 717, 847, 883], "liter": [10, 14, 59, 64, 91, 111, 151, 156, 157, 161, 162, 165, 176, 177, 180, 188, 192, 239, 249, 250, 375, 406, 439, 451, 452, 485, 497, 498, 505, 509, 519, 523, 527, 535, 560, 589, 616, 622, 623, 806, 807, 825, 837, 838, 884], "left": [10, 64, 106, 107, 139, 140, 152, 153, 239, 345, 346, 347, 362, 363, 412, 413, 414, 415, 416, 418, 419, 420, 448, 464, 474, 488, 494, 495, 503, 518, 535, 565, 566, 570, 571, 616, 729, 730, 731, 834, 850, 868, 884], "center": [10, 345, 346, 347, 411, 412, 413, 414, 415, 416, 418, 419, 420, 535, 729, 730, 731, 792, 793, 794, 795, 796, 797, 799, 800, 801, 884], "right": [10, 12, 64, 88, 89, 106, 107, 139, 140, 152, 153, 239, 345, 346, 347, 363, 412, 413, 414, 415, 416, 418, 419, 420, 432, 453, 488, 535, 565, 566, 570, 571, 616, 729, 730, 731, 818, 839, 884], "cell": 10, "align": [10, 54, 464, 850], "keyerror": [10, 14], "recognis": [10, 14, 108], "column_abc": 10, "column_xyz": 10, "If": [11, 24, 26, 27, 28, 45, 60, 63, 64, 78, 80, 81, 82, 88, 89, 90, 91, 92, 96, 99, 100, 102, 103, 104, 117, 128, 139, 140, 151, 153, 159, 163, 165, 178, 185, 195, 196, 199, 222, 239, 252, 281, 285, 296, 297, 298, 354, 376, 384, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 428, 432, 433, 434, 435, 447, 449, 450, 454, 455, 456, 457, 458, 460, 461, 475, 482, 484, 485, 486, 492, 494, 503, 509, 521, 535, 565, 566, 570, 571, 575, 579, 593, 594, 608, 610, 616, 624, 625, 656, 673, 674, 675, 741, 764, 788, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 808, 818, 819, 833, 835, 836, 840, 841, 842, 843, 844, 846, 847, 862, 866, 869, 874, 884], "rang": [11, 63, 64, 98, 126, 139, 239, 314, 326, 330, 331, 332, 337, 339, 362, 485, 490, 497, 498, 535, 565, 616, 692, 708, 712, 713, 714, 719, 721, 728, 781, 884], "100": [11, 88, 89, 99, 103, 464, 485, 793, 794, 796, 884], "98": [11, 145, 239, 434, 435, 470, 475, 535], "99": [11, 129, 130, 145, 148, 239, 247, 351, 353, 434, 435, 470, 475, 488, 535, 559, 560, 616, 727, 734, 884], "imove": [12, 338, 345, 346, 347, 412, 413, 415, 419, 535, 720, 729, 730, 731, 793, 794, 796, 800, 884], "inlin": 12, "parenthes": 12, "below": [13, 90, 100, 124, 138, 239, 362, 527, 535, 555, 616], "when": [13, 17, 28, 45, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 88, 89, 92, 96, 99, 102, 103, 110, 111, 113, 117, 125, 126, 128, 130, 133, 139, 167, 176, 180, 239, 296, 297, 298, 345, 346, 347, 353, 384, 390, 449, 454, 460, 461, 494, 503, 535, 560, 565, 589, 593, 616, 624, 673, 674, 675, 728, 729, 730, 731, 736, 806, 807, 835, 840, 846, 884], "displai": [13, 17], "ascii_ful": 14, "ascii_full_condens": 14, "ascii_no_bord": 14, "ascii_borders_onli": 14, "ascii_borders_only_condens": 14, "ascii_horizontal_onli": 14, "ascii_markdown": 14, "utf8_ful": [14, 54], "utf8_full_condens": 14, "utf8_no_bord": 14, "utf8_borders_onli": 14, "utf8_horizontal_onli": 14, "noth": [14, 440, 444, 445, 446, 826, 830, 831, 832], "style": [14, 168, 239], "border": 14, "line": [14, 88, 89, 91, 99, 137, 239], "includ": [14, 22, 24, 60, 90, 100, 110, 126, 139, 199, 202, 239, 333, 363, 456, 457, 494, 535, 565, 616, 715, 728, 842, 843, 874, 884], "row": [14, 19, 24, 26, 28, 54, 55, 57, 70, 73, 76, 79, 80, 82, 88, 89, 91, 92, 96, 99, 102, 103, 104, 109, 110, 117, 124, 128, 131, 133, 137, 139, 141, 142, 147, 149, 151, 153, 154, 155, 159, 163, 185, 189, 190, 193, 200, 202, 209, 212, 215, 225, 239, 252, 350, 356, 360, 379, 400, 409, 433, 469, 494, 495, 503, 507, 511, 514, 518, 525, 535, 550, 555, 558, 561, 562, 565, 567, 571, 572, 574, 575, 579, 593, 594, 598, 599, 600, 607, 610, 611, 612, 616, 624, 733, 743, 766, 781, 790, 819, 856, 884], "divid": [14, 332, 337, 345, 346, 347, 376, 535, 714, 719, 729, 730, 731, 764, 884], "same": [14, 45, 54, 61, 106, 109, 117, 200, 212, 239, 246, 251, 252, 350, 356, 411, 412, 413, 414, 415, 416, 418, 419, 420, 489, 535, 600, 610, 616, 620, 624, 625, 733, 792, 793, 794, 795, 796, 797, 799, 800, 801, 875, 884], "dens": [14, 137, 239, 405, 535, 786, 884], "space": 14, "horizont": [14, 62, 133, 144, 202, 239, 491, 494, 495, 496, 500, 503, 511, 514, 518, 524], "markdown": 14, "compat": [14, 28, 100, 239, 593, 616], "No": 14, "The": [14, 28, 39, 46, 54, 60, 85, 88, 96, 98, 99, 100, 117, 139, 140, 141, 146, 153, 160, 176, 201, 203, 212, 222, 239, 252, 285, 287, 288, 289, 290, 314, 326, 329, 330, 332, 337, 339, 351, 356, 358, 359, 384, 405, 408, 411, 412, 413, 414, 415, 416, 418, 419, 420, 429, 432, 435, 438, 441, 442, 447, 448, 449, 453, 454, 460, 464, 486, 505, 528, 529, 531, 535, 536, 539, 540, 541, 548, 564, 565, 566, 567, 569, 571, 574, 575, 580, 583, 593, 601, 610, 616, 662, 663, 664, 672, 692, 708, 711, 712, 714, 719, 721, 734, 742, 745, 786, 792, 793, 794, 795, 796, 797, 799, 800, 801, 815, 818, 824, 827, 828, 833, 834, 835, 839, 840, 846, 850, 876, 878, 880, 884, 887, 888, 889], "one": [14, 54, 70, 111, 130, 131, 137, 139, 140, 151, 159, 168, 176, 177, 194, 198, 210, 211, 222, 239, 247, 353, 375, 411, 434, 435, 465, 470, 482, 511, 514, 523, 524, 535, 554, 560, 561, 565, 566, 579, 606, 616, 624, 736, 792, 851, 884], "more": [14, 26, 28, 54, 76, 90, 96, 100, 110, 111, 117, 138, 151, 154, 159, 163, 166, 176, 177, 178, 200, 212, 239, 252, 296, 297, 298, 375, 376, 384, 422, 432, 476, 511, 514, 524, 535, 564, 579, 593, 600, 610, 616, 625, 673, 674, 675, 764, 803, 818, 870, 884, 891], "semigraph": 14, "box": [14, 117, 239], "draw": [14, 19, 20], "found": [14, 24, 71, 125, 239, 446, 461, 466, 832], "unicod": 14, "block": [14, 607, 616, 806, 807, 884], "http": [14, 98, 444, 830, 891], "en": 14, "wikipedia": 14, "org": 14, "wiki": 14, "drawing_charact": 14, "box_draw": 14, "hide": [15, 16, 17, 18], "etc": [15, 80, 82, 88, 90, 92, 96, 100, 102, 104, 485, 806, 807, 884], "inform": [17, 60, 79, 90, 100, 166, 239, 296, 297, 298, 376, 432, 535, 583, 616, 673, 674, 675, 764, 818, 884], "separ": [18, 24, 199, 239, 273, 356, 491, 494, 495, 535, 648], "between": [18, 26, 62, 94, 108, 109, 110, 111, 170, 223, 239, 273, 293, 309, 363, 400, 404, 416, 438, 493, 516, 517, 521, 535, 584, 616, 648, 667, 686, 781, 785, 797, 824, 884], "set_tbl_column_data_type_inlin": 18, "max": [19, 28, 110, 111, 121, 130, 139, 140, 168, 239, 296, 297, 303, 353, 399, 405, 412, 424, 458, 535, 560, 565, 566, 593, 609, 616, 673, 674, 679, 684, 736, 786, 793, 808, 844, 884], "both": [19, 24, 45, 64, 139, 140, 152, 153, 160, 176, 239, 251, 363, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 570, 571, 580, 616], "element": [19, 86, 111, 114, 253, 254, 255, 256, 257, 258, 269, 299, 300, 302, 303, 304, 305, 306, 307, 349, 359, 367, 382, 400, 405, 408, 423, 429, 430, 431, 436, 457, 458, 472, 473, 475, 535, 625, 626, 627, 628, 629, 630, 631, 644, 677, 678, 679, 680, 681, 682, 683, 732, 737, 753, 768, 781, 786, 804, 815, 816, 817, 821, 822, 843, 844, 859, 860, 869, 870, 873, 884], "width": [20, 88, 89, 239, 448, 453, 464, 616, 834, 839, 850], "char": [20, 45, 450, 836], "enabl": [21, 424, 535, 808, 884], "addit": [21, 90, 100, 108, 109], "verbos": 21, "debug": [21, 550, 558, 575, 616], "log": [21, 56, 344, 475, 535, 727, 869, 884], "if_set": 22, "dict": [22, 28, 46, 55, 57, 60, 78, 79, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 102, 104, 110, 165, 166, 172, 179, 192, 193, 239, 586, 588, 616], "none": [22, 23, 24, 25, 26, 27, 28, 31, 40, 44, 54, 63, 64, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 117, 118, 121, 124, 129, 130, 137, 139, 140, 141, 146, 152, 153, 154, 157, 159, 163, 164, 176, 178, 183, 185, 192, 194, 199, 200, 201, 202, 203, 208, 239, 248, 251, 252, 262, 271, 281, 285, 287, 296, 297, 298, 301, 310, 311, 332, 337, 342, 345, 346, 347, 348, 351, 352, 353, 358, 359, 362, 363, 369, 370, 371, 372, 373, 378, 384, 398, 400, 406, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 426, 427, 428, 429, 433, 438, 439, 442, 443, 446, 447, 448, 449, 450, 453, 454, 455, 457, 458, 459, 460, 461, 464, 465, 466, 474, 482, 484, 485, 488, 491, 492, 498, 499, 501, 502, 509, 510, 519, 522, 523, 526, 535, 548, 549, 555, 559, 560, 565, 566, 569, 570, 571, 573, 575, 579, 591, 592, 593, 594, 595, 600, 601, 605, 606, 608, 610, 616, 625, 632, 633, 646, 656, 660, 672, 673, 684, 686, 714, 719, 724, 726, 727, 729, 730, 731, 734, 735, 736, 738, 741, 742, 744, 745, 757, 758, 764, 776, 792, 793, 794, 795, 796, 797, 799, 800, 801, 803, 809, 811, 814, 815, 818, 819, 822, 824, 825, 828, 829, 832, 833, 834, 835, 836, 839, 840, 841, 843, 844, 845, 846, 847, 861, 864, 865, 868, 873, 874, 884], "show": [22, 124, 137, 154, 164, 239, 555, 583, 592, 616], "variabl": [22, 83, 159, 194, 239, 579, 616, 863, 884], "chang": [22, 54, 63, 88, 89, 101, 202, 203, 239, 307, 332, 400, 412, 413, 414, 415, 416, 418, 419, 420, 535, 683, 691, 714, 781, 813, 884], "restrict": [22, 458, 844], "dictionari": [22, 78, 79, 82, 88, 89, 93, 97, 99, 165, 192, 193, 239, 684, 884], "those": [22, 405, 535, 786, 884], "_have_": 22, "been": [22, 242, 405, 535, 786, 884], "set_stat": 22, "all_stat": 22, "file": [23, 24, 25, 26, 27, 28, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 128, 239, 558, 585, 593, 608, 616, 624, 884], "binaryio": [23, 25, 87, 88, 91, 92, 93, 96, 97, 239], "bytesio": [23, 24, 25, 28, 87, 88, 89, 91, 92, 96, 239], "path": [23, 24, 25, 26, 27, 28, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 239, 424, 446, 535, 585, 593, 608, 616, 808, 832, 884], "compress": [23, 25, 28, 239, 593, 616], "avrocompress": [23, 239], "uncompress": [23, 25, 28, 92, 102, 239, 593, 616], "write": [23, 24, 25, 26, 28, 239, 296, 297, 298, 535, 573, 592, 593, 608, 616, 673, 674, 675, 884], "apach": [23, 28, 87, 239], "avro": [23, 87, 239, 544], "should": [23, 24, 25, 26, 27, 28, 86, 108, 109, 111, 114, 117, 139, 151, 153, 212, 239, 247, 252, 269, 294, 307, 341, 369, 371, 411, 412, 413, 414, 415, 416, 418, 419, 420, 423, 432, 509, 535, 554, 565, 570, 571, 575, 592, 593, 608, 610, 616, 625, 644, 669, 683, 723, 792, 793, 794, 795, 796, 797, 799, 800, 801, 804, 818, 884], "written": [23, 24, 25, 26, 27, 28, 239, 593, 608, 616], "snappi": [23, 28, 239, 593, 616], "deflat": [23, 239], "import": [23, 24, 25, 28, 31, 64, 77, 80, 81, 99, 100, 101, 106, 107, 108, 109, 110, 111, 121, 137, 139, 153, 196, 202, 203, 239, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 499, 509, 565, 571, 575, 616, 677, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 747, 750, 754, 755, 756, 792, 816, 859, 884], "pathlib": [23, 24, 25, 26, 27, 28, 87, 91, 92, 93, 94, 95, 97, 99, 102, 103, 239, 585, 608, 616], "foo": [23, 24, 25, 26, 27, 28, 83, 117, 120, 122, 123, 124, 125, 128, 131, 132, 133, 134, 135, 136, 141, 142, 143, 144, 145, 146, 148, 152, 155, 156, 157, 158, 161, 164, 165, 166, 168, 170, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 199, 201, 204, 205, 206, 210, 222, 239, 248, 267, 270, 271, 274, 275, 296, 297, 298, 329, 356, 360, 361, 401, 409, 425, 426, 438, 440, 442, 445, 449, 454, 456, 458, 460, 462, 463, 469, 471, 482, 485, 487, 489, 492, 493, 502, 506, 507, 509, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 525, 526, 527, 535, 551, 554, 555, 556, 561, 568, 569, 570, 586, 588, 589, 595, 600, 601, 603, 605, 606, 608, 616, 648, 673, 711, 826, 828, 831, 844, 884], "bar": [23, 24, 25, 26, 27, 28, 83, 117, 120, 122, 123, 124, 125, 128, 131, 132, 133, 134, 135, 136, 142, 144, 145, 146, 148, 152, 155, 156, 157, 158, 161, 164, 165, 166, 168, 170, 172, 173, 174, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 201, 204, 205, 210, 222, 239, 248, 275, 361, 432, 442, 456, 458, 482, 487, 489, 492, 493, 502, 507, 511, 512, 513, 514, 515, 516, 520, 521, 522, 525, 526, 527, 535, 551, 554, 555, 556, 561, 568, 569, 570, 586, 588, 589, 595, 600, 601, 603, 608, 616, 648, 818, 828, 844, 884], "8": [23, 24, 25, 26, 27, 28, 38, 51, 53, 54, 55, 57, 58, 62, 105, 109, 110, 117, 120, 121, 122, 123, 124, 125, 127, 131, 132, 134, 137, 142, 144, 152, 156, 157, 158, 161, 166, 170, 172, 174, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 190, 195, 196, 197, 202, 204, 205, 208, 239, 251, 262, 268, 269, 301, 307, 310, 311, 362, 378, 399, 401, 402, 409, 410, 413, 414, 416, 418, 420, 427, 433, 448, 453, 461, 467, 471, 487, 492, 493, 496, 500, 502, 507, 511, 512, 513, 514, 515, 516, 521, 522, 523, 524, 525, 526, 535, 551, 554, 555, 556, 557, 561, 567, 570, 574, 575, 583, 586, 588, 589, 595, 598, 599, 604, 605, 608, 616, 643, 644, 683, 697, 781, 792, 795, 797, 798, 799, 801, 834, 839, 847, 884], "9": [23, 24, 25, 28, 54, 62, 117, 133, 140, 142, 146, 166, 180, 189, 202, 205, 207, 208, 210, 224, 239, 251, 262, 279, 282, 301, 306, 310, 311, 314, 330, 339, 340, 362, 367, 375, 378, 399, 409, 411, 413, 419, 429, 433, 471, 488, 490, 523, 535, 566, 567, 569, 574, 589, 595, 598, 604, 605, 616, 692, 701, 703, 709, 714, 715, 719, 721, 733, 753, 792, 800, 802, 815, 884], "ham": [23, 24, 25, 28, 83, 120, 122, 123, 124, 125, 131, 132, 134, 141, 142, 144, 152, 156, 157, 158, 161, 164, 166, 170, 172, 174, 176, 178, 179, 180, 182, 183, 185, 186, 187, 188, 189, 194, 195, 196, 197, 204, 205, 239, 489, 551, 554, 555, 556, 561, 570, 586, 588, 589, 595, 600, 606, 616], "d": [23, 24, 25, 28, 45, 62, 101, 121, 137, 141, 142, 145, 152, 155, 189, 191, 202, 205, 208, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 239, 316, 356, 427, 440, 445, 457, 461, 488, 505, 535, 570, 595, 605, 616, 694, 717, 826, 831, 843, 847], "e": [23, 24, 25, 28, 45, 88, 89, 91, 92, 96, 102, 104, 121, 137, 142, 155, 189, 191, 202, 208, 239, 344, 348, 356, 381, 424, 427, 432, 501, 535, 573, 605, 616, 727, 805, 808, 818, 866, 884], "dirpath": [23, 24, 25, 28, 99, 239], "new_fil": [23, 24, 25, 28, 239], "has_head": [24, 88, 89, 91, 99, 239], "sep": [24, 85, 88, 89, 99, 239, 491], "quot": [24, 88, 89, 99, 239], "batch_siz": [24, 88, 89, 103, 239], "1024": [24, 28, 88, 89, 103, 239, 593, 616], "datetime_format": [24, 239], "date_format": [24, 239], "time_format": [24, 239], "float_precis": [24, 239], "null_valu": [24, 88, 89, 99, 239], "_io": [24, 87, 91, 92, 239], "comma": [24, 239], "csv": [24, 88, 89, 91, 99, 239, 544, 593, 609, 616], "result": [24, 26, 27, 54, 78, 80, 82, 98, 99, 101, 102, 104, 111, 128, 139, 150, 163, 183, 210, 239, 345, 346, 347, 376, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 424, 426, 456, 457, 485, 494, 495, 496, 510, 524, 535, 547, 565, 575, 583, 591, 593, 608, 616, 624, 729, 730, 731, 764, 790, 792, 793, 794, 795, 796, 797, 799, 800, 801, 808, 811, 842, 843, 866, 884], "instead": [24, 26, 27, 86, 96, 110, 114, 117, 139, 151, 163, 165, 176, 177, 239, 261, 263, 363, 447, 449, 454, 460, 485, 511, 514, 524, 535, 559, 564, 565, 608, 616, 634, 637, 806, 807, 833, 835, 840, 846, 884], "whether": [24, 59, 64, 80, 82, 111, 139, 140, 239, 363, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 616], "header": [24, 28, 88, 89, 91, 99, 125, 168, 199, 239, 593, 616], "field": [24, 46, 201, 239, 285, 457, 458, 466, 494, 495, 601, 616, 660, 843, 844, 853], "symbol": [24, 239], "byte": [24, 39, 88, 89, 91, 92, 93, 96, 97, 99, 126, 239, 288, 291, 292, 447, 450, 593, 616, 662, 665, 666, 728, 833, 836, 884], "process": [24, 239, 593, 616], "per": [24, 109, 110, 137, 163, 164, 219, 221, 223, 226, 227, 228, 229, 230, 231, 232, 233, 239, 269, 271, 644, 646], "thread": [24, 85, 88, 89, 98, 112, 239, 269, 644], "specifi": [24, 54, 64, 71, 78, 80, 82, 110, 126, 130, 176, 239, 345, 346, 347, 353, 408, 448, 453, 535, 560, 616, 728, 729, 730, 731, 736, 834, 839, 884], "defin": [24, 31, 64, 108, 109, 110, 117, 139, 140, 163, 167, 212, 239, 252, 363, 412, 413, 414, 415, 416, 418, 419, 420, 484, 509, 535, 565, 566, 582, 610, 616, 625, 884], "chrono": [24, 239, 335, 461, 717, 847], "rust": [24, 28, 72, 92, 96, 117, 212, 239, 252, 535, 610], "crate": [24, 239], "fraction": [24, 106, 107, 178, 239, 333, 400, 422, 461, 535, 715, 781, 803, 884], "second": [24, 64, 139, 140, 153, 203, 239, 329, 332, 337, 412, 413, 414, 415, 416, 418, 419, 420, 461, 486, 498, 499, 535, 565, 566, 571, 616, 711, 714, 719], "precis": [24, 239, 312, 461, 690], "infer": [24, 79, 80, 82, 88, 89, 91, 99, 103, 108, 117, 239, 409, 461, 535, 790, 884], "maximum": [24, 88, 89, 99, 109, 110, 111, 156, 239, 264, 296, 297, 386, 396, 405, 511, 535, 576, 616, 639, 673, 674, 698, 769, 777, 782, 786, 884], "timeunit": [24, 31, 32, 64, 239, 312, 336, 341, 690, 718, 723], "frame": [24, 54, 91, 110, 117, 151, 160, 163, 167, 176, 177, 196, 202, 239, 580, 582, 616], "datetim": [24, 39, 64, 81, 121, 137, 139, 140, 153, 203, 239, 267, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 363, 412, 413, 414, 415, 416, 418, 419, 420, 461, 474, 488, 499, 505, 509, 514, 535, 565, 566, 571, 616, 642, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 747, 769, 772, 777, 778, 807, 847, 868, 884], "decim": [24, 39, 239, 421, 535, 802, 884], "place": [24, 123, 144, 145, 173, 182, 183, 186, 205, 239, 261, 263, 273, 280, 425, 426, 535, 590, 591, 595, 616, 634, 637, 648, 655, 787, 789, 810, 811, 820, 884], "appli": [24, 59, 62, 99, 108, 110, 111, 124, 133, 167, 210, 239, 314, 317, 319, 320, 322, 324, 326, 327, 330, 331, 333, 339, 340, 343, 346, 347, 384, 399, 411, 412, 413, 415, 419, 461, 482, 485, 494, 495, 503, 510, 518, 535, 555, 567, 574, 575, 582, 616, 692, 695, 697, 701, 703, 706, 708, 709, 712, 713, 715, 721, 722, 725, 730, 731, 792, 793, 794, 796, 800, 847, 884], "float64": [24, 86, 110, 114, 125, 126, 133, 137, 179, 239, 253, 254, 255, 256, 257, 258, 293, 299, 300, 333, 348, 369, 371, 430, 431, 472, 473, 488, 489, 501, 535, 556, 588, 616, 715], "datatyp": [24, 26, 39, 46, 52, 84, 86, 88, 89, 91, 93, 97, 111, 114, 133, 179, 239, 293, 348, 427, 461, 474, 484, 485, 489, 501, 509, 510, 535, 544, 556, 588, 608, 616, 625, 667, 684, 747, 759, 762, 812, 847, 868, 884], "repres": [24, 40, 52, 64, 77, 78, 80, 81, 82, 239, 369, 371, 489, 509, 535, 807, 822, 873, 884], "null": [24, 54, 62, 79, 88, 89, 99, 101, 121, 124, 130, 133, 134, 146, 152, 157, 158, 164, 170, 182, 183, 186, 187, 188, 192, 201, 204, 239, 248, 251, 261, 263, 268, 270, 271, 274, 280, 285, 287, 296, 297, 298, 301, 308, 310, 311, 315, 318, 321, 323, 325, 328, 334, 345, 346, 347, 348, 351, 352, 353, 354, 358, 362, 369, 370, 371, 372, 373, 378, 398, 400, 406, 411, 412, 413, 414, 415, 416, 418, 419, 420, 425, 426, 427, 429, 434, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 450, 453, 455, 457, 458, 459, 464, 474, 481, 482, 488, 490, 491, 501, 509, 523, 535, 555, 560, 569, 570, 590, 591, 595, 601, 606, 608, 616, 625, 634, 637, 643, 655, 660, 673, 685, 688, 693, 696, 702, 704, 707, 710, 716, 729, 730, 731, 734, 736, 741, 757, 758, 780, 781, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 805, 810, 811, 815, 824, 825, 826, 828, 829, 830, 831, 832, 833, 834, 836, 839, 841, 843, 844, 845, 866, 868, 874, 884], "empti": [24, 69, 91, 118, 119, 148, 159, 239, 520, 548, 549, 579, 616, 672, 676, 749, 884], "ipccompress": [25, 239], "arrow": [25, 65, 77, 92, 102, 191, 222, 239, 862, 866, 884], "ipc": [25, 92, 93, 101, 102, 239, 544], "binari": [25, 239, 288, 290, 291, 292, 662, 664, 665, 666], "stream": [25, 61, 239, 550, 552, 558, 583, 592, 593, 616], "feather": [25, 92, 102, 239, 544], "lz4": [25, 28, 239, 593, 616], "zstd": [25, 28, 239, 593, 616], "pretti": [26, 239], "row_ori": [26, 239], "json_lin": [26, 94, 239], "to_str": [26, 239, 608, 616], "io": [26, 27, 94, 95, 239, 585, 608, 616, 891], "iobas": [26, 27, 94, 95, 239, 585, 608, 616], "serial": [26, 27, 239], "represent": [26, 27, 239, 294, 314, 317, 319, 320, 322, 324, 326, 327, 330, 331, 333, 339, 340, 343, 474, 535, 552, 553, 573, 616, 669, 692, 695, 697, 701, 703, 706, 708, 709, 712, 713, 715, 721, 722, 725, 868, 884], "orient": [26, 55, 57, 80, 82, 239], "slower": [26, 80, 82, 117, 165, 203, 212, 239, 252, 535, 610], "common": [26, 239], "deprec": [26, 61, 94, 222, 239, 242, 363, 535, 608, 616], "argument": [26, 28, 61, 88, 90, 94, 96, 100, 139, 140, 157, 166, 167, 168, 188, 196, 203, 239, 332, 337, 363, 412, 413, 414, 415, 416, 418, 419, 420, 449, 454, 460, 535, 565, 566, 582, 608, 616, 714, 719, 835, 840, 846, 884], "toggl": [26, 94, 113, 239, 461, 847], "ndjson": [26, 94, 239], "ignor": [26, 61, 110, 111, 157, 188, 239, 268, 308, 396, 397, 535, 608, 616, 643, 685, 777, 778, 884], "write_ndjson": [26, 239], "newlin": [27, 95, 103, 239], "delimit": [27, 88, 89, 95, 99, 103, 239, 438, 824], "parquetcompress": [28, 239], "compression_level": [28, 239, 593, 616], "statist": [28, 88, 89, 121, 239, 346, 347, 376, 412, 413, 414, 415, 416, 417, 418, 419, 420, 432, 535, 593, 616, 684, 730, 731, 764, 798, 818, 884], "row_group_s": [28, 239, 593, 616], "use_pyarrow": [28, 88, 92, 96, 239, 593, 616, 865, 884], "pyarrow_opt": [28, 90, 96, 100, 239], "object": [28, 64, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 109, 110, 111, 154, 196, 239, 509, 544, 549, 564, 568, 573, 585, 616, 638, 668, 689, 823, 862, 884], "parquet": [28, 96, 97, 104, 239, 544, 593, 616], "gzip": [28, 239, 593, 616], "lzo": [28, 239, 593, 616], "brotli": [28, 239, 593, 616], "choos": [28, 239, 593, 616], "good": [28, 151, 239, 593, 616], "perform": [28, 69, 88, 89, 92, 96, 99, 102, 103, 104, 117, 139, 140, 153, 171, 212, 239, 252, 535, 565, 566, 571, 593, 607, 610, 616], "fast": [28, 239, 424, 535, 593, 616, 808, 884], "decompress": [28, 239, 593, 616], "backward": [28, 130, 153, 239, 287, 353, 535, 560, 571, 593, 616, 736, 884], "guarante": [28, 88, 89, 239, 558, 593, 616], "deal": [28, 239, 405, 461, 535, 593, 616, 786, 847, 884], "older": [28, 239, 593, 616], "reader": [28, 85, 88, 89, 92, 96, 239, 545, 593, 616], "level": [28, 99, 102, 103, 104, 110, 117, 133, 163, 239, 354, 535, 567, 574, 593, 616], "higher": [28, 170, 223, 239, 404, 416, 517, 535, 584, 593, 616, 785, 797, 884], "mean": [28, 83, 88, 89, 96, 99, 121, 130, 168, 194, 239, 350, 353, 356, 413, 432, 444, 487, 535, 560, 593, 616, 684, 733, 736, 741, 794, 818, 830, 884], "smaller": [28, 126, 239, 558, 593, 616, 728, 884], "disk": [28, 239, 592, 593, 616], "min": [28, 110, 111, 121, 130, 139, 140, 168, 239, 296, 298, 304, 353, 405, 415, 520, 535, 560, 565, 566, 593, 616, 673, 675, 680, 684, 736, 786, 796, 884], "11": [28, 138, 140, 239, 310, 311, 329, 332, 337, 362, 400, 419, 433, 464, 489, 524, 535, 550, 564, 566, 567, 574, 583, 593, 598, 616, 625, 711, 714, 719, 792, 884], "22": [28, 239, 332, 337, 341, 461, 489, 593, 616, 714, 719, 723, 847], "extra": [28, 88, 90, 91, 92, 96, 100, 102, 104, 128, 165, 239, 593, 616, 624, 884], "comput": [28, 61, 62, 66, 126, 153, 200, 223, 239, 246, 253, 254, 255, 256, 257, 258, 276, 277, 278, 299, 300, 302, 303, 304, 305, 306, 309, 344, 349, 376, 381, 382, 394, 400, 403, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 429, 430, 431, 432, 436, 472, 473, 493, 500, 516, 521, 535, 568, 570, 571, 593, 600, 606, 616, 620, 626, 627, 628, 629, 630, 631, 651, 652, 653, 677, 678, 679, 680, 681, 682, 686, 727, 728, 732, 764, 767, 768, 773, 781, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 815, 816, 817, 818, 821, 859, 860, 884], "size": [28, 88, 89, 109, 110, 111, 112, 126, 139, 202, 239, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 485, 535, 565, 593, 616, 728, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 884], "group": [28, 138, 139, 140, 163, 165, 168, 202, 203, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239, 247, 252, 269, 399, 434, 435, 444, 470, 484, 535, 564, 565, 566, 593, 609, 610, 611, 612, 616, 644, 830], "chunk": [28, 85, 88, 89, 99, 102, 103, 104, 110, 111, 128, 162, 239, 251, 406, 535, 593, 616, 624, 671, 740, 774, 787, 862, 884], "reduc": [28, 88, 89, 96, 99, 102, 103, 104, 217, 218, 220, 224, 239, 427, 503, 535, 593, 616, 770, 784, 812, 855, 884], "memori": [28, 62, 77, 80, 81, 82, 88, 89, 92, 96, 99, 102, 103, 104, 117, 128, 184, 212, 222, 239, 252, 406, 427, 535, 593, 610, 616, 624, 787, 812, 813, 884], "pressur": [28, 96, 103, 104, 239, 427, 535, 593, 616, 812, 884], "improv": [28, 92, 102, 239, 593, 616], "speed": [28, 239, 593, 616], "minimum": [28, 109, 110, 111, 133, 161, 239, 296, 298, 345, 346, 347, 393, 397, 405, 514, 535, 581, 593, 616, 673, 675, 705, 729, 730, 731, 778, 783, 786, 884], "64": [28, 34, 37, 50, 56, 58, 239, 401, 535, 593, 616, 781, 884], "implement": [28, 100, 117, 212, 239, 252, 535, 610, 806, 807, 884], "v": [28, 63, 126, 239, 423, 535, 804, 884], "At": [28, 239], "moment": [28, 166, 239, 376, 432, 535, 764, 818, 884], "pass": [28, 54, 64, 78, 91, 100, 109, 110, 111, 166, 167, 239, 316, 361, 449, 454, 460, 505, 535, 568, 575, 582, 592, 616, 625, 694, 835, 840, 846, 884], "pyarrow": [28, 77, 81, 88, 90, 92, 96, 100, 101, 105, 191, 195, 196, 239, 545, 862, 865, 866, 884], "write_t": [28, 239], "base": [29, 124, 131, 139, 140, 222, 239, 344, 381, 382, 511, 514, 535, 544, 555, 561, 565, 566, 616, 727, 767, 768, 875, 884], "calendar": [30, 31, 139, 140, 153, 203, 239, 319, 329, 332, 337, 343, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 571, 616, 697, 711, 714, 719, 725], "date": [31, 39, 54, 64, 88, 89, 98, 99, 101, 121, 137, 139, 140, 153, 196, 239, 267, 312, 314, 315, 316, 317, 318, 319, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 363, 412, 413, 414, 415, 416, 418, 419, 420, 461, 474, 488, 505, 514, 535, 544, 565, 566, 571, 616, 642, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 747, 769, 772, 777, 778, 807, 847, 868, 884], "time": [31, 32, 39, 60, 61, 64, 99, 128, 139, 140, 153, 203, 239, 266, 267, 285, 312, 313, 316, 329, 336, 338, 341, 342, 461, 474, 475, 490, 491, 497, 498, 499, 505, 519, 535, 544, 550, 565, 566, 571, 583, 616, 624, 641, 690, 691, 694, 711, 718, 720, 723, 724, 847, 868, 869, 884], "time_unit": [31, 32, 64, 341, 723], "u": [31, 32, 64, 312, 316, 336, 341, 461, 505, 519, 690, 694, 718, 723], "time_zon": [31, 64], "m": [31, 32, 64, 165, 239, 312, 316, 336, 341, 461, 499, 505, 690, 694, 717, 718, 723, 847], "unit": [31, 32, 64, 110, 111, 126, 239, 312, 316, 336, 341, 383, 390, 478, 505, 535, 583, 616, 690, 694, 718, 723, 728, 884], "timezon": [31, 64, 461, 847], "zoneinfo": 31, "run": [31, 61, 117, 154, 212, 239, 252, 269, 307, 519, 520, 535, 550, 558, 583, 592, 593, 610, 616, 644, 683, 884, 890], "available_timezon": 31, "full": [31, 60, 88, 89, 90, 99, 100], "attribut": [31, 32, 39, 108, 239, 528, 529, 531, 536, 539, 540, 541, 616, 876, 878, 880, 887, 888, 889], "delta": [32, 90, 100, 516, 521, 544, 822, 873, 884], "32": [33, 36, 49, 56, 105, 140, 150, 239, 427, 535, 566, 616, 686, 712, 781, 797, 884], "bit": [33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 407, 439, 535, 788, 825, 884], "float": [33, 34, 39, 63, 101, 106, 107, 108, 110, 111, 126, 129, 153, 170, 178, 183, 223, 239, 267, 295, 296, 297, 298, 310, 311, 333, 344, 345, 346, 347, 351, 352, 357, 362, 363, 365, 368, 369, 371, 372, 373, 381, 386, 393, 396, 397, 401, 404, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 426, 487, 488, 496, 511, 512, 513, 514, 517, 519, 522, 524, 526, 535, 559, 571, 584, 591, 592, 616, 642, 667, 670, 673, 674, 675, 686, 715, 727, 728, 729, 730, 731, 734, 735, 739, 752, 764, 767, 769, 770, 771, 772, 777, 778, 784, 785, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 806, 807, 818, 822, 855, 873, 884], "point": [33, 34, 100, 110, 111, 129, 139, 154, 178, 239, 295, 310, 311, 333, 352, 357, 369, 371, 421, 422, 535, 559, 565, 575, 616, 670, 715, 735, 739, 752, 802, 803, 884], "16": [35, 48, 56, 105, 139, 140, 207, 208, 239, 362, 413, 499, 500, 535, 565, 566, 592, 604, 605, 616, 714, 719, 781, 816, 859, 884], "sign": [35, 36, 37, 38, 329, 407, 464, 535, 711, 788, 850, 884], "integ": [35, 36, 37, 38, 48, 49, 50, 51, 109, 110, 139, 140, 239, 295, 333, 357, 407, 412, 413, 414, 415, 416, 417, 418, 419, 420, 485, 505, 509, 535, 565, 566, 616, 632, 633, 670, 715, 739, 788, 798, 807, 884], "inner": [39, 45, 152, 239, 273, 309, 535, 570, 608, 616, 648, 686, 884], "union": [39, 46, 54, 61, 62, 78, 84, 122, 124, 127, 138, 156, 157, 159, 161, 163, 165, 172, 180, 186, 188, 199, 201, 203, 208, 210, 239, 348, 367, 482, 483, 485, 486, 488, 489, 490, 491, 495, 496, 501, 505, 510, 511, 514, 518, 520, 523, 524, 535, 550, 557, 558, 564, 583, 589, 592, 595, 605, 609, 616, 686, 753, 807, 884], "datatypeclass": [39, 46, 84, 485, 489], "timedelta": [39, 64, 139, 140, 203, 239, 314, 316, 317, 324, 326, 329, 330, 331, 332, 333, 336, 337, 339, 340, 343, 412, 413, 414, 415, 416, 418, 419, 420, 488, 535, 565, 566, 616, 698, 700, 705, 711, 714, 719, 769, 772, 777, 778, 884], "tupl": [39, 98, 117, 151, 176, 177, 181, 239, 363, 409, 535, 583, 592, 616, 790, 884], "nest": [39, 45, 126, 239, 544, 728, 884], "arrai": [39, 77, 80, 88, 89, 126, 191, 195, 239, 266, 275, 276, 277, 278, 279, 282, 283, 290, 296, 297, 298, 302, 303, 304, 305, 306, 382, 412, 413, 415, 418, 419, 420, 424, 440, 442, 444, 445, 446, 490, 500, 535, 641, 650, 651, 652, 653, 654, 657, 658, 664, 673, 674, 675, 679, 680, 681, 682, 686, 728, 768, 793, 794, 796, 799, 800, 801, 808, 813, 826, 828, 830, 831, 832, 862, 866, 874, 884], "within": [39, 106, 107, 153, 239, 571, 616], "wrap": [41, 100], "arbitrari": [41, 110], "python": [41, 64, 88, 89, 105, 117, 177, 212, 239, 252, 384, 484, 535, 610, 625, 698, 699, 700, 705, 865, 884], "queri": [42, 61, 92, 98, 99, 102, 103, 104, 128, 154, 167, 239, 285, 446, 550, 552, 553, 558, 567, 574, 583, 592, 607, 610, 616, 624, 832, 884, 890], "pars": [42, 88, 89, 91, 99, 102, 103, 461, 505, 847], "given": [42, 44, 54, 63, 86, 88, 89, 99, 108, 109, 110, 111, 114, 117, 126, 167, 176, 182, 183, 239, 267, 280, 336, 344, 351, 381, 405, 408, 409, 412, 413, 415, 418, 419, 420, 425, 426, 445, 461, 475, 482, 535, 582, 590, 591, 616, 625, 642, 655, 718, 727, 728, 734, 767, 779, 786, 790, 793, 794, 796, 799, 800, 801, 810, 811, 831, 847, 869, 875, 884], "transform": [42, 117, 239, 384, 462, 463, 535], "lf": [44, 556, 561, 588, 603, 616], "under": [44, 55, 56, 57, 58, 528, 529, 531, 536, 539, 540, 541, 876, 878, 880, 887, 888, 889], "add": [44, 117, 128, 139, 208, 209, 239, 402, 467, 499, 527, 535, 565, 570, 604, 605, 606, 607, 616, 624, 884], "context": [45, 163, 239, 247, 252, 269, 354, 389, 434, 435, 479, 484, 492, 502, 505, 520, 534, 535, 606, 616, 644], "manag": 45, "categor": [45, 83, 113, 152, 239, 294, 474, 535, 668, 669, 868, 884], "temporarili": [45, 139, 140, 239, 565, 566, 616], "cach": [45, 61, 92, 99, 102, 104, 113, 412, 413, 414, 415, 416, 418, 419, 420, 461, 535, 550, 558, 583, 592, 616, 847], "categori": [45, 63, 113, 294, 669], "until": [45, 154, 239], "finish": [45, 66, 128, 239, 624, 884], "global": [45, 110, 113], "invalid": [45, 88, 89, 99, 446, 832], "outermost": 45, "exit": 45, "df1": [45, 54, 62, 106, 128, 134, 205, 239], "color": [45, 212, 610], "red": [45, 212, 610], "green": [45, 212, 610], "blue": 45, "orang": [45, 120, 213, 214, 216, 217, 218, 220, 223, 224, 239], "uint8": [45, 108, 305, 306, 468, 535, 681, 682, 855, 884], "df2": [45, 54, 62, 106, 128, 134, 205, 239], "yellow": 45, "black": [45, 117, 239], "join": [45, 54, 61, 153, 239, 362, 399, 535, 550, 558, 571, 583, 592, 606, 616], "succe": [45, 88, 89, 99], "df_join": 45, "how": [45, 62, 79, 82, 98, 124, 152, 202, 239, 268, 294, 308, 362, 408, 535, 555, 570, 616, 643, 669, 685, 884], "cat": [45, 63, 439, 462, 463, 474, 491, 531, 535, 825, 880], "u8": [45, 83, 194, 239, 863, 884], "sequenc": [46, 54, 61, 62, 78, 79, 80, 82, 85, 109, 110, 111, 122, 124, 127, 128, 138, 139, 140, 152, 153, 159, 163, 165, 167, 168, 180, 186, 194, 199, 200, 201, 202, 203, 208, 210, 239, 348, 367, 384, 482, 483, 484, 486, 488, 489, 490, 491, 494, 495, 496, 501, 503, 505, 510, 511, 514, 518, 520, 523, 524, 535, 557, 564, 565, 566, 570, 571, 582, 589, 595, 605, 609, 616, 624, 686, 753, 807, 884], "composit": 46, "make": [46, 62, 77, 81, 88, 89, 92, 96, 98, 102, 104, 138, 139, 140, 160, 163, 171, 203, 239, 338, 346, 347, 408, 457, 464, 535, 564, 565, 566, 580, 616, 720, 730, 731, 843, 850, 884], "up": [46, 98, 153, 239, 295, 464, 535, 570, 571, 575, 616, 670, 850, 884], "dai": [47, 64, 139, 140, 153, 203, 239, 316, 326, 329, 330, 331, 332, 336, 337, 339, 340, 343, 412, 413, 414, 415, 416, 418, 419, 420, 497, 498, 499, 535, 565, 566, 571, 616, 711, 712, 714, 719, 722], "unsign": [48, 49, 50, 51, 407, 535, 788, 884], "could": [52, 66, 124, 139, 239, 293, 494, 503, 535, 555, 565, 616, 667, 884], "determin": [52, 54, 62, 79, 82, 88, 89, 91, 96, 104, 117, 133, 139, 140, 151, 199, 203, 239, 285, 294, 389, 408, 412, 413, 414, 415, 416, 418, 419, 420, 432, 486, 535, 565, 566, 616, 660, 669, 818, 884], "static": [52, 610], "utf": 53, "intern": [54, 59, 64, 91, 151, 176, 192, 239, 485, 496, 505, 511, 514, 519, 523, 524, 638, 668, 689, 823], "revers": [54, 126, 186, 239, 261, 263, 282, 302, 303, 304, 305, 306, 385, 402, 405, 424, 434, 435, 467, 475, 486, 535, 595, 616, 634, 637, 657, 679, 680, 681, 682, 760, 786, 808, 820, 869, 884], "uniqu": [54, 108, 109, 111, 149, 163, 221, 239, 262, 366, 374, 395, 461, 477, 479, 515, 535, 616, 636, 684, 751, 761, 775, 847, 871, 872, 884], "kei": [54, 60, 139, 153, 160, 165, 168, 172, 175, 222, 239, 565, 571, 580, 586, 587, 616], "contain": [54, 60, 78, 81, 90, 100, 163, 168, 239, 367, 440, 443, 444, 445, 446, 458, 459, 535, 583, 616, 774, 826, 829, 830, 831, 832, 844, 845, 862, 884], "have": [54, 88, 89, 91, 106, 110, 111, 113, 128, 171, 222, 239, 307, 345, 346, 347, 390, 405, 535, 592, 607, 616, 624, 683, 691, 729, 730, 731, 741, 786, 884], "inject": 54, "fill": [54, 62, 86, 114, 129, 130, 183, 202, 239, 287, 351, 352, 353, 358, 362, 412, 413, 415, 418, 419, 420, 426, 448, 453, 464, 504, 535, 559, 560, 591, 606, 616, 734, 735, 736, 779, 793, 794, 796, 799, 800, 801, 811, 834, 839, 850, 884], "non": [54, 159, 239, 400, 411, 412, 413, 414, 415, 416, 418, 419, 420, 440, 445, 488, 491, 535, 579, 616, 781, 792, 793, 794, 795, 796, 797, 799, 800, 801, 826, 831, 866, 884], "each": [54, 103, 106, 107, 109, 117, 137, 153, 212, 213, 215, 225, 239, 252, 272, 284, 332, 337, 356, 405, 445, 457, 458, 484, 535, 571, 583, 610, 611, 612, 616, 647, 659, 671, 714, 719, 786, 831, 843, 844, 884], "sort": [54, 55, 138, 139, 140, 153, 160, 165, 167, 168, 203, 210, 215, 225, 239, 261, 263, 294, 354, 424, 435, 479, 481, 486, 535, 553, 565, 566, 571, 580, 582, 583, 592, 611, 612, 616, 634, 637, 669, 760, 808, 870, 872, 884], "origin": [54, 88, 89, 200, 239, 375, 407, 440, 444, 445, 446, 448, 453, 464, 535, 600, 616, 826, 830, 831, 832, 834, 839, 850], "order": [54, 106, 138, 139, 140, 165, 167, 168, 178, 200, 203, 239, 261, 263, 294, 405, 422, 423, 424, 434, 435, 466, 476, 477, 486, 535, 564, 565, 566, 593, 595, 600, 616, 634, 637, 669, 760, 786, 791, 803, 804, 808, 853, 870, 871, 884], "unless": [54, 78, 874, 884], "case": [54, 104, 117, 128, 139, 140, 151, 239, 384, 389, 390, 527, 535, 565, 566, 616, 624, 884], "final": [54, 104, 558, 616], "doe": [54, 73, 80, 82, 88, 89, 90, 91, 99, 100, 101, 106, 107, 128, 176, 177, 239, 338, 341, 466, 477, 502, 535, 558, 564, 575, 616, 624, 720, 723, 741, 813, 874, 884], "receiv": [54, 117, 167, 239, 582, 616], "now": [54, 140, 239, 566, 616], "ha": [54, 100, 203, 239, 242, 252, 307, 375, 390, 475, 484, 535, 548, 610, 616, 672, 683, 741, 752, 869, 884], "whose": [54, 153, 168, 239, 348, 501, 535, 571, 616], "post": 54, "constrain": 54, "newli": 54, "descend": [54, 186, 239, 261, 263, 424, 535, 595, 616, 634, 637, 760, 808, 884], "singl": [54, 62, 88, 89, 98, 99, 109, 124, 128, 135, 176, 186, 210, 239, 329, 354, 384, 406, 409, 438, 481, 484, 489, 510, 519, 535, 555, 595, 609, 616, 624, 711, 787, 790, 824, 862, 884], "boolean": [54, 59, 131, 133, 137, 208, 239, 249, 250, 267, 288, 354, 363, 365, 366, 367, 368, 369, 370, 371, 372, 373, 481, 535, 561, 605, 616, 622, 623, 635, 642, 662, 737, 746, 748, 750, 751, 753, 754, 755, 756, 757, 758, 761, 782, 783, 806, 825, 875, 884], "associ": 54, "2022": [54, 64, 105, 121, 137, 239, 461, 499, 505, 697, 847], "x": [54, 88, 89, 98, 99, 109, 110, 126, 144, 147, 149, 152, 159, 239, 252, 266, 273, 359, 384, 408, 429, 432, 457, 474, 496, 524, 535, 570, 575, 579, 594, 616, 621, 625, 736, 762, 815, 818, 843, 868, 884], "y": [54, 109, 110, 126, 147, 149, 152, 159, 239, 266, 273, 408, 461, 496, 524, 535, 570, 579, 594, 616, 621, 717, 847, 884], "12": [54, 63, 64, 139, 140, 153, 203, 239, 305, 317, 326, 331, 332, 337, 343, 400, 427, 497, 498, 535, 565, 566, 567, 571, 574, 592, 598, 616, 625, 708, 714, 719, 802, 884], "df3": [54, 239], "set_tbl_format": 54, "09": [54, 140, 239, 566, 616, 692], "01": [54, 64, 121, 137, 139, 140, 203, 239, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 461, 499, 565, 566, 616, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 847], "02": [54, 64, 137, 139, 140, 203, 239, 312, 316, 317, 318, 324, 325, 326, 333, 334, 336, 339, 341, 421, 499, 535, 565, 566, 616, 690, 694, 695, 696, 698, 699, 700, 701, 703, 705, 706, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723], "03": [54, 64, 139, 140, 203, 239, 312, 315, 316, 318, 325, 326, 332, 333, 334, 336, 337, 339, 341, 342, 565, 566, 616, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 705, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724], "af1": 54, "af2": 54, "af3": 54, "keep": [54, 88, 89, 99, 165, 200, 203, 239, 375, 488, 535, 600, 616], "easili": 54, "calcul": [54, 139, 239, 268, 308, 345, 346, 347, 376, 383, 417, 432, 478, 535, 565, 616, 643, 685, 729, 730, 731, 764, 798, 818, 822, 873, 884], "wise": [54, 124, 133, 239, 253, 254, 255, 256, 257, 258, 299, 300, 349, 382, 429, 430, 431, 472, 473, 494, 495, 503, 518, 535, 555, 616, 626, 627, 628, 629, 630, 631, 677, 678, 732, 768, 815, 816, 817, 859, 860, 884], "dot": [54, 535, 592, 616, 884], "product": [54, 166, 239, 305, 309, 535, 681, 686, 884], "fill_nul": [54, 129, 239, 461, 535, 559, 606, 616, 847, 884], "sum": [54, 126, 133, 138, 140, 150, 168, 210, 239, 252, 285, 305, 306, 344, 354, 399, 412, 413, 415, 418, 419, 420, 481, 482, 494, 496, 503, 514, 535, 550, 553, 558, 564, 566, 583, 592, 616, 681, 682, 727, 728, 793, 794, 796, 799, 800, 801, 884], "167": 54, "47": 54, "callabl": [55, 56, 57, 58, 99, 117, 133, 167, 212, 239, 252, 285, 384, 385, 411, 484, 494, 495, 503, 510, 518, 535, 575, 582, 610, 616, 625, 660, 792, 884], "decor": [55, 56, 57, 58, 110, 111], "access": [55, 56, 57, 58, 151, 176, 177, 239, 606, 616], "by_first_letter_of_column_nam": 55, "f": [55, 100, 117, 121, 124, 137, 155, 191, 199, 202, 212, 239, 252, 285, 384, 385, 427, 461, 484, 490, 494, 495, 503, 510, 518, 535, 555, 575, 605, 610, 616, 660, 847], "fromkei": [55, 57], "by_first_letter_of_column_valu": 55, "starts_with": [55, 439, 443, 829], "slice": [55, 61, 126, 239, 272, 284, 411, 412, 413, 414, 415, 416, 418, 419, 420, 535, 550, 558, 575, 583, 592, 593, 616, 647, 659, 728, 792, 793, 794, 795, 796, 797, 799, 800, 801, 884], "to_seri": [55, 59, 239, 285, 660], "xx": [55, 57], "xy": [55, 57], "yy": [55, 57], "yz": [55, 57], "a1": [55, 57], "a2": [55, 57], "b1": [55, 57], "b2": [55, 57], "pow_n": 56, "powersofn": 56, "next": [56, 287, 405, 535, 786, 884], "p": 56, "ceil": [56, 535, 884], "previou": [56, 400, 535, 781, 884], "floor": [56, 535, 884], "nearest": [56, 153, 170, 223, 239, 295, 357, 404, 416, 517, 535, 571, 584, 616, 670, 739, 785, 797, 884], "round": [56, 295, 357, 472, 535, 670, 739, 884], "24": [56, 117, 126, 140, 239, 305, 307, 318, 535, 566, 616, 683, 696, 884], "55": 56, "001": [56, 321, 323, 328, 499, 702, 704, 710], "next_pow2": 56, "prev_pow2": 56, "nearest_pow2": 56, "128": [56, 781, 884], "split_by_column_dtyp": 57, "dtype": [57, 79, 86, 88, 89, 99, 108, 109, 110, 111, 114, 139, 140, 153, 196, 239, 252, 253, 254, 255, 256, 257, 258, 261, 263, 264, 265, 266, 273, 293, 296, 297, 298, 299, 300, 305, 306, 315, 318, 321, 323, 325, 328, 334, 341, 348, 350, 356, 383, 384, 407, 408, 412, 413, 414, 415, 416, 418, 419, 420, 427, 430, 431, 438, 455, 468, 470, 472, 473, 474, 478, 479, 484, 485, 489, 490, 492, 501, 505, 509, 510, 523, 535, 565, 566, 571, 616, 639, 640, 641, 648, 667, 672, 673, 674, 675, 681, 682, 693, 696, 702, 704, 707, 710, 716, 723, 728, 733, 749, 791, 805, 812, 824, 841, 847, 855, 866, 867, 868, 884], "collect": [57, 61, 100, 101, 154, 191, 239, 252, 399, 485, 490, 505, 519, 523, 535, 554, 555, 557, 558, 559, 560, 561, 562, 564, 565, 567, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 581, 582, 584, 586, 587, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 602, 604, 605, 606, 607, 610, 616], "i16": [57, 427, 535], "i32": [57, 79, 110, 180, 239, 293, 343, 427, 527, 535, 589, 616, 697, 725], "f32": [57, 239, 269, 405, 427, 500, 535, 644, 786, 884], "31": [58, 105, 314, 315, 326, 339, 461, 497, 498, 505, 692, 693, 847], "42": [58, 140, 141, 239, 566, 616, 742, 884], "25": [58, 64, 139, 140, 153, 203, 207, 208, 239, 332, 337, 343, 505, 565, 566, 571, 577, 602, 604, 605, 616, 714, 719, 727, 781, 884], "961": 58, "1764": 58, "4160": 58, "27": [58, 224, 331, 343, 401, 535], "125": [58, 781, 884], "condit": [59, 124, 131, 176, 239, 443, 459, 555, 561, 616], "eager": [59, 139, 202, 239, 485, 505, 509, 519, 523, 534, 544, 565, 616], "indic": [59, 83, 87, 88, 89, 92, 96, 99, 108, 109, 111, 139, 140, 239, 365, 368, 369, 371, 372, 373, 412, 413, 414, 415, 416, 418, 419, 420, 423, 429, 470, 535, 565, 566, 616, 750, 754, 755, 756, 757, 758, 804, 815, 857, 884], "where": [59, 98, 124, 128, 151, 159, 177, 207, 239, 340, 344, 423, 432, 521, 527, 535, 579, 616, 624, 635, 722, 727, 804, 818, 822, 873, 875, 884], "evalu": [59, 129, 131, 153, 208, 239, 307, 361, 363, 367, 483, 485, 500, 523, 535, 561, 568, 570, 571, 604, 605, 616, 635, 683, 875, 884], "eagerli": [59, 519], "oppos": 59, "lazili": [59, 88, 89, 99, 100, 102, 103, 104], "u32": [59, 139, 164, 209, 213, 221, 224, 239, 247, 259, 260, 261, 262, 263, 264, 265, 275, 301, 302, 314, 317, 324, 326, 330, 331, 333, 339, 340, 378, 395, 398, 405, 423, 440, 447, 450, 474, 477, 492, 515, 535, 565, 607, 616, 634, 635, 636, 650, 667, 692, 695, 701, 703, 706, 708, 709, 712, 713, 715, 721, 722, 786, 826, 833, 836, 868, 871, 872, 884], "build": 60, "wa": 60, "compil": [60, 264, 265, 639, 640], "gate": 60, "info": [60, 90, 100, 105], "otherwis": [60, 160, 180, 239, 296, 297, 298, 345, 346, 347, 407, 527, 535, 580, 589, 616, 625, 673, 674, 675, 729, 730, 731, 788, 806, 807, 884], "version": [60, 90, 100, 105, 222, 242, 518], "follow": [60, 88, 89, 90, 99, 100, 117, 139, 140, 153, 167, 203, 239, 252, 329, 332, 337, 356, 405, 412, 413, 414, 415, 416, 418, 419, 420, 484, 528, 529, 531, 535, 536, 539, 540, 541, 564, 565, 566, 571, 582, 616, 711, 714, 719, 786, 806, 807, 876, 878, 880, 884, 887, 888, 889, 891], "depend": [60, 105, 252, 264, 265, 389, 405, 484, 502, 505, 535, 639, 640, 786, 884], "host": [60, 88, 92, 96, 102, 104], "git": 60, "lazy_fram": 61, "type_coercion": [61, 550, 552, 558, 583, 592, 593, 616], "predicate_pushdown": [61, 550, 552, 558, 575, 583, 592, 593, 616], "projection_pushdown": [61, 550, 552, 558, 575, 583, 592, 593, 616], "simplify_express": [61, 550, 552, 558, 583, 592, 593, 616], "string_cach": 61, "no_optim": [61, 550, 558, 575, 583, 593, 616], "slice_pushdown": [61, 550, 552, 558, 575, 583, 592, 593, 616], "common_subplan_elimin": [61, 550, 552, 558, 583, 592, 616], "multipl": [61, 62, 88, 89, 99, 102, 104, 109, 111, 126, 128, 131, 139, 144, 165, 168, 186, 208, 210, 239, 348, 390, 394, 409, 412, 413, 414, 415, 416, 418, 419, 420, 435, 486, 494, 495, 501, 503, 510, 518, 527, 535, 554, 561, 565, 595, 605, 609, 616, 624, 728, 773, 790, 884], "graph": [61, 154, 239, 568, 606, 616], "parallel": [61, 62, 85, 96, 98, 104, 139, 153, 154, 167, 239, 269, 307, 535, 544, 565, 570, 571, 616, 644, 683, 884], "threadpool": 61, "coercion": [61, 408, 535, 550, 558, 583, 592, 593, 616], "optim": [61, 96, 99, 102, 103, 104, 151, 154, 167, 171, 177, 239, 550, 552, 553, 558, 575, 583, 592, 593, 607, 616], "predic": [61, 99, 101, 102, 103, 104, 131, 176, 239, 354, 481, 527, 535, 550, 558, 561, 575, 583, 592, 593, 607, 616, 737, 806, 807, 884], "pushdown": [61, 550, 558, 575, 583, 592, 593, 607, 616, 806, 807, 884], "project": [61, 99, 100, 102, 103, 104, 252, 434, 435, 535, 550, 558, 575, 583, 592, 593, 608, 616], "simplifi": [61, 550, 558, 583, 592, 593, 616], "turn": [61, 88, 89, 99, 113, 356, 479, 535, 550, 558, 575, 583, 593, 616], "off": [61, 88, 89, 99, 113, 479, 535, 550, 558, 575, 583, 593, 616], "Will": [61, 199, 239, 511, 514, 550, 558, 583, 592, 616, 884], "try": [61, 74, 75, 88, 89, 91, 92, 96, 99, 102, 104, 550, 558, 583, 592, 616], "branch": [61, 550, 558, 583, 592, 616], "subplan": [61, 550, 558, 583, 592, 616], "occur": [61, 394, 405, 535, 550, 558, 583, 592, 616, 773, 786, 884], "part": [61, 77, 457, 458, 550, 558, 583, 592, 606, 616, 692, 695, 701, 703, 706, 708, 709, 715, 725, 843, 844], "fashion": [61, 152, 239, 550, 558, 583, 592, 616], "alpha": [61, 345, 346, 347, 535, 550, 558, 583, 592, 616, 729, 730, 731, 884], "item": [62, 178, 239, 267, 271, 273, 350, 356, 422, 458, 535, 642, 646, 648, 733, 803, 844, 884], "rechunk": [62, 77, 81, 88, 89, 92, 96, 99, 102, 103, 104, 128, 239, 535, 624, 671, 774, 884], "concatmethod": 62, "vertic": [62, 128, 202, 205, 239, 438, 511, 824], "aggreg": [62, 88, 89, 133, 138, 139, 156, 157, 158, 161, 163, 168, 169, 170, 187, 188, 202, 204, 210, 211, 214, 216, 222, 239, 247, 354, 380, 384, 399, 411, 412, 413, 414, 415, 416, 418, 419, 420, 479, 494, 495, 496, 503, 508, 511, 514, 518, 524, 535, 565, 575, 576, 577, 578, 581, 584, 596, 597, 602, 609, 616, 792, 793, 794, 796, 799, 800, 801, 884], "concaten": [62, 133, 239, 671, 774, 884], "sure": [62, 77, 81, 88, 89, 92, 98, 138, 171, 239, 485, 564, 616], "contigu": [62, 77, 81, 88, 89, 92, 99, 102, 103, 104, 171, 239], "diagon": [62, 199, 239], "strategi": [62, 88, 108, 109, 110, 111, 130, 139, 152, 153, 162, 239, 285, 353, 535, 560, 565, 570, 571, 616, 660, 736, 884], "vstack": [62, 128, 239], "find": [62, 132, 239, 423, 486, 535, 804, 884], "schema": [62, 74, 79, 88, 89, 93, 97, 99, 103, 110, 117, 118, 119, 125, 160, 239, 285, 389, 548, 549, 556, 575, 580, 608, 610, 616, 676, 884], "miss": [62, 129, 239, 287, 358, 362, 369, 371, 521, 535, 559, 616, 874, 884], "stack": [62, 144, 205, 239], "length": [62, 63, 86, 103, 109, 114, 139, 140, 185, 239, 281, 307, 332, 337, 390, 411, 412, 413, 414, 415, 416, 418, 419, 420, 433, 448, 450, 453, 455, 464, 485, 535, 565, 566, 583, 594, 616, 656, 671, 683, 714, 719, 765, 779, 792, 793, 794, 795, 796, 797, 799, 800, 801, 819, 834, 836, 839, 841, 850, 884], "don": [62, 202, 239, 269, 307, 484, 535, 644, 683, 805, 874, 884], "t": [62, 91, 99, 117, 202, 239, 269, 307, 344, 345, 346, 347, 449, 454, 460, 461, 484, 527, 535, 644, 683, 727, 729, 730, 731, 805, 835, 840, 846, 847, 874, 884], "match": [62, 73, 78, 80, 82, 106, 107, 130, 153, 176, 239, 439, 440, 443, 445, 446, 449, 451, 452, 454, 459, 460, 461, 560, 571, 616, 825, 826, 829, 831, 832, 835, 837, 838, 840, 845, 846, 847], "relev": 62, "execut": [62, 154, 239, 269, 547, 583, 616, 644], "df_h1": 62, "l1": 62, "l2": 62, "df_h2": 62, "r1": 62, "r2": 62, "r3": 62, "df_d1": 62, "df_d2": 62, "bin": [63, 529, 878], "label": [63, 78, 80, 82, 239, 411, 412, 413, 414, 415, 416, 418, 419, 420, 535, 583, 616, 792, 793, 794, 795, 796, 797, 799, 800, 801, 884], "break_point_label": 63, "break_point": 63, "category_label": 63, "discret": [63, 268, 308, 344, 535, 643, 685, 727, 884], "creat": [63, 64, 77, 80, 82, 100, 109, 110, 111, 118, 119, 139, 140, 164, 168, 203, 239, 332, 337, 406, 455, 479, 485, 490, 497, 498, 499, 535, 548, 549, 552, 553, 565, 566, 616, 672, 676, 688, 714, 719, 779, 787, 841, 866, 884], "assign": [63, 109, 139, 239, 405, 457, 458, 535, 565, 616, 786, 843, 844, 884], "must": [63, 78, 80, 82, 90, 100, 106, 139, 140, 153, 160, 176, 239, 285, 348, 384, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 571, 575, 580, 616, 884], "len": [63, 109, 110, 302, 409, 448, 453, 464, 535, 790, 834, 839, 850, 884], "breakpoint": 63, "experiment": [63, 101, 202, 208, 239, 307, 332, 412, 413, 414, 415, 416, 418, 419, 420, 535, 605, 616, 683, 714, 884], "being": [63, 88, 89, 99, 101, 202, 239, 307, 332, 412, 413, 414, 415, 416, 418, 419, 420, 500, 527, 535, 683, 714, 884], "consid": [63, 101, 134, 159, 202, 208, 210, 222, 239, 296, 297, 298, 307, 332, 412, 413, 414, 415, 416, 418, 419, 420, 434, 494, 503, 535, 567, 574, 579, 605, 616, 673, 674, 675, 683, 714, 805, 806, 807, 884], "break": [63, 101, 202, 239, 307, 332, 412, 413, 414, 415, 416, 418, 419, 420, 535, 683, 714, 884], "30": [63, 128, 139, 144, 167, 173, 174, 192, 208, 239, 259, 260, 261, 263, 308, 315, 331, 332, 337, 343, 359, 427, 535, 565, 582, 605, 616, 693, 714, 719], "inf": [63, 110, 111, 258, 365, 368, 535, 631, 750, 754, 781, 884], "low": [64, 139, 239, 333, 485, 565, 616], "high": [64, 139, 239, 333, 485, 565, 616], "interv": [64, 139, 140, 203, 239, 332, 333, 337, 363, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 616, 692, 694, 695, 701, 703, 706, 708, 709, 712, 713, 714, 715, 717, 718, 719, 721, 722, 725], "close": [64, 139, 140, 239, 363, 412, 413, 414, 415, 416, 418, 419, 420, 432, 535, 565, 566, 616, 818, 884], "closedwindow": [64, 139, 140, 239, 363, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 616], "lower": [64, 99, 139, 170, 223, 239, 363, 383, 404, 407, 416, 485, 517, 535, 558, 565, 584, 616, 785, 788, 797, 884], "bound": [64, 88, 89, 126, 139, 239, 271, 363, 383, 478, 485, 535, 565, 616, 646, 728, 884], "upper": [64, 88, 89, 126, 139, 239, 363, 478, 485, 535, 565, 616, 728, 884], "period": [64, 139, 140, 182, 183, 239, 280, 332, 337, 345, 346, 347, 400, 425, 426, 535, 565, 566, 590, 591, 616, 655, 714, 719, 729, 730, 731, 781, 810, 811, 884], "It": [64, 117, 160, 167, 212, 239, 252, 285, 338, 389, 535, 575, 580, 610, 616, 720, 806, 807, 884], "like": [64, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 152, 222, 239, 269, 392, 405, 535, 558, 585, 616, 644, 786, 884], "durat": [64, 153, 203, 239, 315, 318, 321, 323, 325, 328, 334, 341, 474, 535, 571, 616, 693, 696, 702, 704, 707, 710, 716, 723, 868, 884], "3d12h4m25": [64, 139, 140, 153, 203, 239, 332, 337, 565, 566, 571, 616, 714, 719], "hour": [64, 139, 140, 153, 203, 239, 329, 332, 337, 412, 413, 414, 415, 416, 418, 419, 420, 498, 499, 535, 565, 566, 571, 616, 711, 714, 719], "minut": [64, 139, 140, 153, 203, 239, 329, 332, 337, 412, 413, 414, 415, 416, 418, 419, 420, 498, 499, 535, 565, 566, 571, 616, 711, 714, 719], "tempor": [64, 139, 140, 239, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 616], "window": [64, 139, 140, 239, 307, 332, 337, 345, 346, 347, 399, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 490, 535, 565, 566, 616, 683, 714, 719, 729, 730, 731, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 884], "granular": 64, "finer": 64, "than": [64, 76, 80, 82, 88, 89, 101, 110, 111, 117, 138, 151, 153, 176, 177, 178, 202, 212, 239, 252, 375, 422, 432, 434, 448, 453, 458, 464, 511, 514, 521, 524, 535, 564, 571, 593, 610, 616, 803, 818, 834, 839, 844, 850, 884], "1d": [64, 139, 140, 153, 203, 239, 312, 318, 325, 329, 332, 337, 341, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 571, 616, 690, 694, 696, 698, 699, 700, 705, 707, 711, 714, 717, 718, 719, 722, 723], "also": [64, 110, 111, 125, 138, 139, 140, 160, 163, 186, 239, 313, 348, 362, 405, 412, 413, 414, 415, 416, 418, 419, 420, 494, 495, 503, 505, 518, 534, 535, 565, 566, 580, 595, 606, 616, 691, 786, 884], "permut": 64, "1mo": [64, 139, 140, 153, 203, 239, 315, 329, 332, 337, 342, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 571, 616, 691, 693, 708, 711, 712, 713, 714, 719, 721, 724], "dtrang": 64, "1985": 64, "00": [64, 139, 153, 203, 239, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 461, 499, 565, 571, 616, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 847], "04": [64, 101, 139, 203, 239, 314, 315, 318, 324, 325, 326, 330, 332, 333, 334, 339, 340, 341, 342, 461, 499, 565, 616, 691, 693, 696, 701, 703, 706, 707, 708, 709, 713, 715, 716, 717, 721, 722, 723, 724, 847], "05": [64, 101, 106, 107, 153, 203, 239, 315, 333, 342, 571, 616, 691, 692, 693, 714, 719, 722, 724], "07": [64, 314, 330, 332, 337, 340, 461, 505, 692, 722, 847], "08": [64, 106, 107, 140, 239, 332, 461, 499, 566, 616, 714, 719, 847], "zone": [64, 313, 338, 342, 691, 720, 724], "america": [64, 691], "new_york": [64, 691], "\u03bc": [64, 139, 140, 153, 203, 239, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 505, 565, 566, 571, 616, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725], "est": [64, 691], "encount": [65, 139, 239, 396, 397, 446, 494, 503, 521, 535, 565, 616, 777, 778, 832, 884], "error": [65, 88, 89, 99, 176, 239, 273, 293, 375, 446, 461, 535, 610, 648, 667, 832, 847, 884], "duplic": [67, 147, 152, 153, 200, 239, 364, 486, 535, 570, 571, 600, 616, 748, 884], "certain": [68, 145, 203, 239, 348, 501, 535, 550, 583, 593, 616, 884], "structur": [69, 74, 75, 128, 167, 239, 582, 616, 624, 884], "least": [70, 110, 400, 479, 535, 781, 872, 884], "expect": [70, 73, 76, 252, 484, 535, 573, 575, 616], "unexpect": [72, 239], "caus": [72, 88, 89, 99, 128, 239, 624, 884], "panic": 72, "combin": [74, 75, 139, 140, 141, 153, 203, 210, 239, 449, 454, 460, 565, 566, 571, 592, 616, 835, 840, 846], "mismatch": 74, "incompat": 75, "lib": [77, 862, 884], "chunkedarrai": [77, 162, 239, 686, 884], "zero": [77, 87, 88, 89, 92, 96, 130, 151, 176, 191, 239, 352, 353, 423, 432, 464, 535, 560, 616, 736, 818, 850, 862, 866, 884], "copi": [77, 118, 119, 191, 239, 464, 548, 549, 616, 621, 672, 676, 688, 850, 862, 866, 884], "most": [77, 390, 394, 400, 458, 479, 535, 773, 781, 844, 872, 884], "closest": 77, "construct": [77, 78, 79, 80, 81, 82, 239, 563, 585, 616, 884], "pa": [77, 100, 101, 239], "map": [78, 79, 88, 89, 92, 93, 96, 97, 99, 102, 117, 125, 172, 192, 239, 332, 337, 385, 479, 484, 535, 556, 586, 616, 714, 719], "clone": [78, 79, 80, 81, 82, 118, 195, 196, 239, 548, 616, 672, 865, 866, 874, 884], "two": [78, 80, 82, 98, 133, 159, 160, 168, 198, 210, 211, 212, 222, 239, 247, 309, 434, 435, 470, 482, 493, 516, 521, 523, 535, 579, 580, 610, 616, 686, 884], "dimension": [78, 80, 82, 239, 884], "alreadi": [78, 239, 269, 307, 535, 644, 683, 884], "present": [78, 110, 239, 367, 535, 874, 884], "dimens": [78, 80, 82, 239, 409, 535, 790, 884], "infer_schema_length": [79, 82, 88, 89, 91, 99, 103], "50": [79, 82, 128, 239, 296, 297, 298, 332, 337, 535, 673, 719, 884], "mani": [79, 82, 98, 128, 239, 624, 884], "scan": [79, 82, 88, 89, 96, 99, 100, 101, 102, 103, 104, 558, 567, 574, 616], "slow": [79, 82, 88, 89, 99, 193, 239, 307, 535, 683, 884], "partial": 79, "overwrit": [79, 88, 89, 99, 208, 239, 558, 604, 605, 616], "first": [79, 88, 89, 91, 99, 103, 117, 137, 139, 142, 153, 155, 162, 167, 168, 199, 200, 203, 215, 222, 239, 261, 262, 263, 269, 271, 272, 307, 329, 332, 360, 366, 379, 444, 446, 451, 452, 486, 488, 494, 503, 507, 535, 550, 565, 567, 571, 574, 582, 600, 606, 611, 616, 634, 637, 644, 646, 647, 683, 684, 711, 714, 743, 751, 766, 830, 832, 837, 838, 884], "let": 79, "about": [79, 432, 535, 818, 884], "3rd": 79, "unknown": [79, 509], "np": [80, 239, 750, 754, 755, 756, 792, 884], "ndarrai": [80, 131, 195, 239, 470, 535, 686, 807, 857, 866, 884], "numpi": [80, 105, 131, 166, 195, 239, 396, 397, 470, 535, 750, 754, 755, 756, 777, 778, 792, 857, 866, 874, 884], "columnar": [80, 82, 151, 177, 239], "column_0": [80, 82, 117, 199, 239], "column_1": [80, 82, 117, 199, 239], "interpret": [80, 82, 88, 89, 99, 239], "yield": [80, 82, 88, 89, 99, 126, 128, 199, 239, 624, 728, 884], "conclus": [80, 82, 239], "nan_to_non": 81, "panda": [81, 91, 105, 196, 239, 474, 535, 867, 868, 884], "index": [81, 84, 105, 132, 139, 140, 145, 153, 168, 174, 176, 185, 197, 203, 209, 239, 247, 259, 260, 261, 262, 263, 264, 265, 271, 281, 329, 412, 413, 414, 415, 416, 418, 419, 420, 433, 444, 455, 470, 486, 535, 565, 566, 571, 594, 607, 616, 632, 633, 634, 635, 636, 637, 639, 640, 646, 656, 711, 779, 807, 819, 830, 841, 857, 884], "datetimeindex": [81, 686, 884], "instal": [81, 88, 89, 92, 96, 98, 100, 105, 166, 195, 196, 239, 592, 616, 866, 884], "nan": [81, 106, 107, 110, 129, 239, 310, 311, 352, 362, 369, 371, 372, 373, 386, 393, 396, 397, 521, 535, 559, 616, 627, 631, 687, 735, 755, 756, 777, 778, 792, 884], "convert": [81, 83, 90, 91, 100, 192, 193, 194, 195, 196, 198, 239, 285, 461, 660, 847, 854, 865, 866, 867, 874, 884], "pd": [81, 91, 239, 474, 535, 868, 884], "pd_df": 81, "pd_seri": 81, "dummi": [83, 194, 239, 863, 884], "subset": [83, 124, 163, 194, 200, 239, 555, 600, 616], "to_dummi": [83, 239, 884], "foo_1": [83, 194, 239], "foo_2": [83, 194, 239], "bar_3": [83, 194, 239], "bar_4": [83, 194, 239], "ham_a": [83, 194, 239], "ham_b": [83, 194, 239], "get": [84, 93, 97, 112, 120, 125, 135, 136, 139, 140, 142, 143, 147, 149, 155, 162, 176, 179, 181, 185, 189, 194, 206, 215, 225, 227, 228, 229, 230, 231, 232, 233, 239, 247, 259, 260, 261, 262, 263, 270, 274, 275, 286, 302, 303, 304, 305, 306, 316, 355, 360, 364, 366, 374, 377, 379, 386, 387, 388, 389, 391, 393, 396, 397, 404, 433, 437, 447, 450, 468, 469, 476, 480, 502, 507, 511, 512, 513, 514, 522, 525, 526, 535, 551, 556, 562, 565, 566, 567, 572, 574, 588, 594, 598, 603, 611, 612, 616, 632, 633, 634, 635, 636, 637, 645, 649, 650, 661, 671, 679, 680, 681, 682, 694, 740, 743, 748, 751, 761, 766, 769, 771, 772, 774, 777, 778, 782, 783, 785, 819, 822, 833, 836, 856, 862, 863, 870, 873, 874, 884], "uint32": [84, 105, 126, 239, 261, 263, 264, 265, 275, 314, 317, 320, 322, 324, 326, 327, 330, 331, 333, 339, 340, 408, 440, 447, 450, 470, 474, 535, 635, 639, 640, 650, 667, 692, 695, 701, 703, 706, 708, 709, 712, 713, 715, 721, 722, 728, 805, 826, 868, 884], "regular": [84, 151, 176, 177, 203, 239, 348, 489, 501, 535], "uint64": [84, 141, 239, 264, 265, 359, 407, 535, 639, 640, 742, 788, 884], "bigidx": 84, "read": [85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 128, 239, 384, 535, 558, 563, 585, 616, 624, 884], "over": [85, 88, 89, 99, 110, 117, 128, 138, 151, 176, 177, 199, 212, 222, 239, 252, 307, 353, 362, 384, 385, 411, 412, 413, 414, 415, 416, 418, 419, 420, 484, 494, 495, 503, 510, 518, 535, 610, 624, 625, 683, 792, 793, 794, 796, 800, 884], "avail": [85, 90, 100, 109, 238, 242, 405, 528, 529, 531, 534, 535, 536, 539, 540, 541, 544, 545, 558, 615, 616, 786, 876, 878, 880, 884, 887, 888, 889], "fetch": [85, 99, 154, 239, 548, 550, 567, 574, 601, 616], "ideal": [85, 222], "read_csv_batch": [85, 545], "tpch": [85, 89], "tables_scale_100": [85, 89], "lineitem": [85, 89, 98], "tbl": [85, 89], "parse_d": [85, 88, 89, 99], "polarsdatatyp": [86, 99, 108, 109, 110, 111, 114, 117, 125, 179, 239, 252, 293, 384, 535, 625, 667, 884], "new": [86, 114, 117, 122, 124, 144, 145, 163, 164, 172, 173, 190, 202, 207, 239, 248, 350, 356, 362, 385, 451, 452, 457, 458, 465, 466, 471, 535, 544, 586, 599, 610, 616, 621, 625, 688, 733, 779, 789, 837, 838, 843, 844, 851, 853, 858, 864, 875, 884], "In": [86, 90, 100, 104, 110, 111, 114, 117, 126, 128, 139, 140, 163, 239, 252, 389, 434, 435, 535, 565, 566, 616, 624, 728, 787, 884], "probabl": [86, 114, 344, 535, 727, 884], "n_row": [87, 88, 89, 92, 96, 99, 102, 103, 104, 558, 616], "accept": [87, 88, 89, 90, 92, 96, 186, 239], "start": [87, 88, 89, 92, 96, 99, 102, 103, 104, 138, 139, 154, 185, 203, 209, 239, 281, 292, 314, 316, 317, 324, 326, 330, 331, 332, 333, 336, 337, 339, 340, 343, 348, 363, 433, 439, 443, 455, 459, 489, 494, 501, 503, 527, 535, 564, 565, 583, 594, 607, 616, 656, 666, 690, 691, 692, 694, 695, 701, 703, 706, 708, 709, 712, 713, 714, 715, 717, 718, 719, 721, 722, 723, 724, 725, 819, 829, 841, 845, 884], "stop": [87, 88, 89, 92, 96, 99, 102, 103, 104, 314, 316, 317, 324, 326, 330, 331, 332, 333, 336, 337, 339, 340, 343, 690, 691, 692, 694, 695, 701, 703, 706, 708, 709, 712, 713, 714, 715, 717, 718, 719, 721, 722, 723, 724, 725], "after": [87, 88, 89, 92, 96, 99, 102, 103, 104, 128, 201, 238, 239, 242, 405, 464, 535, 601, 616, 624, 691, 786, 850, 884], "textio": 88, "new_column": [88, 89, 91], "comment_char": [88, 89, 99], "quote_char": [88, 89, 99], "skip_row": [88, 89, 99], "ignore_error": [88, 89, 99], "n_thread": [88, 89], "8192": 88, "csvencod": [88, 89, 99], "low_memori": [88, 89, 96, 99, 103, 104], "storage_opt": [88, 90, 92, 96, 100, 102, 104], "skip_rows_after_head": [88, 89, 99], "row_count_nam": [88, 89, 92, 96, 99, 102, 103, 104], "row_count_offset": [88, 89, 92, 96, 99, 102, 103, 104], "sample_s": [88, 89], "eol_char": [88, 89, 99], "By": [88, 89, 91, 153, 186, 239, 509, 571, 616, 822, 866, 873, 884], "we": [88, 89, 91, 99, 138, 153, 186, 239, 269, 509, 527, 571, 575, 595, 616, 625, 644, 884], "handler": [88, 89, 91], "g": [88, 89, 90, 91, 92, 96, 100, 102, 104, 202, 239, 348, 424, 427, 501, 535, 805, 808, 866, 884], "via": [88, 89, 91, 99, 102, 104, 151, 177, 208, 239, 605, 616], "builtin": [88, 89, 91], "open": [88, 89, 91, 92, 96, 102, 104], "stringio": [88, 89], "fsspec": [88, 89, 92, 96, 100, 102, 104, 105], "remot": [88, 89, 92, 96], "dataset": [88, 89, 99, 101, 376, 535, 544, 764, 884], "autogener": [88, 89, 99], "column_x": [88, 89, 99], "enumer": [88, 89, 99], "everi": [88, 89, 99, 139, 190, 193, 203, 239, 264, 265, 268, 271, 272, 281, 284, 302, 303, 304, 305, 306, 307, 332, 337, 350, 356, 471, 494, 495, 535, 558, 565, 599, 616, 639, 640, 643, 646, 647, 656, 659, 679, 680, 681, 682, 683, 714, 719, 733, 858, 884], "shorter": [88, 89], "remain": [88, 89, 99, 126, 138, 239, 252, 457, 458, 535, 564, 575, 616, 728, 843, 844, 884], "comment": [88, 89, 99], "instanc": [88, 89, 99, 110, 111, 128, 133, 239, 285, 293, 390, 412, 413, 414, 415, 416, 418, 419, 420, 494, 503, 535, 575, 607, 616, 624, 667, 884], "special": [88, 89, 99, 625, 884], "handl": [88, 89, 99, 101, 268, 308, 464, 535, 643, 685, 850, 884], "escap": [88, 89, 99], "dure": [88, 89, 99, 128, 239, 624, 884], "provid": [88, 89, 90, 98, 99, 100, 110, 111, 208, 239, 285, 289, 290, 441, 442, 444, 446, 505, 544, 593, 605, 610, 616, 663, 664, 827, 828, 830, 832, 891], "equal": [88, 89, 99, 106, 107, 113, 134, 139, 153, 160, 239, 411, 412, 413, 414, 415, 416, 418, 419, 420, 447, 448, 453, 464, 485, 535, 565, 571, 580, 616, 792, 793, 794, 795, 796, 797, 799, 800, 801, 805, 833, 834, 839, 850, 884], "some": [88, 89, 99, 124, 239, 555, 616, 753, 884], "check": [88, 89, 99, 106, 107, 134, 148, 150, 239, 249, 250, 267, 288, 291, 292, 363, 367, 439, 443, 459, 535, 575, 616, 622, 623, 642, 662, 665, 666, 746, 747, 749, 752, 753, 759, 760, 762, 763, 805, 825, 829, 845, 884], "might": [88, 89, 99, 389, 477, 535], "issu": [88, 89, 91, 99, 305, 306, 468, 535, 681, 682, 855, 884], "automat": [88, 89, 98, 99, 110, 111, 239, 449, 454, 460, 461, 835, 840, 846, 847, 884], "alwai": [88, 117, 212, 239, 252, 389, 535, 575, 610, 616], "physic": [88, 89, 153, 239, 294, 474, 535, 547, 570, 571, 616, 669, 868, 884], "cpu": [88, 89], "your": [88, 89, 106, 107, 151, 239, 550, 567, 574, 575, 616], "system": [88, 89], "done": [88, 89, 99, 101, 137, 153, 239, 251, 293, 448, 453, 535, 571, 595, 609, 616, 667, 834, 839, 884], "buffer": [88, 89, 126, 151, 239, 728, 884], "onc": [88, 89, 91, 151, 178, 239, 422, 535, 547, 616, 803, 884], "modifi": [88, 89, 99, 144, 151, 205, 239, 313, 341, 691, 723, 789, 848, 849, 884], "multi": [88, 89], "lossi": [88, 89, 99], "replac": [88, 89, 99, 129, 130, 174, 199, 207, 239, 452, 559, 604, 616, 806, 807, 838, 884], "decod": [88, 89], "im": [88, 89], "usag": [88, 89, 99, 110, 111, 184, 239, 813, 884], "expens": [88, 89, 96, 99, 103, 104, 138, 151, 176, 177, 199, 239, 564, 616, 624, 884], "nativ": [88, 92, 96, 117, 212, 239, 252, 535, 610], "parser": 88, "even": 88, "possibl": [88, 117, 151, 177, 212, 239, 252, 383, 389, 458, 478, 535, 610, 844, 884], "differ": [88, 101, 128, 139, 140, 199, 239, 268, 308, 313, 314, 329, 330, 339, 396, 397, 461, 477, 502, 505, 511, 514, 535, 565, 566, 616, 624, 643, 685, 691, 692, 711, 712, 721, 777, 778, 805, 847, 884], "regard": [88, 521], "sens": [88, 92, 96, 102, 104, 139, 140, 160, 203, 239, 565, 566, 580, 616], "particular": [88, 92, 96, 102, 104, 126, 239, 728, 884], "storag": [88, 90, 92, 96, 100, 102, 104], "connect": [88, 92, 96, 98, 101, 102, 104, 545], "port": [88, 92, 96, 98, 102, 104], "usernam": [88, 92, 96, 98, 102, 104], "password": [88, 92, 96, 98, 102, 104], "skip": [88, 89, 91, 99, 202, 239, 625, 884], "insert": [88, 89, 92, 96, 99, 102, 103, 104, 145, 173, 199, 201, 239, 423, 438, 464, 535, 601, 616, 804, 824, 850, 884], "count": [88, 89, 92, 96, 99, 102, 103, 104, 121, 139, 140, 153, 163, 164, 168, 199, 203, 209, 212, 221, 239, 302, 329, 378, 395, 398, 412, 413, 414, 415, 416, 418, 419, 420, 440, 477, 479, 515, 535, 565, 566, 571, 607, 610, 616, 684, 711, 775, 780, 826, 871, 872, 884], "offset": [88, 89, 92, 96, 99, 102, 103, 104, 139, 140, 185, 203, 209, 239, 281, 329, 332, 337, 433, 455, 535, 565, 566, 594, 607, 616, 656, 711, 714, 719, 819, 841, 884], "row_count": [88, 89, 92, 96, 99, 102, 103, 104], "sampl": [88, 89, 212, 239, 432, 535, 610, 818, 884], "estim": [88, 89, 126, 239, 346, 347, 376, 535, 728, 730, 731, 764, 884], "alloc": [88, 89, 126, 171, 239, 728, 884], "need": [88, 89, 91, 106, 107, 139, 140, 184, 195, 239, 285, 427, 447, 535, 565, 566, 609, 616, 812, 833, 866, 884], "end": [88, 89, 96, 99, 139, 239, 281, 291, 332, 348, 363, 439, 443, 455, 459, 489, 501, 535, 565, 567, 574, 583, 616, 656, 665, 714, 829, 841, 845], "scan_csv": [88, 89, 593, 609, 616], "glob": [88, 89, 99, 102, 104], "pattern": [88, 89, 99, 102, 104, 151, 239, 439, 440, 444, 445, 451, 452, 806, 807, 825, 826, 830, 831, 837, 838, 884], "store": [88, 96, 128, 151, 177, 239, 624, 884], "continu": [88, 96, 432, 535, 818, 884], "benchmark": [88, 96], "50000": 89, "batchedcsvread": [89, 544], "batch": [89, 103], "upon": 89, "creation": 89, "gather": 89, "work": [89, 91, 138, 140, 173, 200, 239, 269, 295, 296, 297, 298, 357, 450, 466, 476, 535, 564, 566, 600, 616, 644, 670, 673, 674, 675, 739, 836, 870, 884], "next_batch": 89, "call": [89, 110, 111, 151, 154, 238, 239, 242, 545, 615, 616, 625, 884], "table_uri": [90, 100], "delta_table_opt": [90, 100], "lake": [90, 100, 544], "uri": [90, 98, 100], "root": [90, 100, 375, 385, 391, 402, 436, 467, 534, 535, 821, 884], "For": [90, 91, 98, 100, 128, 140, 152, 153, 186, 212, 239, 285, 293, 390, 407, 432, 494, 503, 504, 535, 566, 571, 595, 610, 616, 624, 788, 818, 866, 884], "filesystem": [90, 100], "absolut": [90, 100, 106, 107, 246, 535, 620, 884], "rel": [90, 100, 106, 107, 222, 329, 345, 346, 347, 535, 711, 729, 730, 731, 884], "But": [90, 100], "gc": [90, 100], "azur": [90, 100], "thu": [90, 99, 100, 128, 239, 521, 624, 884], "latest": [90, 100, 358, 390, 535], "backend": [90, 98, 100], "deltalak": [90, 100], "cloud": [90, 100, 101], "configur": [90, 100], "authent": [90, 100], "here": [90, 98, 100, 109, 110, 111, 446, 832], "keyword": [90, 96, 100, 166, 167, 176, 239, 582, 616, 884], "while": [90, 91, 100, 110, 111, 151, 159, 199, 239, 579, 616], "sinc": [90, 100, 222, 242, 316, 505, 694], "table_path": [90, 100], "fail": [90, 100, 200, 239, 285, 461, 600, 616, 625, 847, 884], "aw": [90, 100], "see": [90, 91, 98, 100, 106, 107, 110, 111, 152, 166, 167, 239, 296, 297, 298, 335, 353, 362, 376, 384, 432, 518, 535, 673, 674, 675, 717, 764, 818, 884, 891], "bucket": [90, 100, 332, 337, 714, 719], "aws_access_key_id": [90, 100], "the_aws_access_key_id": [90, 100], "aws_secret_access_kei": [90, 100], "the_aws_secret_access_kei": [90, 100], "googl": [90, 100], "service_account": [90, 100], "service_account_json_absolute_path": [90, 100], "az": [90, 100], "adl": [90, 100], "abf": [90, 100], "azure_storage_account_nam": [90, 100], "azure_storage_account_kei": [90, 100], "without_fil": [90, 100], "load": [90, 100, 544, 567, 574, 616], "track": [90, 100, 117, 239], "sheet_id": 91, "sheet_nam": 91, "xlsx2csv_option": 91, "read_csv_opt": 91, "excel": [91, 544], "xlsx": 91, "sheet": 91, "xlsx2csv": [91, 105], "read_csv": [91, 99], "skip_empty_lin": 91, "my": [91, 100, 101], "datasheet": 91, "excel_fil": 91, "As": [91, 519], "correct": [91, 346, 347, 376, 417, 432, 535, 575, 616, 730, 731, 764, 798, 818, 884], "look": [91, 285, 288, 662], "document": [91, 98, 446, 461, 832, 847], "fix": [91, 109, 110, 341, 412, 413, 414, 415, 416, 418, 419, 420, 535, 723], "whole": [91, 434, 435, 444, 535, 830], "twice": 91, "actual": [91, 110, 111, 813, 884], "With": 91, "1000": [91, 126, 239, 321, 464, 702], "spreadsheet": [91, 168, 239], "xl": 91, "xlsm": 91, "xlsb": 91, "odf": 91, "od": [91, 460, 846], "odt": 91, "from_panda": 91, "memory_map": [92, 96, 102], "v2": [92, 102], "valid": [92, 96, 111, 126, 239, 307, 434, 439, 440, 444, 445, 446, 535, 683, 728, 741, 825, 826, 830, 831, 832, 837, 838, 884], "greatli": [92, 102], "repeat": [92, 102, 406, 408, 535], "o": [92, 102, 307, 356, 475, 535, 683, 869, 884], "page": [92, 102, 239, 535, 544, 593, 616, 884], "give": [92, 96, 102, 103, 104, 159, 239, 316, 376, 408, 535, 544, 579, 616, 694, 764, 884], "read_ndjson": 94, "parallelstrategi": [96, 104], "auto": [96, 104, 199, 239], "directori": 96, "partit": [96, 98, 101, 165, 239], "awar": [96, 338, 461, 720, 847], "stabl": 96, "increas": [96, 307, 535, 683, 884], "row_group": [96, 104], "direct": [96, 98, 104, 202, 239], "read_tabl": 96, "connection_uri": 98, "partition_on": 98, "partition_rang": 98, "partition_num": 98, "protocol": 98, "databas": 98, "postgresql": 98, "redshift": 98, "mysql": 98, "mariadb": 98, "clickhous": 98, "oracl": 98, "bigqueri": 98, "server": 98, "pleas": [98, 100], "connectorx": [98, 105], "doc": 98, "github": 98, "com": [98, 345, 346, 347, 444, 535, 729, 730, 731, 830, 884], "sfu": 98, "db": 98, "connector": 98, "destin": 98, "raw": 98, "transfer": 98, "detail": [98, 106, 107, 891], "partition_col": 98, "explicitli": [98, 109, 110], "with_column_nam": 99, "push": [99, 101, 102, 103, 104], "down": [99, 101, 102, 103, 104, 357, 535, 739, 884], "therebi": [99, 102, 103, 104], "potenti": [99, 102, 103, 104], "overhead": [99, 102, 103, 104], "updat": 99, "just": [99, 159, 239, 579, 616], "befor": [99, 128, 139, 153, 201, 239, 305, 306, 307, 400, 411, 412, 413, 414, 415, 416, 418, 419, 420, 464, 468, 535, 565, 568, 571, 601, 616, 624, 681, 682, 683, 781, 792, 793, 794, 795, 796, 797, 799, 800, 801, 850, 855, 884], "realloc": [99, 102, 103, 128, 239, 624, 884], "my_long_fil": 99, "doesn": [99, 344, 535, 727, 874, 884], "thing": [99, 482, 502], "less": [99, 153, 239, 448, 453, 458, 464, 571, 616, 834, 839, 844, 850], "limit": [99, 130, 239, 287, 296, 297, 298, 353, 358, 535, 560, 567, 593, 616, 673, 674, 675, 736, 884], "breezah": 99, "languag": [99, 139, 140, 153, 203, 239, 329, 332, 337, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 571, 616, 711, 714, 719], "terribl": 99, "mydf": 99, "write_csv": [99, 239], "lambda": [99, 117, 124, 133, 167, 212, 239, 252, 285, 345, 346, 347, 384, 385, 411, 496, 524, 535, 555, 575, 582, 610, 616, 625, 660, 729, 730, 731, 884], "raw_filesystem": 100, "adjust": [100, 345, 346, 347, 432, 535, 729, 730, 731, 818, 884], "subtreefilesystem": 100, "reli": 100, "mention": 100, "ensur": [100, 110, 111, 113, 176, 239, 479, 535, 575, 616, 866, 872, 884], "gcsf": 100, "pyfilesystem": 100, "fsspechandl": 100, "gcsfilesystem": 100, "id": [100, 212, 451, 452, 477, 479, 535, 610, 871, 884], "token": 100, "pa_f": 100, "adlf": 100, "azureblobfilesystem": 100, "account_nam": 100, "account_kei": 100, "allow_pyarrow_filt": 101, "lead": [101, 239, 424, 449, 460, 464, 470, 479, 511, 514, 521, 535, 575, 610, 616, 808, 835, 846, 850, 884], "comparison": 101, "dset": 101, "folder": 101, "out": [101, 105, 140, 239, 271, 365, 368, 535, 566, 593, 616, 646], "1970": 101, "stdout": 105, "14": [105, 117, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 239, 362, 535, 714], "platform": 105, "linux": 105, "microsoft": 105, "standard": [105, 187, 239, 319, 346, 418, 432, 437, 446, 522, 535, 596, 616, 697, 730, 818, 822, 832, 884], "wsl2": 105, "x86_64": 105, "glibc2": 105, "main": 105, "jul": [105, 461, 847], "56": [105, 472, 535], "gcc": 105, "20210110": 105, "23": [105, 139, 140, 222, 239, 242, 317, 332, 498, 565, 566, 616, 695], "check_dtyp": [106, 107], "check_exact": [106, 107], "check_column_nam": 106, "rtol": [106, 107], "1e": [106, 107], "atol": [106, 107], "nans_compare_equ": [106, 107], "assertionerror": [106, 107], "compar": [106, 107, 134, 200, 239, 600, 616, 805, 884], "exactli": [106, 107, 110, 111, 457, 458, 813, 843, 844, 884], "toler": [106, 107, 153, 239, 571, 616], "inexact": [106, 107], "assert": [106, 107, 109, 110, 111, 140, 239, 544, 566, 616, 741, 884], "check_nam": 107, "s1": [107, 133, 239, 875, 884], "searchstrategi": [108, 110, 111], "null_prob": [108, 110, 111], "percentag": [108, 110, 111, 400, 535, 781, 884], "chanc": [108, 110, 111], "hypothesi": [108, 109, 110, 111, 891], "sampled_from": 108, "unique_small_int": 108, "ccy": 108, "gbp": 108, "eur": [108, 121, 137, 239], "jpy": 108, "min_col": [109, 110], "max_col": [109, 110], "suitabl": 109, "standalon": [109, 110], "itself": [109, 573, 616], "explicit": [109, 485, 518], "omit": [109, 110, 111, 163, 239], "random": [109, 110, 111, 141, 178, 239, 359, 405, 422, 428, 535, 742, 786, 803, 814, 884], "mincol": 109, "exact": [109, 110, 111, 184, 239, 461, 847], "control": [109, 553, 616], "especi": 109, "punctuat": 109, "test_special_char_colname_init": 109, "z": [109, 110, 126, 147, 149, 152, 159, 239, 266, 294, 359, 408, 535, 570, 579, 594, 616, 669, 736, 884], "test_unique_xyz": 109, "assert_someth": 109, "min_siz": [110, 111], "max_siz": [110, 111], "include_col": 110, "allow_infin": [110, 111], "allowed_dtyp": [110, 111], "excluded_dtyp": [110, 111], "describ": [110, 137, 239, 609, 884], "desir": 110, "param": [110, 111, 176, 239], "n_chunk": [110, 111, 239, 884], "randomis": 110, "individu": [110, 140, 239, 252, 445, 535, 566, 593, 616, 671, 831, 884], "append": [110, 128, 152, 153, 239, 406, 535, 570, 571, 616, 884], "onto": 110, "independ": [110, 111], "either": [110, 140, 154, 157, 176, 188, 239, 566, 573, 616], "basi": 110, "pct": 110, "take": [110, 133, 160, 167, 190, 239, 329, 338, 471, 500, 502, 535, 580, 599, 616, 711, 720, 858, 875, 884], "preced": 110, "disallow": [110, 111], "exclud": [110, 111, 363, 489, 521, 535], "deploi": [110, 111], "characterist": [110, 111], "develop": [110, 111], "directli": [110, 111, 345, 346, 347, 535, 729, 730, 731, 884], "concret": [110, 111], "test_repr": [110, 111], "isinst": [110, 111, 239], "repr": [110, 111], "known": [110, 610], "colnam": [110, 125, 239, 385, 535, 556, 616], "df_strategi": 110, "15836": 110, "1755e": 110, "38": 110, "575050513": 110, "constructor": 111, "op": [111, 408, 535], "max_data_s": 111, "distinct": [111, 165, 239, 286, 405, 497, 498, 499, 535, 661, 786, 884], "54666": 111, "35": 111, "6414": 111, "63290": 111, "pool": 112, "return_dtyp": [117, 239, 252, 384, 484, 510, 535, 625, 884], "inference_s": [117, 239], "256": [117, 239, 781, 884], "user": [117, 167, 212, 239, 252, 424, 484, 535, 582, 610, 616, 625, 808, 884], "udf": [117, 167, 212, 239, 252, 484, 535, 582, 610, 616, 625, 884], "logic": [117, 212, 239, 252, 474, 535, 563, 570, 585, 608, 610, 616, 868, 884], "almost": [117, 212, 239, 252, 535, 610], "_significantly_": [117, 212, 239, 252, 535, 610], "intens": [117, 212, 239, 252, 535, 610], "becaus": [117, 126, 139, 154, 202, 212, 239, 252, 269, 535, 565, 610, 616, 625, 644, 728, 884], "engin": [117, 212, 239, 252, 535, 610], "forc": [117, 153, 212, 239, 252, 535, 570, 571, 610, 616], "materi": [117, 212, 239, 252, 535, 583, 610, 616], "parallelis": [117, 212, 239, 252, 535, 610], "optimis": [117, 212, 239, 252, 535, 610, 806, 807, 884], "wherev": [117, 212, 239, 252, 535, 610], "strongli": [117, 212, 239, 252, 535, 610], "prefer": [117, 128, 151, 177, 212, 239, 252, 411, 535, 610, 616, 624, 792, 884], "achiev": [117, 212, 239, 252, 535, 610], "best": [117, 212, 239, 252, 535, 610], "tri": [117, 239], "arbitrarili": [117, 239], "rearrang": [117, 239], "want": [117, 128, 163, 239, 296, 297, 298, 354, 384, 412, 413, 414, 415, 416, 418, 419, 420, 494, 503, 535, 550, 567, 574, 616, 624, 673, 674, 675, 866, 884], "preserv": [117, 239, 429, 535, 815, 884], "syntax": [117, 163, 186, 239, 592, 595, 616, 884], "15": [117, 139, 140, 145, 239, 307, 332, 337, 535, 565, 566, 616, 683, 714, 719, 884], "better": [117, 212, 239, 252, 479, 535, 610, 806, 807, 884], "scalar": [117, 150, 239, 423, 484, 535, 763, 804, 884], "ident": [118, 119, 239, 548, 549, 616, 672, 676, 884], "cheap": [118, 119, 239, 548, 549, 616, 624, 672, 676, 884], "deepcopi": [118, 119, 239, 548, 549, 616, 672, 676, 884], "13": [118, 119, 129, 130, 136, 140, 145, 154, 162, 208, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 242, 411, 413, 490, 526, 535, 548, 549, 559, 560, 566, 573, 605, 616, 625, 714, 719, 721, 884], "clear": [119, 239, 549, 616, 676, 884], "properti": [120, 125, 143, 179, 181, 206, 239, 544, 551, 556, 588, 603, 616], "appl": [120, 144, 152, 172, 174, 192, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 239, 402, 410, 443, 459, 467, 535, 570, 586, 616, 829, 845], "banana": [120, 192, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 239, 402, 410, 467, 535], "summari": [121, 239, 684, 884], "glimps": [121, 142, 239], "usd": [121, 137, 239], "2020": [121, 137, 140, 239, 315, 318, 321, 323, 325, 328, 334, 342, 566, 616, 691, 693, 696, 702, 704, 707, 710, 716, 724], "2021": [121, 137, 139, 203, 239, 461, 509, 565, 616, 697, 747, 847, 884], "null_count": [121, 124, 239, 307, 535, 683, 684, 884], "266667": [121, 239], "666667": [121, 157, 204, 218, 239, 345, 535, 602, 616], "std": [121, 239, 411, 535, 616, 684, 799, 884], "101514": [121, 239], "707107": [121, 239, 346, 535, 730, 884], "57735": [121, 239], "median": [121, 168, 239, 414, 535, 606, 616, 795, 884], "snippet": [124, 239, 555, 616], "fold": [124, 239, 390, 488, 494, 495, 518, 524, 555, 616], "acc": [124, 239, 494, 495, 503, 518, 555, 616], "is_nul": [124, 239, 535, 555, 616, 884], "height": [124, 239], "sizeunit": [126, 239, 728, 884], "total": [126, 239, 728, 884], "heap": [126, 239, 728, 884], "its": [126, 201, 239, 332, 337, 601, 616, 714, 719, 728, 884], "bitmap": [126, 239, 728, 884], "therefor": [126, 239, 285, 728, 884], "structarrai": [126, 239, 728, 884], "constant": [126, 140, 239, 566, 616, 728, 884], "unchang": [126, 239, 252, 474, 535, 575, 610, 616, 728, 868, 884], "visibl": [126, 239, 728, 884], "capac": [126, 184, 239, 728, 813, 884], "ffi": [126, 239, 728, 884], "kb": [126, 239, 728, 884], "mb": [126, 239, 728, 884], "gb": [126, 239, 728, 884], "tb": [126, 239, 728, 884], "scale": [126, 239, 728, 884], "1_000_000": [126, 239, 728, 884], "25888898": [126, 239], "689577102661133": [126, 239], "long": [127, 159, 202, 239, 557, 579, 616], "largelist": [127, 239], "letter": [127, 215, 225, 239, 348, 501, 535, 557, 611, 612, 616], "locat": [128, 174, 197, 201, 239, 601, 616, 624, 807, 857, 884], "faster": [128, 151, 202, 239, 411, 450, 477, 535, 593, 616, 624, 625, 792, 836, 884], "onlin": [128, 239, 624, 884], "rerun": [128, 239, 624, 884], "them": [128, 139, 140, 153, 160, 203, 239, 273, 396, 397, 490, 535, 565, 566, 571, 580, 616, 624, 648, 777, 778, 884], "latter": [128, 239, 624, 884], "20": [128, 144, 145, 167, 169, 173, 174, 239, 259, 260, 261, 263, 308, 332, 337, 359, 362, 505, 509, 535, 582, 616, 719], "40": [128, 167, 239, 332, 337, 359, 535, 582, 616, 697, 719], "60": [128, 239, 333, 334, 461, 712, 715, 716, 847], "fill_valu": [129, 183, 202, 239, 352, 426, 535, 559, 591, 616, 735, 811, 884], "Not": [129, 239, 369, 371, 535, 559, 616], "To": [129, 239, 310, 311, 353, 511, 514, 524, 535, 559, 616], "fillnullstrategi": [130, 239, 353, 535, 560, 616, 736, 884], "matches_supertyp": [130, 239, 560, 616], "forward": [130, 153, 239, 353, 358, 535, 560, 571, 616, 736, 884], "consecut": [130, 239, 287, 353, 358, 438, 535, 560, 616, 736, 824, 884], "supertyp": [130, 239, 251, 535, 560, 616], "fill_nan": [130, 239, 535, 616, 884], "OR": [131, 239, 483, 561, 616], "reduct": [133, 239], "effect": [133, 239, 607, 616], "supercast": [133, 239], "similar": [133, 153, 239, 399, 535, 571, 616], "parent": [133, 239], "rule": [133, 239, 335, 717], "arithmet": [133, 239], "zip_with": [133, 239, 884], "foo11": [133, 239], "bar22": [133, 239], "null_equ": [134, 239, 805, 884], "retriev": [135, 239, 264, 265, 465, 639, 640, 851], "preview": [137, 239], "wide": [137, 159, 202, 239, 579, 616], "nice": [137, 239], "few": [137, 239], "head": [137, 155, 189, 239, 251, 379, 535, 574, 616, 766, 884], "tail": [137, 142, 210, 239, 251, 432, 535, 616, 818, 884], "maintain_ord": [138, 165, 168, 200, 203, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 247, 252, 470, 476, 492, 535, 550, 553, 558, 564, 583, 592, 593, 600, 616, 870, 884], "consist": [138, 239, 564, 616], "agg": [138, 139, 140, 239, 247, 252, 354, 434, 470, 481, 492, 535, 550, 553, 558, 564, 565, 566, 583, 592, 616], "loop": [138, 239], "sub_df": [138, 239], "index_column": [139, 140, 239, 565, 566, 616], "truncat": [139, 239, 565, 583, 616], "include_boundari": [139, 239, 565, 616], "start_bi": [139, 239, 565, 616], "startbi": [139, 239, 565, 616], "dynamicgroupbi": [139, 239], "normal": [139, 239, 344, 376, 432, 535, 565, 616, 727, 764, 818, 884], "groupbi": [139, 140, 163, 239, 242, 247, 252, 269, 307, 354, 399, 434, 435, 470, 481, 484, 492, 535, 550, 553, 558, 565, 566, 583, 592, 616, 644, 683, 884], "member": [139, 239, 565, 616, 753, 884], "seen": [139, 239, 287, 358, 535, 565, 616], "roll": [139, 140, 239, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 490, 535, 565, 566, 616, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 884], "slot": [139, 239, 268, 307, 308, 535, 565, 616, 643, 683, 685, 884], "1n": [139, 140, 153, 203, 239, 329, 332, 337, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 571, 616, 711, 714, 719], "nanosecond": [139, 140, 153, 203, 239, 329, 332, 333, 337, 412, 413, 414, 415, 416, 418, 419, 420, 499, 535, 565, 566, 571, 616, 711, 714, 715, 719], "1u": [139, 140, 153, 203, 239, 329, 332, 337, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 571, 616, 711, 714, 719], "microsecond": [139, 140, 153, 203, 239, 329, 332, 333, 337, 412, 413, 414, 415, 416, 418, 419, 420, 498, 499, 535, 565, 566, 571, 583, 616, 711, 714, 719], "1m": [139, 140, 153, 203, 239, 321, 323, 328, 329, 332, 334, 337, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 571, 616, 702, 704, 710, 711, 714, 716, 719], "millisecond": [139, 140, 153, 203, 239, 329, 332, 337, 412, 413, 414, 415, 416, 418, 419, 420, 499, 535, 565, 566, 571, 616, 711, 714, 719], "1h": [139, 140, 153, 203, 239, 329, 332, 337, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 571, 616, 695, 711, 714, 719], "1w": [139, 140, 153, 203, 239, 329, 332, 337, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 571, 616, 711, 714, 719], "week": [139, 140, 153, 203, 239, 329, 332, 337, 340, 412, 413, 414, 415, 416, 418, 419, 420, 499, 535, 565, 566, 571, 616, 711, 714, 719, 722], "month": [139, 140, 153, 203, 239, 314, 329, 332, 337, 412, 413, 414, 415, 416, 418, 419, 420, 497, 498, 535, 565, 566, 571, 616, 692, 711, 714, 719], "1y": [139, 140, 153, 203, 239, 329, 332, 337, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 571, 616, 711, 714, 719, 725], "year": [139, 140, 153, 203, 239, 319, 329, 330, 332, 337, 339, 412, 413, 414, 415, 416, 418, 419, 420, 497, 498, 535, 565, 566, 571, 616, 697, 711, 712, 714, 719, 721], "1i": [139, 140, 153, 203, 239, 329, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 566, 571, 616, 711], "Or": [139, 140, 153, 203, 239, 399, 527, 535, 565, 566, 571, 616], "10i": [139, 140, 239, 565, 566, 616], "often": [139, 140, 239, 408, 535, 565, 566, 616], "ascend": [139, 140, 239, 486, 565, 566, 616], "dynam": [139, 239, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 616], "matter": [139, 140, 239, 565, 566, 616], "neg": [139, 182, 183, 185, 239, 280, 281, 425, 426, 433, 455, 535, 565, 590, 591, 594, 607, 616, 655, 656, 810, 811, 819, 841, 884], "_lower_bound": [139, 239, 565, 616], "_upper_bound": [139, 239, 565, 616], "impact": [139, 239, 565, 616], "harder": [139, 239, 565, 616], "datapoint": [139, 239, 565, 616], "mondai": [139, 239, 337, 340, 565, 616, 722], "date_rang": [139, 203, 239, 312, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 336, 337, 339, 340, 341, 342, 343, 565, 616, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725], "30m": [139, 239, 332, 337, 565, 616, 714, 719], "time_min": [139, 239, 565, 616], "time_max": [139, 239, 565, 616], "boundari": [139, 239, 296, 297, 298, 535, 565, 616, 673, 674, 675, 884], "ad": [139, 199, 207, 239, 251, 494, 495, 535, 565, 604, 616], "time_count": [139, 239, 565, 616], "_lower_boundari": [139, 239, 565, 616], "_upper_boundari": [139, 239, 565, 616], "lower_bound": [139, 239, 535, 565, 616], "upper_bound": [139, 239, 285, 535, 565, 616], "time_agg_list": [139, 239, 565, 616], "idx": [139, 239, 285, 565, 616, 660, 807, 884], "arang": [139, 202, 212, 239, 565, 610, 616], "2i": [139, 239, 565, 616], "3i": [139, 239, 565, 616], "a_agg_list": [139, 239, 565, 616], "rollinggroupbi": [140, 239], "dynamic_groupbi": [140, 239, 566, 616], "groupby_dynam": [140, 239, 566, 616], "45": [140, 239, 332, 337, 440, 445, 566, 616, 714, 719, 826, 831], "48": [140, 239, 566, 616], "18": [140, 239, 332, 337, 341, 362, 375, 535, 566, 583, 616, 723], "19": [140, 153, 239, 332, 566, 571, 616, 714, 719], "43": [140, 239, 566, 616], "strptime": [140, 239, 335, 566, 616, 717], "2d": [140, 195, 239, 566, 616, 692], "sum_a": [140, 239, 566, 616], "min_a": [140, 239, 566, 616], "max_a": [140, 239, 566, 616], "to_list": [140, 239, 285, 566, 616, 660, 884], "seed": [141, 178, 239, 359, 422, 428, 535, 742, 803, 814, 884], "seed_1": [141, 239, 359, 535, 742, 884], "seed_2": [141, 239, 359, 535, 742, 884], "seed_3": [141, 239, 359, 535, 742, 884], "hash": [141, 239, 535, 884], "u64": [141, 239, 359, 407, 535, 583, 616, 742, 884], "10783150408545073287": [141, 239], "1438741209321515184": [141, 239], "10047419486152048166": [141, 239], "2047317070637311557": [141, 239], "grown": [144, 239], "baz": [145, 146, 168, 201, 222, 239, 456, 458, 569, 601, 616, 844], "intermedi": [146, 239, 569, 616, 745, 884], "linear": [146, 170, 223, 239, 266, 362, 388, 404, 416, 490, 491, 517, 535, 569, 584, 616, 641, 745, 785, 797, 884], "mask": [147, 149, 239, 267, 288, 364, 366, 374, 535, 642, 662, 737, 748, 751, 761, 782, 783, 806, 825, 875, 884], "equival": [150, 163, 239, 450, 763, 836, 848, 849, 884], "buffer_s": [151, 239], "500": [151, 239, 558, 616, 701, 703, 709, 715, 793, 794, 796, 884], "iter": [151, 176, 177, 199, 239, 307, 535, 683, 884], "veri": [151, 199, 239, 549, 616, 676, 884], "fit": [151, 184, 202, 239, 427, 535, 812, 813, 884], "speedup": [151, 239], "signific": [151, 239], "4x": [151, 239], "disabl": [151, 239], "form": [151, 177, 202, 239, 400, 535, 781, 884], "export": [151, 177, 239, 508], "materialis": [151, 176, 177, 239], "plan": [151, 153, 154, 239, 547, 552, 553, 563, 570, 571, 585, 592, 608, 616], "left_on": [152, 153, 239, 570, 571, 616], "right_on": [152, 153, 239, 570, 571, 616], "joinstrategi": [152, 239, 570, 616], "suffix": [152, 153, 210, 239, 291, 369, 371, 372, 373, 410, 443, 535, 570, 571, 606, 616, 665, 829], "_right": [152, 153, 239, 570, 571, 616], "outer": [152, 239, 570, 616], "semi": [152, 239, 570, 616], "anti": [152, 239, 570, 616, 806, 807, 884], "cross": [152, 239, 570, 616], "join_asof": [152, 239, 570, 616], "stringcach": [152, 239, 544], "other_df": [152, 239, 570, 616], "by_left": [153, 239, 571, 616], "by_right": [153, 239, 571, 616], "asofjoinstrategi": [153, 239, 571, 616], "allow_parallel": [153, 239, 570, 571, 616], "force_parallel": [153, 239, 570, 571, 616], "asof": [153, 239, 571, 616], "rather": [153, 239, 464, 571, 616, 850], "asof_join": [153, 239], "search": [153, 239, 571, 616], "last": [153, 168, 186, 189, 200, 225, 239, 261, 263, 271, 284, 307, 314, 330, 339, 458, 469, 525, 535, 571, 595, 598, 600, 612, 616, 634, 637, 646, 659, 683, 692, 712, 721, 844, 856, 884], "greater": [153, 239, 432, 458, 535, 571, 616, 818, 844, 884], "numer": [153, 239, 296, 297, 298, 408, 427, 535, 544, 571, 616, 673, 674, 675, 759, 805, 812, 884], "distanc": [153, 239, 571, 616], "gdp": [153, 239, 571, 616], "2016": [153, 239, 571, 616], "2017": [153, 239, 571, 616], "2018": [153, 239, 571, 616], "2019": [153, 239, 571, 616], "record": [153, 239, 571, 616], "jan": [153, 239, 571, 616], "1st": [153, 239, 571, 616], "4164": [153, 239, 571, 616], "4411": [153, 239, 571, 616], "4566": [153, 239, 571, 616], "4696": [153, 239, 571, 616], "popul": [153, 239, 571, 616], "12th": [153, 239, 571, 616], "82": [153, 239, 571, 616], "66": [153, 239, 571, 616, 797, 884], "83": [153, 239, 571, 616], "52": [153, 208, 239, 421, 535, 571, 605, 616], "request": [154, 239], "small": [154, 239, 332, 337, 434, 435, 535, 558, 616], "describe_plan": [154, 239, 616], "unoptim": [154, 239, 553, 616], "describe_optimized_plan": [154, 239, 553, 616], "show_graph": [154, 239, 616], "un": [154, 239], "graphviz": [154, 239, 592, 616], "advis": [154, 239], "thei": [154, 239, 348, 411, 535, 616, 792, 884], "axi": [156, 157, 159, 161, 188, 239, 579, 616], "null_strategi": [157, 188, 239], "nullstrategi": [157, 188, 239], "propag": [157, 188, 239, 396, 397, 535, 777, 778, 884], "spam": [157, 239], "id_var": [159, 239, 579, 616], "value_var": [159, 239, 579, 616], "variable_nam": [159, 239, 579, 616], "value_nam": [159, 239, 579, 616], "unpivot": [159, 239, 579, 616], "leav": [159, 239, 579, 616], "identifi": [159, 239, 579, 616], "massag": [159, 239, 579, 616], "measur": [159, 239, 579, 616], "merg": [160, 239, 580, 616], "caller": [160, 239, 285, 575, 580, 610, 616], "respons": [160, 239, 580, 616], "One": [163, 168, 239, 884], "what": [163, 239, 866, 874, 884], "struct": [163, 198, 201, 239, 285, 457, 458, 479, 494, 495, 496, 535, 601, 616, 660, 843, 844], "pack": [163, 239], "expr_unique_subset": [163, 239], "df_nuniqu": [163, 239], "df_agg_nuniqu": [163, 239], "simpl": [163, 239], "as_dict": [165, 239], "predict": [165, 168, 171, 203, 239], "k": [165, 239, 294, 376, 475, 535, 669, 764, 869, 884], "l": [165, 239, 356, 535], "pearson": [166, 239, 376, 432, 516, 535, 764, 818, 884], "correl": [166, 239, 516, 521], "coeffici": [166, 239, 432, 535, 818, 884], "corrcoef": [166, 239], "func": [167, 239, 582, 616, 625, 884], "offer": [167, 239, 582, 616], "wai": [167, 239, 582, 616], "recommend": [167, 239], "fulli": [167, 239], "advantag": [167, 239], "cast_str_to_int": [167, 239, 582, 616], "col_nam": [167, 239, 582, 616], "tdf": [167, 239, 582, 616], "aggregate_fn": [168, 239], "pivotagg": [168, 239], "sort_column": [168, 239], "well": [168, 239], "predefin": [168, 239], "transpos": [168, 222, 239], "discoveri": [168, 239], "interpol": [170, 223, 239, 353, 388, 404, 416, 517, 535, 584, 616, 785, 797, 884], "rollinginterpolationmethod": [170, 223, 239, 404, 416, 517, 535, 584, 616, 785, 797, 884], "midpoint": [170, 223, 239, 404, 416, 517, 535, 584, 616, 785, 797, 884], "subsequ": [171, 239], "pair": [172, 239, 586, 616], "old": [172, 239, 586, 616], "new_col": [173, 239], "val": [175, 239, 294, 474, 535, 587, 616, 669], "by_pred": [176, 239], "accord": [176, 239, 697], "iterrow": [176, 177, 239], "mutual": [176, 239], "exclus": [176, 239], "addition": [176, 239], "clariti": [176, 239], "suppli": [176, 239], "anyth": [176, 239], "toomanyrowsreturn": [176, 239, 544], "norowsreturn": [176, 239, 544], "inherit": [176, 239], "rowsexcept": [176, 239, 544], "frac": [178, 239, 345, 346, 347, 422, 432, 475, 535, 729, 730, 731, 803, 818, 869, 884], "with_replac": [178, 239, 422, 535, 803, 884], "shuffl": [178, 212, 239, 422, 535, 610, 803, 884], "modul": [178, 239, 422, 428, 534, 535, 803, 884], "whenthen": [180, 239, 589, 616], "whenthenthen": [180, 239, 589, 616], "shift_and_fil": [182, 239, 535, 616, 884], "shift": [183, 239, 268, 308, 400, 426, 490, 535, 591, 616, 643, 685, 781, 811, 884], "shrink": [184, 239, 427, 535, 812, 813, 884], "hold": [184, 239, 489], "nulls_last": [186, 239, 261, 263, 434, 535, 595, 616, 634, 637, 884], "ddof": [187, 204, 239, 437, 480, 516, 521, 522, 526, 535, 596, 602, 616, 822, 873, 884], "deviat": [187, 239, 346, 418, 437, 522, 535, 596, 616, 730, 822, 884], "degre": [187, 204, 239, 437, 480, 516, 521, 535, 822, 873, 884], "freedom": [187, 204, 239, 437, 480, 516, 521, 535, 822, 873, 884], "816497": [187, 239], "21": [188, 239, 505], "16a": [188, 239], "27b": [188, 239], "38c": [188, 239], "nth": [190, 239, 458, 471, 535, 599, 616, 844, 858, 884], "mostli": [191, 239, 354, 535], "categoricaltyp": [191, 239], "large_str": [191, 239], "as_seri": [192, 239], "fruit": [192, 239, 402, 410, 443, 459, 467, 535, 829, 845], "car": [192, 239, 402, 410, 467, 535], "beetl": [192, 239, 402, 410, 467, 535], "audi": [192, 239, 402, 410, 467, 535], "28": [192, 239, 341, 723], "300": [192, 239, 793, 794, 796, 884], "hot": [194, 239], "re": [195, 239, 508], "ll": [195, 239, 866, 884], "numpy_arrai": [195, 239], "date_as_object": [196, 239], "sent": [196, 239, 866, 884], "datetime64": [196, 239], "pandas_df": [196, 239], "three": [198, 239, 423, 523, 535], "four": [198, 239, 523], "five": [198, 239], "num": [198, 239, 363, 366, 464, 535], "include_head": [199, 239], "header_nam": [199, 239], "column_nam": [199, 239], "perhap": [199, 239], "column_2": [199, 239], "name_gener": [199, 239, 285, 660], "base_nam": [199, 239], "my_column_": [199, 239], "my_column_0": [199, 239], "my_column_1": [199, 239], "my_column_2": [199, 239], "uniquekeepstrategi": [200, 239, 600, 616], "conjunct": [200, 239], "decompos": [201, 239, 601, 616], "t_a": [201, 239, 601, 616], "t_b": [201, 239, 601, 616], "t_c": [201, 239, 601, 616], "t_d": [201, 239, 601, 616], "womp": [201, 239, 601, 616], "t_": [201, 239, 601, 616], "t_struct": [201, 239, 601, 616], "step": [202, 239, 485], "unstackdirect": [202, 239], "much": [202, 239, 307, 535, 683, 884], "pivot": [202, 239], "phase": [202, 239], "subject": [202, 239], "ascii_uppercas": [202, 239], "col1": [202, 239], "col2": [202, 239], "h": [202, 239, 356, 427, 535], "col1_0": [202, 239], "col1_1": [202, 239], "col1_2": [202, 239], "col2_0": [202, 239], "col2_1": [202, 239], "col2_2": [202, 239], "time_column": [203, 239], "frequenc": [203, 239], "forward_fil": [203, 239, 535], "06": [203, 239, 331, 343, 714, 722], "varianc": [204, 239, 347, 376, 420, 480, 526, 535, 602, 616, 731, 764, 801, 873, 884], "grow": [205, 239], "b_squar": [207, 239, 604, 616], "36": [207, 239, 604, 616], "named_expr": [208, 239, 605, 616], "is_not": [208, 239, 535, 605, 616], "opt": [208, 239, 605, 616], "with_columns_kwarg": [208, 239, 605, 616], "row_nr": [209, 239, 607, 616, 807, 884], "complet": [210, 866, 884], "idiomat": 210, "_sum": 210, "_tail_sum": 210, "bar_sum": 210, "bar_tail_sum": 210, "sub": [212, 291, 292, 443, 459, 665, 666, 829, 845], "triangl": [212, 610], "group_df": [212, 610], "nr": [215, 225, 611, 612], "maxim": [217, 229, 259, 535, 632, 884], "833333": 218, "minim": [220, 232, 260, 265, 427, 535, 633, 640, 772, 812, 884], "pivot_column": 222, "values_column": 222, "pivotop": 222, "favour": 222, "larg": [222, 434, 435, 535], "overview": [239, 535, 544, 616, 884], "public": [239, 535, 544, 616, 884], "columnstyp": 239, "variou": [239, 535, 616, 884], "behavior": [239, 252, 484, 511, 514, 535], "mydatafram": 239, "notic": [239, 884], "initi": [239, 494, 503], "df4": 239, "drop_in_plac": 239, "drop_nul": [239, 310, 535, 616, 884], "estimated_s": [239, 884], "explod": [239, 356, 535, 616, 884], "find_idx_by_nam": 239, "frame_equ": [239, 332, 337], "get_column": [239, 524], "groupby_rol": [239, 412, 413, 414, 415, 416, 418, 419, 420, 535, 565, 616], "hash_row": 239, "hstack": 239, "insert_at_idx": 239, "is_dupl": [239, 535, 884], "is_empti": [239, 884], "is_uniqu": [239, 535, 884], "melt": [239, 616], "merge_sort": [239, 616], "n_uniqu": [239, 535, 609, 884], "partition_bi": 239, "pearson_corr": 239, "pipe": [239, 616], "quantil": [239, 416, 535, 616, 797, 884], "replace_at_idx": 239, "shrink_to_fit": [239, 884], "take_everi": [239, 535, 616, 884], "to_arrow": [239, 884], "to_dict": 239, "to_numpi": [239, 384, 535, 884], "to_panda": [239, 884], "to_struct": [239, 465, 466], "unnest": [239, 457, 458, 616, 843, 844], "unstack": 239, "upsampl": 239, "var": [239, 535, 616, 884], "write_avro": 239, "write_ipc": 239, "write_json": [239, 585, 616], "write_parquet": 239, "favor": 242, "futur": 242, "94": [247, 535], "confus": [249, 369, 371, 535], "tt": [249, 535], "tf": [249, 250, 535], "ff": [249, 250, 535], "upcast": [251, 535], "assum": [252, 535, 575, 610, 616], "a_times_2": [252, 535], "invers": [253, 254, 255, 256, 257, 258, 535, 626, 627, 628, 629, 630, 631, 884], "cosin": [253, 254, 299, 300, 384, 535, 626, 627, 677, 678, 884], "570796": [253, 255, 535, 626, 628, 884], "hyperbol": [254, 256, 258, 300, 431, 473, 535, 627, 629, 631, 678, 817, 860, 884], "sine": [255, 256, 384, 430, 431, 535, 628, 629, 816, 817, 884], "881374": [256, 535, 629, 884], "tangent": [257, 258, 472, 473, 535, 630, 631, 859, 860, 884], "785398": [257, 535, 630, 884], "would": [261, 263, 271, 389, 405, 486, 535, 634, 637, 646, 786, 866, 884], "arg_sort": [263, 535, 637, 884], "sublist": [264, 265, 267, 268, 270, 271, 272, 273, 274, 281, 284, 639, 640, 642, 643, 645, 646, 647, 648, 649, 656, 659, 753, 884], "membership": [267, 642], "null_behavior": [268, 308, 535, 643, 685, 884], "nullbehavior": [268, 308, 535, 643, 685, 884], "th": [268, 308, 432, 535, 643, 685, 818, 884], "against": [269, 616, 644, 890], "blindli": [269, 644], "worth": [269, 644], "enough": [269, 432, 535, 644, 818, 884], "concat_list": [269, 500, 644], "rank": [269, 500, 521, 535, 644, 884], "taken": [281, 455, 470, 535, 656, 841], "n_field_strategi": [285, 660], "tostructstrategi": [285, 660], "first_non_nul": [285, 660], "max_width": [285, 660], "field_0": [285, 660], "field_1": [285, 660], "field_n": [285, 660], "know": [285, 450, 836, 866, 874, 884], "incorrectli": 285, "downstream": [285, 424, 535, 808, 884], "advic": 285, "col_name_": [285, 660], "col_name_0": [285, 660], "col_name_1": [285, 660], "col_name_2": [285, 660], "substr": [288, 291, 292, 439, 443, 451, 452, 456, 457, 458, 459, 662, 665, 666, 825, 829, 837, 838, 842, 843, 844, 845], "transferencod": [289, 290, 441, 442, 663, 664, 827, 828], "hex": [289, 290, 441, 442, 663, 664, 827, 828], "base64": [289, 290, 441, 442, 663, 664, 827, 828], "prefix": [292, 459, 464, 535, 666, 845, 850], "strict": [293, 461, 535, 667, 805, 847, 884], "throw": [293, 446, 535, 667, 832, 884], "due": [293, 535, 667, 884], "overflow": [293, 305, 306, 468, 535, 667, 681, 682, 855, 884], "categoricalord": [294, 669], "lexic": [294, 669], "min_val": [296, 298, 535, 673, 675, 884], "max_val": [296, 297, 535, 673, 674, 884], "foo_clip": [296, 297, 298, 535], "clip": [297, 298, 535, 674, 675, 884], "543081": [300, 535, 678, 884], "cumul": [302, 303, 304, 305, 306, 494, 495, 496, 535, 679, 680, 681, 682, 884], "a_revers": [302, 303, 304, 305, 306, 385, 410, 467, 535], "uint16": [305, 306, 468, 535, 681, 682, 855, 884], "prevent": [305, 306, 375, 468, 535, 681, 682, 855, 884], "min_period": [307, 345, 346, 347, 411, 412, 413, 414, 415, 416, 418, 419, 420, 535, 683, 729, 730, 731, 792, 793, 794, 795, 796, 797, 799, 800, 801, 884], "slide": [307, 535, 683, 884], "anoth": [307, 312, 338, 435, 535, 606, 616, 625, 683, 690, 720, 805, 884], "realli": [307, 535, 683, 884], "complex": [307, 475, 535, 683, 869, 884], "visit": [307, 535, 683, 884], "44": [309, 535], "drop_nan": [311, 535, 884], "tu": [312, 316, 336, 341, 690, 691, 694, 718, 723], "lose": [312, 690], "2001": [312, 314, 316, 317, 324, 326, 329, 330, 331, 332, 333, 336, 337, 339, 340, 341, 343, 461, 690, 692, 694, 695, 698, 699, 700, 701, 703, 705, 706, 708, 709, 711, 712, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 847], "tu_m": [312, 690], "tu_n": [312, 690], "tz": [313, 338, 342, 691, 720, 724], "with_time_zon": [313, 691], "timestamp": [313, 505, 691], "extract": [314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 339, 340, 343, 445, 446, 692, 693, 695, 696, 697, 701, 702, 703, 704, 706, 707, 708, 709, 710, 712, 713, 715, 716, 721, 722, 725, 831, 832], "weekdai": [314, 330], "day_of_month": [314, 330, 340], "ordinal_dai": [314, 340], "day_of_year": [314, 330, 340], "diff": [315, 318, 321, 323, 325, 328, 334, 535, 693, 696, 702, 704, 707, 710, 716, 884], "days_diff": 315, "epochtimeunit": [316, 694], "unix": [316, 505, 694], "epoch_n": [316, 694], "epoch_": [316, 694], "978307200000000": [316, 336, 694, 718], "978307200": [316, 694], "978393600000000": [316, 336, 694, 718], "978393600": [316, 694], "978480000000000": [316, 336, 694, 718], "978480000": [316, 694], "hours_diff": 318, "iso": [319, 339, 340, 697, 721, 722], "correspond": [319, 405, 535, 697, 786, 884], "microseconds_diff": 321, "1001": [321, 323, 328], "002": [321, 323, 328, 499, 702, 704, 710], "003": [321, 323, 328], "997": [321, 323, 328], "998": [321, 323, 328], "999": [321, 323, 328], "milliseconds_diff": 323, "59": [324, 333, 498, 706, 715], "minutes_diff": 325, "1440": [325, 707], "nanoseconds_diff": 328, "1000000": [328, 464, 710], "leap": [329, 711], "account": [329, 345, 346, 347, 535, 711, 729, 730, 731, 884], "minu": [329, 711], "dictat": [329, 711], "2000": [329, 711], "2005": [329, 711], "date_plus_1i": [329, 711], "1y2mo": [329, 711], "date_min": 329, "1998": [329, 711], "2002": [329, 331, 343, 711, 725], "1999": [329, 711], "2003": [329, 505, 711], "2004": [329, 711], "2006": [329, 711], "ordin": [330, 405, 535, 712, 786, 884], "366": [330, 712], "180": [331, 343], "half": [332, 345, 346, 347, 535, 714, 729, 730, 731, 884], "seconod": [332, 714], "eg": [332, 337, 461], "225": [332, 337], "to_fram": [332, 337, 461, 465, 466, 806, 807, 843, 844, 847, 884], "10m": [332, 337, 714, 719], "milli": [333, 715], "micro": [333, 715], "compon": [333, 461, 497, 498, 499, 715], "456789": 333, "654321": 333, "111110": 333, "765431": 333, "sec": 333, "11111": 333, "seconds_diff": 334, "fmt": [335, 361, 461, 504, 535, 568, 616, 717, 847], "timestamp_n": [336, 718], "timestamp_m": 336, "978307200000": 336, "978393600000": 336, "978480000000": 336, "naiv": [338, 720], "53": [339, 721], "sundai": [340, 722], "incorrect": [341, 424, 535, 610, 723, 808, 884], "tu_u": [341, 723], "32971": [341, 723], "32974": [341, 723], "32976": [341, 723], "europ": [342, 691, 724], "london": [342, 691, 724], "gmt": [342, 691, 724], "bst": [342, 691, 724], "718281828459045": [344, 381, 535, 727, 767, 884], "formula": [344, 535, 727, 884], "pk": [344, 535, 727, 884], "459148": [344, 535], "754888": [344, 535], "span": [345, 346, 347, 535, 729, 730, 731, 884], "half_lif": [345, 346, 347, 535, 729, 730, 731, 884], "exponenti": [345, 346, 347, 349, 535, 729, 730, 731, 732, 884], "weight": [345, 346, 347, 411, 412, 413, 414, 415, 416, 418, 419, 420, 432, 535, 729, 730, 731, 792, 793, 794, 795, 796, 797, 799, 800, 801, 818, 884], "averag": [345, 405, 535, 729, 786, 884], "decai": [345, 346, 347, 535, 729, 730, 731, 884], "term": [345, 346, 347, 447, 450, 535, 729, 730, 731, 833, 836, 884], "mass": [345, 346, 347, 535, 729, 730, 731, 884], "gamma": [345, 346, 347, 535, 729, 730, 731, 884], "foral": [345, 346, 347, 535, 729, 730, 731, 884], "geq": [345, 346, 347, 535, 729, 730, 731, 884], "theta": [345, 346, 347, 535, 729, 730, 731, 884], "life": [345, 346, 347, 535, 729, 730, 731, 884], "exp": [345, 346, 347, 535, 729, 730, 731, 884], "ln": [345, 346, 347, 535, 729, 730, 731, 884], "smooth": [345, 346, 347, 535, 729, 730, 731, 884], "factor": [345, 346, 347, 474, 535, 729, 730, 731, 868, 884], "leq": [345, 346, 347, 535, 729, 730, 731, 884], "begin": [345, 346, 347, 444, 535, 729, 730, 731, 830, 884], "imbal": [345, 346, 347, 535, 729, 730, 731, 884], "ew": [345, 346, 347, 535, 729, 730, 731, 884], "w_i": [345, 346, 347, 535, 729, 730, 731, 884], "recurs": [345, 346, 347, 535, 729, 730, 731, 884], "y_0": [345, 346, 347, 535, 729, 730, 731, 884], "x_0": [345, 346, 347, 535, 729, 730, 731, 884], "y_t": [345, 346, 347, 535, 729, 730, 731, 884], "y_": [345, 346, 347, 535, 729, 730, 731, 884], "x_t": [345, 346, 347, 535, 729, 730, 731, 884], "observ": [345, 346, 347, 535, 729, 730, 731, 884], "428571": [345, 535], "bia": [346, 347, 376, 417, 432, 535, 730, 731, 764, 798, 818, 884], "unbias": [346, 347, 535, 730, 731, 884], "963624": [346, 535, 730, 884], "928571": [347, 535, 731, 884], "wildcard": [348, 482, 489, 494, 495, 501, 503, 518, 535], "regex": [348, 439, 440, 443, 444, 445, 451, 452, 459, 489, 501, 535, 825, 826, 829, 830, 831, 837, 838, 845], "aa": [348, 501, 535], "ba": [348, 501, 535], "cc": [348, 501, 535], "718282": [349, 535], "389056": [349, 535], "54": [349, 535], "59815": [349, 535], "expand": [350, 356, 408, 535, 733, 884], "group_col": [354, 481, 535], "g1": [354, 399, 481, 535], "g2": [354, 399, 481, 535], "lt": [354, 481, 535], "gte": [354, 481, 535], "r": [356, 440, 444, 445, 451, 535, 826, 830, 831, 837], "word": [356, 535], "9774092659964970114": [359, 535], "13614470193936745724": [359, 535], "1101441246220388612": [359, 535], "11638928888656214026": [359, 535], "13382926553367784577": [359, 535], "cumsum": [361, 535, 568, 616, 884], "interpolationmethod": [362, 535, 745, 884], "regrid": [362, 535], "grid": [362, 535], "df_original_grid": [362, 535], "grid_point": [362, 535], "df_new_grid": [362, 535], "include_bound": [363, 535], "primit": [363, 367, 535, 866, 884], "finit": [365, 521, 535, 750, 884], "optional_memb": [367, 535, 753, 884], "infinit": [368, 535, 754, 884], "_isnan": [369, 535], "b_isnan": [369, 535], "negat": [370, 535], "_is_not_nan": [371, 535], "b_is_not_nan": [371, 535], "_not_nul": [372, 535], "a_not_nul": [372, 535], "b_not_nul": [372, 535], "_isnul": [373, 535], "a_isnul": [373, 535], "b_isnul": [373, 535], "undo": [375, 392, 535], "duplicateerror": [375, 535, 544], "occurr": [375, 535], "333333": [375, 420, 535, 781, 801, 884], "fisher": [376, 432, 535, 764, 818, 884], "fourth": [376, 535, 764, 884], "central": [376, 432, 535, 764, 818, 884], "definit": [376, 535, 764, 884], "subtract": [376, 535, 764, 884], "distribut": [376, 432, 535, 764, 818, 884], "elimin": [376, 535, 764, 884], "come": [376, 535, 545, 615, 764, 884], "bias": [376, 432, 535, 764, 818, 884], "scipi": [376, 432, 535, 764, 818, 884], "stat": [376, 432, 535, 764, 818, 884], "153061": [376, 535], "logarithm": [381, 382, 535, 767, 768, 884], "584963": [381, 535], "30103": [382, 535], "60206": [382, 535], "lowest": [383, 535], "9223372036854775808": [383, 535], "agg_list": [384, 535], "elementwis": [384, 411, 412, 413, 414, 415, 416, 418, 419, 420, 482, 483, 535, 792, 793, 794, 795, 796, 797, 799, 800, 801, 884], "third": [384, 535], "parti": [384, 535], "book": [384, 535], "argmax": [384, 535], "_revers": [385, 410, 467, 535], "b_revers": [385, 410, 467, 535], "computeerror": [389, 544], "keep_nam": [392, 535], "poison": [396, 397, 535, 777, 778, 884], "nanmax": [396, 397, 535, 777, 778, 884], "wherea": [396, 397, 535, 567, 574, 616, 777, 778, 884], "subgroup": [399, 535], "postgr": [399, 535], "max_by_group": [399, 535], "recent": [400, 535, 781, 884], "percent": [400, 535, 781, 884], "090909": [400, 535], "expon": [401, 535], "power": [401, 535], "reverse_": [402, 535], "reverse_a": [402, 535], "reverse_fruit": [402, 535], "reverse_b": [402, 535], "reverse_car": [402, 535], "rankmethod": [405, 535, 786, 884], "ti": [405, 535, 786, 884], "appropri": [405, 535, 786, 884], "competit": [405, 535, 786, 884], "highest": [405, 478, 521, 535, 786, 884], "immedi": [405, 523, 535, 786, 884], "64bit": [407, 535, 788, 884], "safe": [407, 535, 788, 866, 884], "coerc": [408, 535], "dim": [409, 535, 790, 884], "flat": [409, 535, 790, 884], "fruits_revers": [410, 467, 535], "cars_revers": [410, 467, 535], "window_s": [411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 535, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 884], "rolling_min": [411, 535, 792, 884], "rolling_max": [411, 535, 792, 884], "rolling_mean": [411, 535, 792, 884], "rolling_sum": [411, 535, 792, 884], "multipli": [411, 412, 413, 414, 415, 416, 418, 419, 420, 535, 792, 793, 794, 795, 796, 797, 799, 800, 801, 884], "358899": [411, 535], "041452": [411, 535], "567764": [411, 535], "travers": [412, 413, 415, 418, 419, 420, 535, 793, 794, 796, 799, 800, 801, 884], "vector": [412, 413, 415, 418, 419, 420, 535, 793, 794, 796, 799, 800, 801, 884], "5h": [412, 413, 414, 415, 416, 418, 419, 420, 535], "33": [416, 421, 489, 535, 797, 884], "skew": [417, 535, 798, 884], "527525": [418, 535, 799, 884], "digit": [421, 464, 535, 802, 826, 850, 884], "17": [421, 505, 535, 677, 714, 884], "maintain": [423, 476, 535, 593, 616, 804, 870, 884], "six": [423, 535], "code": [424, 535, 573, 616, 808, 884], "care": [424, 535, 808, 884], "extrema": [427, 535, 812, 884], "112": [427, 535], "129": [427, 535], "i8": [427, 535, 791, 884], "8589934592": [427, 535], "1073741824": [427, 535], "content": [428, 479, 535, 814, 884], "175201": [431, 535, 817, 884], "unimod": [432, 535, 818, 884], "skewtest": [432, 535, 818, 884], "speak": [432, 535, 818, 884], "g_1": [432, 535, 818, 884], "m_3": [432, 535, 818, 884], "m_2": [432, 535, 818, 884], "m_i": [432, 535, 818, 884], "sum_": [432, 535, 818, 884], "texttt": [432, 535, 818, 884], "k_3": [432, 535, 818, 884], "k_2": [432, 535, 818, 884], "sqrt": [432, 535, 818, 884], "343622": [432, 535], "larger": [434, 521, 535, 593, 616], "414214": [436, 535, 821, 884], "treat": [439, 451, 452, 825, 837, 838], "ends_with": [439, 459, 845], "crab": [439, 825], "dog": [439, 462, 463, 491, 825], "rab": [439, 825], "success": [440, 445, 826, 831], "overlap": [440, 445, 826, 831], "captur": [440, 444, 445, 826, 830, 831], "123": [440, 445, 452, 826, 831, 838, 864, 884], "bla": [440, 445, 826, 831], "asd": [440, 445, 826, 831], "678": [440, 445, 826, 831], "910t": [440, 445, 826, 831], "count_digit": 440, "666f6f": [442, 828], "626172": [442, 828], "mango": [443, 459, 829, 845], "go": [443, 829], "has_suffix": 443, "group_index": [444, 830], "vote": [444, 830], "ballon_dor": [444, 830], "candid": [444, 830], "messi": [444, 830], "ref": [444, 830], "candidat": [444, 830], "jorginho": [444, 830], "ronaldo": [444, 830], "w": [444, 830], "extracted_nr": 445, "910": [445, 831], "json_path": [446, 832], "jsonpath": [446, 832], "regardless": [446, 832], "json_val": [446, 832], "n_char": [447, 833], "caf\u00e9": [447, 450, 833, 836], "345": [447, 450, 833, 836], "\u6771\u4eac": [447, 450, 833, 836], "nchar": [447, 450], "fillchar": [448, 453, 834, 839], "justifi": [448, 453, 834, 839], "pad": [448, 453, 464, 834, 839, 850], "cow": [448, 453, 834, 839], "monkei": [448, 453, 834, 839], "hippopotamu": [448, 453, 834, 839], "strip": [449, 454, 835, 840], "whitespac": [449, 454, 460, 835, 840, 846], "tworld": [449, 460, 835, 846], "wod": [449, 454, 835, 840], "rld": [449, 835], "text": [450, 451, 452, 836], "replace_al": [451, 837], "123abc": [451, 837], "abc456": [451, 837], "abcabc": [452, 838], "123a123": [452, 838], "bc": [452, 838], "trail": [454, 460, 840, 846], "worl": [454, 460, 840, 846], "subslic": [455, 841], "pear": [455, 841], "papaya": [455, 841], "dragonfruit": [455, 841], "s_slice": 455, "ear": [455, 841], "aya": [455, 841], "uit": [455, 841], "ya": [455, 841], "onf": [455, 841], "inclus": [456, 457, 842, 843], "a_1": [457, 843, 863, 884], "d_4": [457, 843], "rename_field": [457, 458, 843, 844], "first_part": [457, 458, 843, 844], "second_part": [457, 458, 843, 844], "remaind": [458, 844], "app": [459, 845], "has_prefix": 459, "polarstemporaltyp": [461, 847], "tz_awar": [461, 847], "strftime": [461, 847], "convers": [461, 544, 847, 865, 866, 884], "anywher": [461, 847], "3f": 461, "sun": [461, 847], "34": [461, 847], "lowercas": [462, 848], "variant": [462, 463], "uppercas": [463, 849], "10000": 464, "100000": 464, "0010": 464, "0001": 464, "00000": 464, "00001": 464, "my_struct": [465, 466, 523], "NOT": [466, 564, 616], "anymor": 466, "panicexcept": [466, 544], "761594": [473, 535, 860, 884], "replic": [474, 535, 868, 884], "vals_phys": [474, 535], "largest": [475, 535, 869, 884], "smallest": [475, 535, 869, 884], "bottom_k": [475, 535], "appear": [477, 535, 871, 884], "value_count": [477, 535, 884], "9223372036854775807": [478, 535], "multithread": [479, 535], "columnwis": [482, 483], "AND": 482, "bitwis": [482, 483], "returns_scalar": 484, "Be": 485, "argsort": [486, 535, 884], "hamburg": 489, "concat": [490, 491, 671, 774, 884], "lag": 490, "mimic": 490, "a_lag_": 490, "a_rol": 490, "plai": 491, "swim": 491, "walk": 491, "full_sent": 491, "covari": 493, "intoexpr": [494, 503], "include_init": 494, "accumul": [494, 495, 503, 518], "fn": [494, 495, 503, 518], "new_valu": [494, 495, 503, 518], "simpli": [494, 503], "cumreduc": 494, "across": [496, 524], "syntact": [496, 501, 502, 506, 517, 520, 524, 821, 884], "sugar": [496, 501, 502, 506, 517, 520, 524, 821, 884], "cumfold": 496, "999999": 498, "add_week": 499, "add_dai": 499, "add_second": 499, "add_millisecond": 499, "add_hour": 499, "add_millisec": 499, "ond": 499, "eval": 500, "arr": [500, 528, 866, 876, 884], "mathemat": 500, "a_b_doubl": 500, "fstring": 504, "placehold": 504, "hello_": 504, "_world": 504, "foo_": 504, "_bar_": 504, "foo_a_bar_1": 504, "foo_b_bar_2": 504, "foo_c_bar_3": 504, "epoch": [505, 691], "timestep": 505, "1666683077": 505, "1666683099": 505, "39": 505, "12345": [505, 670, 739, 802, 884], "12346": 505, "agg_group": [506, 535], "allow_object": 509, "valueexcept": 509, "544705": 516, "mode": [519, 535, 884], "propagate_nan": 521, "spearman": 521, "605551": 522, "605551275463989": 522, "sever": 523, "a_and_b": 523, "isn": 527, "thens": 527, "chain": 527, "sometim": 534, "ab": [535, 884], "arcco": [535, 884], "arccosh": [535, 884], "arcsin": [535, 884], "arcsinh": [535, 884], "arctan": [535, 884], "arctanh": [535, 884], "arg_max": [535, 884], "arg_min": [535, 884], "arg_uniqu": [535, 884], "backward_fil": 535, "clip_max": [535, 884], "clip_min": [535, 884], "co": [535, 884], "cosh": [535, 884], "cumcount": 535, "cummax": [535, 884], "cummin": [535, 884], "cumprod": [535, 884], "cumulative_ev": [535, 884], "entropi": [535, 884], "ewm_mean": [535, 884], "ewm_std": [535, 884], "ewm_var": [535, 884], "extend_const": [535, 884], "flatten": 535, "inspect": [535, 616], "is_between": 535, "is_finit": [535, 884], "is_first": [535, 884], "is_in": [535, 884], "is_infinit": [535, 884], "is_nan": [535, 884], "is_not_nan": [535, 884], "is_not_nul": [535, 884], "kurtosi": [535, 884], "log10": [535, 884], "map_alia": 535, "nan_max": [535, 884], "nan_min": [535, 884], "pct_chang": [535, 884], "pow": 535, "reinterpret": [535, 884], "repeat_bi": 535, "reshap": [535, 884], "rolling_appli": [535, 884], "rolling_median": [535, 884], "rolling_quantil": [535, 884], "rolling_skew": [535, 884], "rolling_std": [535, 884], "rolling_var": [535, 884], "search_sort": [535, 884], "set_sort": [535, 884], "shrink_dtyp": [535, 884], "sin": [535, 884], "sinh": [535, 884], "sort_bi": 535, "tan": [535, 884], "tanh": [535, 884], "to_phys": [535, 884], "top_k": [535, 884], "unique_count": [535, 884], "expos": 544, "registr": 544, "miscellan": 544, "unset": 544, "arrowerror": 544, "invalidoperationerror": 544, "nodataerror": 544, "notfounderror": 544, "schemaerror": 544, "shapeerror": 544, "build_info": 544, "show_vers": 544, "sqlcontext": [544, 890], "hit": [547, 616], "node": [547, 568, 575, 583, 616], "huge": [550, 616], "saver": [550, 616], "purpos": [558, 616], "help": [558, 616], "influenc": [558, 575, 616], "read_json": [563, 608, 616], "lazygroupbi": [564, 565, 566, 616], "typeerror": [564, 616], "subscript": [564, 616], "validate_output_schema": [575, 616], "past": [575, 616], "paramount": [575, 616], "hard": [575, 616], "bug": [575, 610, 616], "invari": [575, 616], "upheld": [575, 616], "prune": [575, 616], "show_plot": [583, 616], "truncate_nod": [583, 616], "figsiz": [583, 592, 616], "gantt": [583, 616], "chart": [583, 616], "matplotlib": [583, 592, 616], "plot": [583, 592, 616], "groupby_partit": [583, 616], "470": [583, 616], "475": [583, 616], "1964": [583, 616], "from_json": [585, 616], "output_path": [592, 616], "raw_output": [592, 616], "figur": [592, 616], "data_pagesize_limit": [593, 616], "persist": [593, 616], "ram": [593, 616], "slightli": [593, 616], "my_larger_than_ram_fil": [593, 616], "tmp": [593, 616], "290994": [596, 616], "118034": [596, 616], "433013": [596, 616], "1875": [602, 616], "extern": [606, 616], "df_a": [606, 616], "df_other": [606, 616], "afoo": [606, 616], "cfoo": [606, 616], "train_df": [606, 616], "feature_0": [606, 616], "feature_1": [606, 616], "test_df": [606, 616], "_train": [606, 616], "feature_0_train": [606, 616], "dataframescan": [608, 616], "output_schema": [608, 616], "unique_nam": 609, "instanti": 616, "profil": 616, "sink_parquet": 616, "with_context": 616, "sr": [621, 884], "new_aliased_sr": [621, 884], "append_chunk": [624, 884], "super": [624, 884], "skip_nul": [625, 884], "141593": [626, 884], "292432": [627, 884], "549306": [631, 884], "listnamespac": 638, "catnamespac": 668, "56789": [670, 739, 802, 884], "901234": [670, 739, 802, 884], "pi": [677, 816, 859, 884], "1232e": [677, 884], "quick": [684, 884], "mix": [684, 884], "series_num": [684, 884], "581139": [684, 884], "series_str": [684, 884], "datetimenamespac": 689, "1583020800": 691, "1585699200": 691, "1588291200": 691, "nyc": 691, "edt": 691, "1583038800": 691, "1585717200": 691, "1588309200": 691, "500m": [701, 703, 709, 715], "500000": 701, "2m": 706, "500000000": 709, "date_minus_1y_2mon": 711, "165": [714, 719], "series_equ": [714, 719, 884], "timestamp_u": 718, "978307200000000000": 718, "978393600000000000": 718, "978480000000000000": 718, "005": [727, 884], "06293300616044681": [727, 884], "65": [727, 884], "8568409950394724": [727, 884], "4000000": [728, 884], "814697265625": [728, 884], "bitmask": [741, 884], "swiftli": [741, 884], "10734580197236529959": [742, 884], "3022416320763508302": [742, 884], "13756996518000038261": [742, 884], "datelik": [747, 884], "166667": [781, 884], "142857": [781, 884], "512": [781, 884], "peak": [782, 783, 884], "nanstd": [792, 884], "858612": [792, 884], "200": [793, 794, 796, 884], "400": [793, 794, 796, 884], "150": [794, 884], "250": [794, 884], "350": [794, 884], "450": [794, 884], "381802": [798, 884], "dev": [799, 884], "57": [802, 884], "frequent": [806, 807, 884], "mutat": [807, 884], "2246e": [816, 859, 884], "divisor": [822, 873, 884], "stringnamespac": 823, "6331e16": [859, 884], "int64arrai": [862, 884], "a_2": [863, 884], "a_3": [863, 884], "456": [864, 884], "zero_copy_onli": [866, 884], "writabl": [866, 884], "view": [866, 884], "presenc": [866, 884], "immut": [866, 884], "made": [866, 884], "ignore_nul": [874, 884], "seriesview": [874, 884], "arraylik": 884, "nan_to_nul": 884, "dtype_if_empti": 884, "position": 884, "posit": 884, "scenario": 884, "through": 884, "arg_tru": 884, "chunk_length": 884, "get_chunk": 884, "has_valid": 884, "is_boolean": 884, "is_datelik": 884, "is_float": 884, "is_numer": 884, "is_sort": 884, "is_utf8": 884, "new_from_index": 884, "peak_max": 884, "peak_min": 884, "set_at_idx": 884, "readthedoc": 891}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [29, 0, 1, "", "DataType"], [30, 0, 1, "", "Date"], [31, 0, 1, "", "Datetime"], [32, 0, 1, "", "Duration"], [33, 0, 1, "", "Float32"], [34, 0, 1, "", "Float64"], [35, 0, 1, "", "Int16"], [36, 0, 1, "", "Int32"], [37, 0, 1, "", "Int64"], [38, 0, 1, "", "Int8"], [39, 0, 1, "", "List"], [40, 0, 1, "", "Null"], [41, 0, 1, "", "Object"], [890, 0, 1, "", "SQLContext"], [45, 0, 1, "", "StringCache"], [46, 0, 1, "", "Struct"], [47, 0, 1, "", "Time"], [48, 0, 1, "", "UInt16"], [49, 0, 1, "", "UInt32"], [50, 0, 1, "", "UInt64"], [51, 0, 1, "", "UInt8"], [52, 0, 1, "", "Unknown"], [53, 0, 1, "", "Utf8"], [54, 4, 1, "", "align_frames"], [482, 4, 1, "", "all"], [483, 4, 1, "", "any"], [484, 4, 1, "", "apply"], [485, 4, 1, "", "arange"], [59, 4, 1, "", "arg_where"], [486, 4, 1, "", "argsort_by"], [487, 4, 1, "", "avg"], [60, 4, 1, "", "build_info"], [488, 4, 1, "", "coalesce"], [489, 4, 1, "", "col"], [61, 4, 1, "", "collect_all"], [62, 4, 1, "", "concat"], [490, 4, 1, "", "concat_list"], [491, 4, 1, "", "concat_str"], [492, 4, 1, "", "count"], [493, 4, 1, "", "cov"], [494, 4, 1, "", "cumfold"], [495, 4, 1, "", "cumreduce"], [496, 4, 1, "", "cumsum"], [63, 4, 1, "", "cut"], [497, 4, 1, "", "date"], [64, 4, 1, "", "date_range"], [498, 4, 1, "", "datetime"], [499, 4, 1, "", "duration"], [500, 4, 1, "", "element"], [501, 4, 1, "", "exclude"], [502, 4, 1, "", "first"], [503, 4, 1, "", "fold"], [504, 4, 1, "", "format"], [77, 4, 1, "", "from_arrow"], [78, 4, 1, "", "from_dict"], [79, 4, 1, "", "from_dicts"], [505, 4, 1, "", "from_epoch"], [80, 4, 1, "", "from_numpy"], [81, 4, 1, "", "from_pandas"], [82, 4, 1, "", "from_records"], [83, 4, 1, "", "get_dummies"], [84, 4, 1, "", "get_idx_type"], [506, 4, 1, "", "groups"], [507, 4, 1, "", "head"], [508, 4, 1, "", "list"], [509, 4, 1, "", "lit"], [510, 4, 1, "", "map"], [511, 4, 1, "", "max"], [512, 4, 1, "", "mean"], [513, 4, 1, "", "median"], [514, 4, 1, "", "min"], [515, 4, 1, "", "n_unique"], [86, 4, 1, "", "ones"], [516, 4, 1, "", "pearson_corr"], [517, 4, 1, "", "quantile"], [87, 4, 1, "", "read_avro"], [88, 4, 1, "", "read_csv"], [89, 4, 1, "", "read_csv_batched"], [90, 4, 1, "", "read_delta"], [91, 4, 1, "", "read_excel"], [92, 4, 1, "", "read_ipc"], [93, 4, 1, "", "read_ipc_schema"], [94, 4, 1, "", "read_json"], [95, 4, 1, "", "read_ndjson"], [96, 4, 1, "", "read_parquet"], [97, 4, 1, "", "read_parquet_schema"], [98, 4, 1, "", "read_sql"], [518, 4, 1, "", "reduce"], [519, 4, 1, "", "repeat"], [99, 4, 1, "", "scan_csv"], [100, 4, 1, "", "scan_delta"], [101, 4, 1, "", "scan_ds"], [102, 4, 1, "", "scan_ipc"], [103, 4, 1, "", "scan_ndjson"], [104, 4, 1, "", "scan_parquet"], [520, 4, 1, "", "select"], [105, 4, 1, "", "show_versions"], [521, 4, 1, "", "spearman_rank_corr"], [522, 4, 1, "", "std"], [523, 4, 1, "", "struct"], [524, 4, 1, "", "sum"], [525, 4, 1, "", "tail"], [112, 4, 1, "", "threadpool_size"], [113, 4, 1, "", "toggle_string_cache"], [526, 4, 1, "", "var"], [527, 4, 1, "", "when"], [114, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "load"], [6, 1, 1, "", "restore_defaults"], [7, 1, 1, "", "save"], [8, 1, 1, "", "set_ascii_tables"], [9, 1, 1, "", "set_fmt_str_lengths"], [10, 1, 1, "", "set_tbl_cell_alignment"], [11, 1, 1, "", "set_tbl_cols"], [12, 1, 1, "", "set_tbl_column_data_type_inline"], [13, 1, 1, "", "set_tbl_dataframe_shape_below"], [14, 1, 1, "", "set_tbl_formatting"], [15, 1, 1, "", "set_tbl_hide_column_data_types"], [16, 1, 1, "", "set_tbl_hide_column_names"], [17, 1, 1, "", "set_tbl_hide_dataframe_shape"], [18, 1, 1, "", "set_tbl_hide_dtype_separator"], [19, 1, 1, "", "set_tbl_rows"], [20, 1, 1, "", "set_tbl_width_chars"], [21, 1, 1, "", "set_verbose"], [22, 1, 1, "", "state"]], "polars.DataFrame": [[117, 1, 1, "", "apply"], [118, 1, 1, "", "cleared"], [119, 1, 1, "", "clone"], [120, 2, 1, "", "columns"], [121, 1, 1, "", "describe"], [122, 1, 1, "", "drop"], [123, 1, 1, "", "drop_in_place"], [124, 1, 1, "", "drop_nulls"], [125, 2, 1, "", "dtypes"], [126, 1, 1, "", "estimated_size"], [127, 1, 1, "", "explode"], [128, 1, 1, "", "extend"], [129, 1, 1, "", "fill_nan"], [130, 1, 1, "", "fill_null"], [131, 1, 1, "", "filter"], [132, 1, 1, "", "find_idx_by_name"], [133, 1, 1, "", "fold"], [134, 1, 1, "", "frame_equal"], [135, 1, 1, "", "get_column"], [136, 1, 1, "", "get_columns"], [137, 1, 1, "", "glimpse"], [138, 1, 1, "", "groupby"], [139, 1, 1, "", "groupby_dynamic"], [140, 1, 1, "", "groupby_rolling"], [141, 1, 1, "", "hash_rows"], [142, 1, 1, "", "head"], [143, 2, 1, "", "height"], [144, 1, 1, "", "hstack"], [145, 1, 1, "", "insert_at_idx"], [146, 1, 1, "", "interpolate"], [147, 1, 1, "", "is_duplicated"], [148, 1, 1, "", "is_empty"], [149, 1, 1, "", "is_unique"], [150, 1, 1, "", "item"], [151, 1, 1, "", "iterrows"], [152, 1, 1, "", "join"], [153, 1, 1, "", "join_asof"], [154, 1, 1, "", "lazy"], [155, 1, 1, "", "limit"], [156, 1, 1, "", "max"], [157, 1, 1, "", "mean"], [158, 1, 1, "", "median"], [159, 1, 1, "", "melt"], [160, 1, 1, "", "merge_sorted"], [161, 1, 1, "", "min"], [162, 1, 1, "", "n_chunks"], [163, 1, 1, "", "n_unique"], [164, 1, 1, "", "null_count"], [165, 1, 1, "", "partition_by"], [166, 1, 1, "", "pearson_corr"], [167, 1, 1, "", "pipe"], [168, 1, 1, "", "pivot"], [169, 1, 1, "", "product"], [170, 1, 1, "", "quantile"], [171, 1, 1, "", "rechunk"], [172, 1, 1, "", "rename"], [173, 1, 1, "", "replace"], [174, 1, 1, "", "replace_at_idx"], [175, 1, 1, "", "reverse"], [176, 1, 1, "", "row"], [177, 1, 1, "", "rows"], [178, 1, 1, "", "sample"], [179, 2, 1, "", "schema"], [180, 1, 1, "", "select"], [181, 2, 1, "", "shape"], [182, 1, 1, "", "shift"], [183, 1, 1, "", "shift_and_fill"], [184, 1, 1, "", "shrink_to_fit"], [185, 1, 1, "", "slice"], [186, 1, 1, "", "sort"], [187, 1, 1, "", "std"], [188, 1, 1, "", "sum"], [189, 1, 1, "", "tail"], [190, 1, 1, "", "take_every"], [191, 1, 1, "", "to_arrow"], [192, 1, 1, "", "to_dict"], [193, 1, 1, "", "to_dicts"], [194, 1, 1, "", "to_dummies"], [195, 1, 1, "", "to_numpy"], [196, 1, 1, "", "to_pandas"], [197, 1, 1, "", "to_series"], [198, 1, 1, "", "to_struct"], [199, 1, 1, "", "transpose"], [200, 1, 1, "", "unique"], [201, 1, 1, "", "unnest"], [202, 1, 1, "", "unstack"], [203, 1, 1, "", "upsample"], [204, 1, 1, "", "var"], [205, 1, 1, "", "vstack"], [206, 2, 1, "", "width"], [207, 1, 1, "", "with_column"], [208, 1, 1, "", "with_columns"], [209, 1, 1, "", "with_row_count"], [23, 1, 1, "", "write_avro"], [24, 1, 1, "", "write_csv"], [25, 1, 1, "", "write_ipc"], [26, 1, 1, "", "write_json"], [27, 1, 1, "", "write_ndjson"], [28, 1, 1, "", "write_parquet"]], "polars.DataType": [[29, 1, 1, "", "__init__"]], "polars.Date": [[30, 1, 1, "", "__init__"]], "polars.Datetime": [[31, 1, 1, "", "__init__"]], "polars.Duration": [[32, 1, 1, "", "__init__"]], "polars.Expr": [[246, 1, 1, "", "abs"], [247, 1, 1, "", "agg_groups"], [248, 1, 1, "", "alias"], [249, 1, 1, "", "all"], [250, 1, 1, "", "any"], [251, 1, 1, "", "append"], [252, 1, 1, "", "apply"], [253, 1, 1, "", "arccos"], [254, 1, 1, "", "arccosh"], [255, 1, 1, "", "arcsin"], [256, 1, 1, "", "arcsinh"], [257, 1, 1, "", "arctan"], [258, 1, 1, "", "arctanh"], [259, 1, 1, "", "arg_max"], [260, 1, 1, "", "arg_min"], [261, 1, 1, "", "arg_sort"], [262, 1, 1, "", "arg_unique"], [263, 1, 1, "", "argsort"], [287, 1, 1, "", "backward_fill"], [293, 1, 1, "", "cast"], [295, 1, 1, "", "ceil"], [296, 1, 1, "", "clip"], [297, 1, 1, "", "clip_max"], [298, 1, 1, "", "clip_min"], [299, 1, 1, "", "cos"], [300, 1, 1, "", "cosh"], [301, 1, 1, "", "count"], [302, 1, 1, "", "cumcount"], [303, 1, 1, "", "cummax"], [304, 1, 1, "", "cummin"], [305, 1, 1, "", "cumprod"], [306, 1, 1, "", "cumsum"], [307, 1, 1, "", "cumulative_eval"], [308, 1, 1, "", "diff"], [309, 1, 1, "", "dot"], [310, 1, 1, "", "drop_nans"], [311, 1, 1, "", "drop_nulls"], [344, 1, 1, "", "entropy"], [345, 1, 1, "", "ewm_mean"], [346, 1, 1, "", "ewm_std"], [347, 1, 1, "", "ewm_var"], [348, 1, 1, "", "exclude"], [349, 1, 1, "", "exp"], [350, 1, 1, "", "explode"], [351, 1, 1, "", "extend_constant"], [352, 1, 1, "", "fill_nan"], [353, 1, 1, "", "fill_null"], [354, 1, 1, "", "filter"], [355, 1, 1, "", "first"], [356, 1, 1, "", "flatten"], [357, 1, 1, "", "floor"], [358, 1, 1, "", "forward_fill"], [359, 1, 1, "", "hash"], [360, 1, 1, "", "head"], [361, 1, 1, "", "inspect"], [362, 1, 1, "", "interpolate"], [363, 1, 1, "", "is_between"], [364, 1, 1, "", "is_duplicated"], [365, 1, 1, "", "is_finite"], [366, 1, 1, "", "is_first"], [367, 1, 1, "", "is_in"], [368, 1, 1, "", "is_infinite"], [369, 1, 1, "", "is_nan"], [370, 1, 1, "", "is_not"], [371, 1, 1, "", "is_not_nan"], [372, 1, 1, "", "is_not_null"], [373, 1, 1, "", "is_null"], [374, 1, 1, "", "is_unique"], [375, 1, 1, "", "keep_name"], [376, 1, 1, "", "kurtosis"], [377, 1, 1, "", "last"], [378, 1, 1, "", "len"], [379, 1, 1, "", "limit"], [380, 1, 1, "", "list"], [381, 1, 1, "", "log"], [382, 1, 1, "", "log10"], [383, 1, 1, "", "lower_bound"], [384, 1, 1, "", "map"], [385, 1, 1, "", "map_alias"], [386, 1, 1, "", "max"], [387, 1, 1, "", "mean"], [388, 1, 1, "", "median"], [393, 1, 1, "", "min"], [394, 1, 1, "", "mode"], [395, 1, 1, "", "n_unique"], [396, 1, 1, "", "nan_max"], [397, 1, 1, "", "nan_min"], [398, 1, 1, "", "null_count"], [399, 1, 1, "", "over"], [400, 1, 1, "", "pct_change"], [401, 1, 1, "", "pow"], [402, 1, 1, "", "prefix"], [403, 1, 1, "", "product"], [404, 1, 1, "", "quantile"], [405, 1, 1, "", "rank"], [406, 1, 1, "", "rechunk"], [407, 1, 1, "", "reinterpret"], [408, 1, 1, "", "repeat_by"], [409, 1, 1, "", "reshape"], [410, 1, 1, "", "reverse"], [411, 1, 1, "", "rolling_apply"], [412, 1, 1, "", "rolling_max"], [413, 1, 1, "", "rolling_mean"], [414, 1, 1, "", "rolling_median"], [415, 1, 1, "", "rolling_min"], [416, 1, 1, "", "rolling_quantile"], [417, 1, 1, "", "rolling_skew"], [418, 1, 1, "", "rolling_std"], [419, 1, 1, "", "rolling_sum"], [420, 1, 1, "", "rolling_var"], [421, 1, 1, "", "round"], [422, 1, 1, "", "sample"], [423, 1, 1, "", "search_sorted"], [424, 1, 1, "", "set_sorted"], [425, 1, 1, "", "shift"], [426, 1, 1, "", "shift_and_fill"], [427, 1, 1, "", "shrink_dtype"], [428, 1, 1, "", "shuffle"], [429, 1, 1, "", "sign"], [430, 1, 1, "", "sin"], [431, 1, 1, "", "sinh"], [432, 1, 1, "", "skew"], [433, 1, 1, "", "slice"], [434, 1, 1, "", "sort"], [435, 1, 1, "", "sort_by"], [436, 1, 1, "", "sqrt"], [437, 1, 1, "", "std"], [467, 1, 1, "", "suffix"], [468, 1, 1, "", "sum"], [469, 1, 1, "", "tail"], [470, 1, 1, "", "take"], [471, 1, 1, "", "take_every"], [472, 1, 1, "", "tan"], [473, 1, 1, "", "tanh"], [474, 1, 1, "", "to_physical"], [475, 1, 1, "", "top_k"], [476, 1, 1, "", "unique"], [477, 1, 1, "", "unique_counts"], [478, 1, 1, "", "upper_bound"], [479, 1, 1, "", "value_counts"], [480, 1, 1, "", "var"], [481, 1, 1, "", "where"]], "polars.Expr.arr": [[264, 1, 1, "", "arg_max"], [265, 1, 1, "", "arg_min"], [266, 1, 1, "", "concat"], [267, 1, 1, "", "contains"], [268, 1, 1, "", "diff"], [269, 1, 1, "", "eval"], [270, 1, 1, "", "first"], [271, 1, 1, "", "get"], [272, 1, 1, "", "head"], [273, 1, 1, "", "join"], [274, 1, 1, "", "last"], [275, 1, 1, "", "lengths"], [276, 1, 1, "", "max"], [277, 1, 1, "", "mean"], [278, 1, 1, "", "min"], [279, 1, 1, "", "reverse"], [280, 1, 1, "", "shift"], [281, 1, 1, "", "slice"], [282, 1, 1, "", "sort"], [283, 1, 1, "", "sum"], [284, 1, 1, "", "tail"], [285, 1, 1, "", "to_struct"], [286, 1, 1, "", "unique"]], "polars.Expr.bin": [[288, 1, 1, "", "contains"], [289, 1, 1, "", "decode"], [290, 1, 1, "", "encode"], [291, 1, 1, "", "ends_with"], [292, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[294, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[312, 1, 1, "", "cast_time_unit"], [313, 1, 1, "", "cast_time_zone"], [314, 1, 1, "", "day"], [315, 1, 1, "", "days"], [316, 1, 1, "", "epoch"], [317, 1, 1, "", "hour"], [318, 1, 1, "", "hours"], [319, 1, 1, "", "iso_year"], [320, 1, 1, "", "microsecond"], [321, 1, 1, "", "microseconds"], [322, 1, 1, "", "millisecond"], [323, 1, 1, "", "milliseconds"], [324, 1, 1, "", "minute"], [325, 1, 1, "", "minutes"], [326, 1, 1, "", "month"], [327, 1, 1, "", "nanosecond"], [328, 1, 1, "", "nanoseconds"], [329, 1, 1, "", "offset_by"], [330, 1, 1, "", "ordinal_day"], [331, 1, 1, "", "quarter"], [332, 1, 1, "", "round"], [333, 1, 1, "", "second"], [334, 1, 1, "", "seconds"], [335, 1, 1, "", "strftime"], [336, 1, 1, "", "timestamp"], [337, 1, 1, "", "truncate"], [338, 1, 1, "", "tz_localize"], [339, 1, 1, "", "week"], [340, 1, 1, "", "weekday"], [341, 1, 1, "", "with_time_unit"], [342, 1, 1, "", "with_time_zone"], [343, 1, 1, "", "year"]], "polars.Expr.meta": [[389, 1, 1, "", "output_name"], [390, 1, 1, "", "pop"], [391, 1, 1, "", "root_names"], [392, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[438, 1, 1, "", "concat"], [439, 1, 1, "", "contains"], [440, 1, 1, "", "count_match"], [441, 1, 1, "", "decode"], [442, 1, 1, "", "encode"], [443, 1, 1, "", "ends_with"], [444, 1, 1, "", "extract"], [445, 1, 1, "", "extract_all"], [446, 1, 1, "", "json_path_match"], [447, 1, 1, "", "lengths"], [448, 1, 1, "", "ljust"], [449, 1, 1, "", "lstrip"], [450, 1, 1, "", "n_chars"], [451, 1, 1, "", "replace"], [452, 1, 1, "", "replace_all"], [453, 1, 1, "", "rjust"], [454, 1, 1, "", "rstrip"], [455, 1, 1, "", "slice"], [456, 1, 1, "", "split"], [457, 1, 1, "", "split_exact"], [458, 1, 1, "", "splitn"], [459, 1, 1, "", "starts_with"], [460, 1, 1, "", "strip"], [461, 1, 1, "", "strptime"], [462, 1, 1, "", "to_lowercase"], [463, 1, 1, "", "to_uppercase"], [464, 1, 1, "", "zfill"]], "polars.Expr.struct": [[465, 1, 1, "", "field"], [466, 1, 1, "", "rename_fields"]], "polars.Float32": [[33, 1, 1, "", "__init__"]], "polars.Float64": [[34, 1, 1, "", "__init__"]], "polars.Int16": [[35, 1, 1, "", "__init__"]], "polars.Int32": [[36, 1, 1, "", "__init__"]], "polars.Int64": [[37, 1, 1, "", "__init__"]], "polars.Int8": [[38, 1, 1, "", "__init__"]], "polars.LazyFrame": [[547, 1, 1, "", "cache"], [548, 1, 1, "", "cleared"], [549, 1, 1, "", "clone"], [550, 1, 1, "", "collect"], [551, 2, 1, "", "columns"], [552, 1, 1, "", "describe_optimized_plan"], [553, 1, 1, "", "describe_plan"], [554, 1, 1, "", "drop"], [555, 1, 1, "", "drop_nulls"], [556, 2, 1, "", "dtypes"], [557, 1, 1, "", "explode"], [558, 1, 1, "", "fetch"], [559, 1, 1, "", "fill_nan"], [560, 1, 1, "", "fill_null"], [561, 1, 1, "", "filter"], [562, 1, 1, "", "first"], [563, 1, 1, "", "from_json"], [564, 1, 1, "", "groupby"], [565, 1, 1, "", "groupby_dynamic"], [566, 1, 1, "", "groupby_rolling"], [567, 1, 1, "", "head"], [568, 1, 1, "", "inspect"], [569, 1, 1, "", "interpolate"], [570, 1, 1, "", "join"], [571, 1, 1, "", "join_asof"], [572, 1, 1, "", "last"], [573, 1, 1, "", "lazy"], [574, 1, 1, "", "limit"], [575, 1, 1, "", "map"], [576, 1, 1, "", "max"], [577, 1, 1, "", "mean"], [578, 1, 1, "", "median"], [579, 1, 1, "", "melt"], [580, 1, 1, "", "merge_sorted"], [581, 1, 1, "", "min"], [582, 1, 1, "", "pipe"], [583, 1, 1, "", "profile"], [584, 1, 1, "", "quantile"], [585, 1, 1, "", "read_json"], [586, 1, 1, "", "rename"], [587, 1, 1, "", "reverse"], [588, 2, 1, "", "schema"], [589, 1, 1, "", "select"], [590, 1, 1, "", "shift"], [591, 1, 1, "", "shift_and_fill"], [592, 1, 1, "", "show_graph"], [593, 1, 1, "", "sink_parquet"], [594, 1, 1, "", "slice"], [595, 1, 1, "", "sort"], [596, 1, 1, "", "std"], [597, 1, 1, "", "sum"], [598, 1, 1, "", "tail"], [599, 1, 1, "", "take_every"], [600, 1, 1, "", "unique"], [601, 1, 1, "", "unnest"], [602, 1, 1, "", "var"], [603, 2, 1, "", "width"], [604, 1, 1, "", "with_column"], [605, 1, 1, "", "with_columns"], [606, 1, 1, "", "with_context"], [607, 1, 1, "", "with_row_count"], [608, 1, 1, "", "write_json"]], "polars.List": [[39, 1, 1, "", "__init__"]], "polars.Null": [[40, 1, 1, "", "__init__"]], "polars.Object": [[41, 1, 1, "", "__init__"]], "polars.SQLContext": [[42, 1, 1, "", "execute"], [43, 1, 1, "", "query"], [44, 1, 1, "", "register"]], "polars.Series": [[620, 1, 1, "", "abs"], [621, 1, 1, "", "alias"], [622, 1, 1, "", "all"], [623, 1, 1, "", "any"], [624, 1, 1, "", "append"], [625, 1, 1, "", "apply"], [626, 1, 1, "", "arccos"], [627, 1, 1, "", "arccosh"], [628, 1, 1, "", "arcsin"], [629, 1, 1, "", "arcsinh"], [630, 1, 1, "", "arctan"], [631, 1, 1, "", "arctanh"], [632, 1, 1, "", "arg_max"], [633, 1, 1, "", "arg_min"], [634, 1, 1, "", "arg_sort"], [635, 1, 1, "", "arg_true"], [636, 1, 1, "", "arg_unique"], [637, 1, 1, "", "argsort"], [638, 3, 1, "", "arr"], [667, 1, 1, "", "cast"], [668, 3, 1, "", "cat"], [670, 1, 1, "", "ceil"], [671, 1, 1, "", "chunk_lengths"], [672, 1, 1, "", "cleared"], [673, 1, 1, "", "clip"], [674, 1, 1, "", "clip_max"], [675, 1, 1, "", "clip_min"], [676, 1, 1, "", "clone"], [677, 1, 1, "", "cos"], [678, 1, 1, "", "cosh"], [679, 1, 1, "", "cummax"], [680, 1, 1, "", "cummin"], [681, 1, 1, "", "cumprod"], [682, 1, 1, "", "cumsum"], [683, 1, 1, "", "cumulative_eval"], [684, 1, 1, "", "describe"], [685, 1, 1, "", "diff"], [686, 1, 1, "", "dot"], [687, 1, 1, "", "drop_nans"], [688, 1, 1, "", "drop_nulls"], [689, 3, 1, "", "dt"], [726, 3, 1, "", "dtype"], [727, 1, 1, "", "entropy"], [728, 1, 1, "", "estimated_size"], [729, 1, 1, "", "ewm_mean"], [730, 1, 1, "", "ewm_std"], [731, 1, 1, "", "ewm_var"], [732, 1, 1, "", "exp"], [733, 1, 1, "", "explode"], [734, 1, 1, "", "extend_constant"], [735, 1, 1, "", "fill_nan"], [736, 1, 1, "", "fill_null"], [737, 1, 1, "", "filter"], [738, 3, 1, "", "flags"], [739, 1, 1, "", "floor"], [740, 1, 1, "", "get_chunks"], [741, 1, 1, "", "has_validity"], [742, 1, 1, "", "hash"], [743, 1, 1, "", "head"], [744, 3, 1, "", "inner_dtype"], [745, 1, 1, "", "interpolate"], [746, 1, 1, "", "is_boolean"], [747, 1, 1, "", "is_datelike"], [748, 1, 1, "", "is_duplicated"], [749, 1, 1, "", "is_empty"], [750, 1, 1, "", "is_finite"], [751, 1, 1, "", "is_first"], [752, 1, 1, "", "is_float"], [753, 1, 1, "", "is_in"], [754, 1, 1, "", "is_infinite"], [755, 1, 1, "", "is_nan"], [756, 1, 1, "", "is_not_nan"], [757, 1, 1, "", "is_not_null"], [758, 1, 1, "", "is_null"], [759, 1, 1, "", "is_numeric"], [760, 1, 1, "", "is_sorted"], [761, 1, 1, "", "is_unique"], [762, 1, 1, "", "is_utf8"], [763, 1, 1, "", "item"], [764, 1, 1, "", "kurtosis"], [765, 1, 1, "", "len"], [766, 1, 1, "", "limit"], [767, 1, 1, "", "log"], [768, 1, 1, "", "log10"], [769, 1, 1, "", "max"], [770, 1, 1, "", "mean"], [771, 1, 1, "", "median"], [772, 1, 1, "", "min"], [773, 1, 1, "", "mode"], [774, 1, 1, "", "n_chunks"], [775, 1, 1, "", "n_unique"], [776, 3, 1, "", "name"], [777, 1, 1, "", "nan_max"], [778, 1, 1, "", "nan_min"], [779, 1, 1, "", "new_from_index"], [780, 1, 1, "", "null_count"], [781, 1, 1, "", "pct_change"], [782, 1, 1, "", "peak_max"], [783, 1, 1, "", "peak_min"], [784, 1, 1, "", "product"], [785, 1, 1, "", "quantile"], [786, 1, 1, "", "rank"], [787, 1, 1, "", "rechunk"], [788, 1, 1, "", "reinterpret"], [789, 1, 1, "", "rename"], [790, 1, 1, "", "reshape"], [791, 1, 1, "", "reverse"], [792, 1, 1, "", "rolling_apply"], [793, 1, 1, "", "rolling_max"], [794, 1, 1, "", "rolling_mean"], [795, 1, 1, "", "rolling_median"], [796, 1, 1, "", "rolling_min"], [797, 1, 1, "", "rolling_quantile"], [798, 1, 1, "", "rolling_skew"], [799, 1, 1, "", "rolling_std"], [800, 1, 1, "", "rolling_sum"], [801, 1, 1, "", "rolling_var"], [802, 1, 1, "", "round"], [803, 1, 1, "", "sample"], [804, 1, 1, "", "search_sorted"], [805, 1, 1, "", "series_equal"], [806, 1, 1, "", "set"], [807, 1, 1, "", "set_at_idx"], [808, 1, 1, "", "set_sorted"], [809, 3, 1, "", "shape"], [810, 1, 1, "", "shift"], [811, 1, 1, "", "shift_and_fill"], [812, 1, 1, "", "shrink_dtype"], [813, 1, 1, "", "shrink_to_fit"], [814, 1, 1, "", "shuffle"], [815, 1, 1, "", "sign"], [816, 1, 1, "", "sin"], [817, 1, 1, "", "sinh"], [818, 1, 1, "", "skew"], [819, 1, 1, "", "slice"], [820, 1, 1, "", "sort"], [821, 1, 1, "", "sqrt"], [822, 1, 1, "", "std"], [823, 3, 1, "", "str"], [855, 1, 1, "", "sum"], [856, 1, 1, "", "tail"], [857, 1, 1, "", "take"], [858, 1, 1, "", "take_every"], [859, 1, 1, "", "tan"], [860, 1, 1, "", "tanh"], [861, 3, 1, "", "time_unit"], [862, 1, 1, "", "to_arrow"], [863, 1, 1, "", "to_dummies"], [864, 1, 1, "", "to_frame"], [865, 1, 1, "", "to_list"], [866, 1, 1, "", "to_numpy"], [867, 1, 1, "", "to_pandas"], [868, 1, 1, "", "to_physical"], [869, 1, 1, "", "top_k"], [870, 1, 1, "", "unique"], [871, 1, 1, "", "unique_counts"], [872, 1, 1, "", "value_counts"], [873, 1, 1, "", "var"], [874, 1, 1, "", "view"], [875, 1, 1, "", "zip_with"]], "polars.Series.arr": [[639, 1, 1, "", "arg_max"], [640, 1, 1, "", "arg_min"], [641, 1, 1, "", "concat"], [642, 1, 1, "", "contains"], [643, 1, 1, "", "diff"], [644, 1, 1, "", "eval"], [645, 1, 1, "", "first"], [646, 1, 1, "", "get"], [647, 1, 1, "", "head"], [648, 1, 1, "", "join"], [649, 1, 1, "", "last"], [650, 1, 1, "", "lengths"], [651, 1, 1, "", "max"], [652, 1, 1, "", "mean"], [653, 1, 1, "", "min"], [654, 1, 1, "", "reverse"], [655, 1, 1, "", "shift"], [656, 1, 1, "", "slice"], [657, 1, 1, "", "sort"], [658, 1, 1, "", "sum"], [659, 1, 1, "", "tail"], [660, 1, 1, "", "to_struct"], [661, 1, 1, "", "unique"]], "polars.Series.bin": [[662, 1, 1, "", "contains"], [663, 1, 1, "", "decode"], [664, 1, 1, "", "encode"], [665, 1, 1, "", "ends_with"], [666, 1, 1, "", "starts_with"]], "polars.Series.cat": [[669, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[690, 1, 1, "", "cast_time_unit"], [691, 1, 1, "", "cast_time_zone"], [692, 1, 1, "", "day"], [693, 1, 1, "", "days"], [694, 1, 1, "", "epoch"], [695, 1, 1, "", "hour"], [696, 1, 1, "", "hours"], [697, 1, 1, "", "iso_year"], [698, 1, 1, "", "max"], [699, 1, 1, "", "mean"], [700, 1, 1, "", "median"], [701, 1, 1, "", "microsecond"], [702, 1, 1, "", "microseconds"], [703, 1, 1, "", "millisecond"], [704, 1, 1, "", "milliseconds"], [705, 1, 1, "", "min"], [706, 1, 1, "", "minute"], [707, 1, 1, "", "minutes"], [708, 1, 1, "", "month"], [709, 1, 1, "", "nanosecond"], [710, 1, 1, "", "nanoseconds"], [711, 1, 1, "", "offset_by"], [712, 1, 1, "", "ordinal_day"], [713, 1, 1, "", "quarter"], [714, 1, 1, "", "round"], [715, 1, 1, "", "second"], [716, 1, 1, "", "seconds"], [717, 1, 1, "", "strftime"], [718, 1, 1, "", "timestamp"], [719, 1, 1, "", "truncate"], [720, 1, 1, "", "tz_localize"], [721, 1, 1, "", "week"], [722, 1, 1, "", "weekday"], [723, 1, 1, "", "with_time_unit"], [724, 1, 1, "", "with_time_zone"], [725, 1, 1, "", "year"]], "polars.Series.str": [[824, 1, 1, "", "concat"], [825, 1, 1, "", "contains"], [826, 1, 1, "", "count_match"], [827, 1, 1, "", "decode"], [828, 1, 1, "", "encode"], [829, 1, 1, "", "ends_with"], [830, 1, 1, "", "extract"], [831, 1, 1, "", "extract_all"], [832, 1, 1, "", "json_path_match"], [833, 1, 1, "", "lengths"], [834, 1, 1, "", "ljust"], [835, 1, 1, "", "lstrip"], [836, 1, 1, "", "n_chars"], [837, 1, 1, "", "replace"], [838, 1, 1, "", "replace_all"], [839, 1, 1, "", "rjust"], [840, 1, 1, "", "rstrip"], [841, 1, 1, "", "slice"], [842, 1, 1, "", "split"], [843, 1, 1, "", "split_exact"], [844, 1, 1, "", "splitn"], [845, 1, 1, "", "starts_with"], [846, 1, 1, "", "strip"], [847, 1, 1, "", "strptime"], [848, 1, 1, "", "to_lowercase"], [849, 1, 1, "", "to_uppercase"], [850, 1, 1, "", "zfill"]], "polars.Series.struct": [[851, 1, 1, "", "field"], [852, 3, 1, "", "fields"], [853, 1, 1, "", "rename_fields"], [854, 1, 1, "", "to_frame"]], "polars.StringCache": [[45, 1, 1, "", "__init__"]], "polars.Struct": [[46, 1, 1, "", "__init__"]], "polars.Time": [[47, 1, 1, "", "__init__"]], "polars.UInt16": [[48, 1, 1, "", "__init__"]], "polars.UInt32": [[49, 1, 1, "", "__init__"]], "polars.UInt64": [[50, 1, 1, "", "__init__"]], "polars.UInt8": [[51, 1, 1, "", "__init__"]], "polars.Unknown": [[52, 1, 1, "", "__init__"]], "polars.Utf8": [[53, 1, 1, "", "__init__"]], "polars.api": [[55, 4, 1, "", "register_dataframe_namespace"], [56, 4, 1, "", "register_expr_namespace"], [57, 4, 1, "", "register_lazyframe_namespace"], [58, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[65, 5, 1, "", "ArrowError"], [66, 5, 1, "", "ComputeError"], [67, 5, 1, "", "DuplicateError"], [68, 5, 1, "", "InvalidOperationError"], [69, 5, 1, "", "NoDataError"], [70, 5, 1, "", "NoRowsReturned"], [71, 5, 1, "", "NotFoundError"], [72, 5, 1, "", "PanicException"], [73, 5, 1, "", "RowsException"], [74, 5, 1, "", "SchemaError"], [75, 5, 1, "", "ShapeError"], [76, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[85, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[210, 1, 1, "", "agg"], [211, 1, 1, "", "agg_list"], [212, 1, 1, "", "apply"], [213, 1, 1, "", "count"], [214, 1, 1, "", "first"], [215, 1, 1, "", "head"], [216, 1, 1, "", "last"], [217, 1, 1, "", "max"], [218, 1, 1, "", "mean"], [219, 1, 1, "", "median"], [220, 1, 1, "", "min"], [221, 1, 1, "", "n_unique"], [222, 1, 1, "", "pivot"], [223, 1, 1, "", "quantile"], [224, 1, 1, "", "sum"], [225, 1, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[226, 1, 1, "", "count"], [227, 1, 1, "", "first"], [228, 1, 1, "", "last"], [229, 1, 1, "", "max"], [230, 1, 1, "", "mean"], [231, 1, 1, "", "median"], [232, 1, 1, "", "min"], [233, 1, 1, "", "sum"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[609, 1, 1, "", "agg"], [610, 1, 1, "", "apply"], [611, 1, 1, "", "head"], [612, 1, 1, "", "tail"]], "polars.testing": [[106, 4, 1, "", "assert_frame_equal"], [107, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[108, 0, 1, "", "column"], [109, 4, 1, "", "columns"], [110, 4, 1, "", "dataframes"], [111, 4, 1, "", "series"]], "polars.testing.parametric.column": [[108, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 128], "api": [1, 55, 56, 57, 58, 544], "provid": 1, "new": 1, "function": [1, 243, 534, 543], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875], "binari": [2, 529, 878], "boolean": [3, 530, 879], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 115], "load": [5, 115], "restore_default": 6, "save": [7, 115], "set_ascii_t": 8, "set_fmt_str_length": 9, "set_tbl_cell_align": 10, "set_tbl_col": 11, "set_tbl_column_data_type_inlin": 12, "set_tbl_dataframe_shape_below": 13, "set_tbl_format": 14, "set_tbl_hide_column_data_typ": 15, "set_tbl_hide_column_nam": 16, "set_tbl_hide_dataframe_shap": 17, "set_tbl_hide_dtype_separ": 18, "set_tbl_row": 19, "set_tbl_width_char": 20, "set_verbos": 21, "state": [22, 115], "datafram": [23, 24, 25, 26, 27, 28, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 239], "write_avro": 23, "write_csv": 24, "write_ipc": 25, "write_json": [26, 608], "write_ndjson": 27, "write_parquet": 28, "datatyp": 29, "date": [30, 243, 497], "datetim": [31, 498], "durat": [32, 499], "float32": 33, "float64": 34, "int16": 35, "int32": 36, "int64": 37, "int8": 38, "list": [39, 380, 508], "null": 40, "object": 41, "sqlcontext": [42, 43, 44], "execut": 42, "queri": 43, "regist": 44, "stringcach": [45, 543], "struct": [46, 465, 466, 523, 540, 851, 852, 853, 854, 888], "time": [47, 243], "uint16": 48, "uint32": 49, "uint64": 50, "uint8": 51, "unknown": 52, "utf8": 53, "align_fram": 54, "register_dataframe_namespac": 55, "register_expr_namespac": 56, "register_lazyframe_namespac": 57, "register_series_namespac": 58, "arg_wher": 59, "build_info": 60, "collect_al": 61, "concat": [62, 266, 438, 641, 824], "cut": 63, "date_rang": 64, "except": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 244], "arrowerror": 65, "computeerror": 66, "duplicateerror": 67, "invalidoperationerror": 68, "nodataerror": 69, "norowsreturn": 70, "notfounderror": 71, "panicexcept": 72, "rowsexcept": 73, "schemaerror": 74, "shapeerror": 75, "toomanyrowsreturn": 76, "from_arrow": 77, "from_dict": [78, 79], "from_numpi": 80, "from_panda": 81, "from_record": 82, "get_dummi": 83, "get_idx_typ": 84, "intern": [85, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 609, 610, 611, 612], "batch": 85, "batchedcsvread": [85, 545], "next_batch": 85, "ones": 86, "read_avro": 87, "read_csv": 88, "read_csv_batch": 89, "read_delta": 90, "read_excel": 91, "read_ipc": 92, "read_ipc_schema": 93, "read_json": [94, 585], "read_ndjson": 95, "read_parquet": 96, "read_parquet_schema": 97, "read_sql": 98, "scan_csv": 99, "scan_delta": 100, "scan_d": 101, "scan_ipc": 102, "scan_ndjson": 103, "scan_parquet": 104, "show_vers": 105, "test": [106, 107, 108, 109, 110, 111, 891], "assert_frame_equ": 106, "assert_series_equ": 107, "parametr": [108, 109, 110, 111], "column": [108, 109, 120, 532, 551], "seri": [111, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 884], "threadpool_s": 112, "toggle_string_cach": 113, "zero": 114, "option": 115, "set": [115, 806], "unset": 115, "current": 115, "aggreg": [116, 245, 546, 619], "appli": [117, 212, 252, 484, 610, 625], "clear": [118, 548, 672], "clone": [119, 549, 676], "describ": [121, 684], "drop": [122, 554], "drop_in_plac": 123, "drop_nul": [124, 311, 555, 688], "dtype": [125, 556, 726], "estimated_s": [126, 728], "explod": [127, 350, 557, 733], "fill_nan": [129, 352, 559, 735], "fill_nul": [130, 353, 560, 736], "filter": [131, 354, 561, 737], "find_idx_by_nam": 132, "fold": [133, 503], "frame_equ": 134, "get_column": [135, 136], "glimps": 137, "groupbi": [138, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 238, 564, 609, 610, 611, 612, 615], "groupby_dynam": [139, 565], "groupby_rol": [140, 566], "hash_row": 141, "head": [142, 215, 272, 360, 507, 567, 611, 647, 743], "height": 143, "hstack": 144, "insert_at_idx": 145, "interpol": [146, 362, 569, 745], "is_dupl": [147, 364, 748], "is_empti": [148, 749], "is_uniqu": [149, 374, 761], "item": [150, 763], "iterrow": 151, "join": [152, 273, 570, 648], "join_asof": [153, 571], "lazi": [154, 543, 573], "limit": [155, 379, 574, 766], "max": [156, 217, 229, 276, 386, 511, 576, 651, 698, 769], "mean": [157, 218, 230, 277, 387, 512, 577, 652, 699, 770], "median": [158, 219, 231, 388, 513, 578, 700, 771], "melt": [159, 579], "merge_sort": [160, 580], "min": [161, 220, 232, 278, 393, 514, 581, 653, 705, 772], "n_chunk": [162, 774], "n_uniqu": [163, 221, 395, 515, 775], "null_count": [164, 398, 780], "partition_bi": 165, "pearson_corr": [166, 516], "pipe": [167, 582], "pivot": [168, 222, 226, 227, 228, 229, 230, 231, 232, 233, 242], "product": [169, 403, 784], "quantil": [170, 223, 404, 517, 584, 785], "rechunk": [171, 406, 787], "renam": [172, 586, 789], "replac": [173, 451, 837], "replace_at_idx": 174, "revers": [175, 279, 410, 587, 654, 791], "row": [176, 177], "sampl": [178, 422, 803], "schema": [179, 588], "select": [180, 241, 520, 538, 589, 618, 886], "shape": [181, 809], "shift": [182, 280, 425, 590, 655, 810], "shift_and_fil": [183, 426, 591, 811], "shrink_to_fit": [184, 813], "slice": [185, 281, 433, 455, 594, 656, 819, 841], "sort": [186, 282, 434, 595, 657, 820], "std": [187, 437, 522, 596, 822], "sum": [188, 224, 233, 283, 468, 524, 597, 658, 855], "tail": [189, 225, 284, 469, 525, 598, 612, 659, 856], "take_everi": [190, 471, 599, 858], "to_arrow": [191, 862], "to_dict": [192, 193], "to_dummi": [194, 863], "to_numpi": [195, 866], "to_panda": [196, 867], "to_seri": 197, "to_struct": [198, 285, 660], "transpos": 199, "uniqu": [200, 286, 476, 600, 661, 870], "unnest": [201, 601], "unstack": 202, "upsampl": 203, "var": [204, 480, 526, 602, 873], "vstack": 205, "width": [206, 603], "with_column": [207, 208, 604, 605], "with_row_count": [209, 607], "agg": [210, 609], "agg_list": 211, "count": [213, 226, 301, 492], "first": [214, 227, 270, 355, 502, 562, 645], "last": [216, 228, 274, 377, 572, 649], "pivotop": [226, 227, 228, 229, 230, 231, 232, 233], "attribut": [234, 613, 877], "comput": [235, 533, 881], "descript": [236, 614, 882], "export": [237, 883], "miscellan": [240, 537, 543, 617, 885], "manipul": [241, 538, 618, 886], "data": 243, "type": 243, "numer": 243, "nest": 243, "other": 243, "expr": [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "ab": [246, 620], "agg_group": 247, "alia": [248, 621], "all": [249, 482, 622], "ani": [250, 483, 623], "append": [251, 624], "arcco": [253, 626], "arccosh": [254, 627], "arcsin": [255, 628], "arcsinh": [256, 629], "arctan": [257, 630], "arctanh": [258, 631], "arg_max": [259, 264, 632, 639], "arg_min": [260, 265, 633, 640], "arg_sort": [261, 634], "arg_uniqu": [262, 636], "argsort": [263, 637], "arr": [264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661], "contain": [267, 288, 439, 642, 662, 825], "diff": [268, 308, 643, 685], "eval": [269, 644], "get": [271, 646], "length": [275, 447, 650, 833], "backward_fil": 287, "bin": [288, 289, 290, 291, 292, 662, 663, 664, 665, 666], "decod": [289, 441, 663, 827], "encod": [290, 442, 664, 828], "ends_with": [291, 443, 665, 829], "starts_with": [292, 459, 666, 845], "cast": [293, 667], "cat": [294, 668, 669], "set_ord": [294, 669], "ceil": [295, 670], "clip": [296, 673], "clip_max": [297, 674], "clip_min": [298, 675], "co": [299, 677], "cosh": [300, 678], "cumcount": 302, "cummax": [303, 679], "cummin": [304, 680], "cumprod": [305, 681], "cumsum": [306, 496, 682], "cumulative_ev": [307, 683], "dot": [309, 686], "drop_nan": [310, 687], "dt": [312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725], "cast_time_unit": [312, 690], "cast_time_zon": [313, 691], "dai": [314, 315, 692, 693], "epoch": [316, 694], "hour": [317, 318, 695, 696], "iso_year": [319, 697], "microsecond": [320, 321, 701, 702], "millisecond": [322, 323, 703, 704], "minut": [324, 325, 706, 707], "month": [326, 708], "nanosecond": [327, 328, 709, 710], "offset_bi": [329, 711], "ordinal_dai": [330, 712], "quarter": [331, 713], "round": [332, 421, 714, 802], "second": [333, 334, 715, 716], "strftime": [335, 717], "timestamp": [336, 718], "truncat": [337, 719], "tz_local": [338, 720], "week": [339, 721], "weekdai": [340, 722], "with_time_unit": [341, 723], "with_time_zon": [342, 724], "year": [343, 725], "entropi": [344, 727], "ewm_mean": [345, 729], "ewm_std": [346, 730], "ewm_var": [347, 731], "exclud": [348, 501], "exp": [349, 732], "extend_const": [351, 734], "flatten": 356, "floor": [357, 739], "forward_fil": 358, "hash": [359, 742], "inspect": [361, 568], "is_between": 363, "is_finit": [365, 750], "is_first": [366, 751], "is_in": [367, 753], "is_infinit": [368, 754], "is_nan": [369, 755], "is_not": 370, "is_not_nan": [371, 756], "is_not_nul": [372, 757], "is_nul": [373, 758], "keep_nam": 375, "kurtosi": [376, 764], "len": [378, 765], "log": [381, 767], "log10": [382, 768], "lower_bound": 383, "map": [384, 510, 575], "map_alia": 385, "meta": [389, 390, 391, 392, 536], "output_nam": 389, "pop": 390, "root_nam": 391, "undo_alias": 392, "mode": [394, 773], "nan_max": [396, 777], "nan_min": [397, 778], "over": 399, "pct_chang": [400, 781], "pow": 401, "prefix": 402, "rank": [405, 786], "reinterpret": [407, 788], "repeat_bi": 408, "reshap": [409, 790], "rolling_appli": [411, 792], "rolling_max": [412, 793], "rolling_mean": [413, 794], "rolling_median": [414, 795], "rolling_min": [415, 796], "rolling_quantil": [416, 797], "rolling_skew": [417, 798], "rolling_std": [418, 799], "rolling_sum": [419, 800], "rolling_var": [420, 801], "search_sort": [423, 804], "set_sort": [424, 808], "shrink_dtyp": [427, 812], "shuffl": [428, 814], "sign": [429, 815], "sin": [430, 816], "sinh": [431, 817], "skew": [432, 818], "sort_bi": 435, "sqrt": [436, 821], "str": [438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850], "count_match": [440, 826], "extract": [444, 830], "extract_al": [445, 831], "json_path_match": [446, 832], "ljust": [448, 834], "lstrip": [449, 835], "n_char": [450, 836], "replace_al": [452, 838], "rjust": [453, 839], "rstrip": [454, 840], "split": [456, 842], "split_exact": [457, 843], "splitn": [458, 844], "strip": [460, 846], "strptime": [461, 847], "to_lowercas": [462, 848], "to_uppercas": [463, 849], "zfill": [464, 850], "field": [465, 851, 852], "rename_field": [466, 853], "suffix": 467, "take": [470, 857], "tan": [472, 859], "tanh": [473, 860], "to_phys": [474, 868], "top_k": [475, 869], "unique_count": [477, 871], "upper_bound": 478, "value_count": [479, 872], "where": 481, "arang": 485, "argsort_bi": 486, "avg": 487, "coalesc": 488, "col": 489, "concat_list": 490, "concat_str": 491, "cov": 493, "cumfold": 494, "cumreduc": 495, "element": 500, "format": 504, "from_epoch": 505, "group": 506, "lit": 509, "reduc": 518, "repeat": 519, "spearman_rank_corr": 521, "when": 527, "arrai": [528, 876], "categori": [531, 880], "name": [532, 776], "express": 535, "string": [539, 887], "tempor": [541, 889], "window": 542, "convers": 543, "eager": 543, "parallel": 543, "refer": 544, "input": 545, "output": 545, "csv": 545, "feather": 545, "ipc": 545, "parquet": 545, "sql": [545, 890], "json": 545, "avro": 545, "excel": 545, "delta": 545, "lake": 545, "dataset": 545, "lazyfram": [547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 616], "cach": 547, "collect": 550, "describe_optimized_plan": 552, "describe_plan": 553, "fetch": 558, "from_json": 563, "profil": 583, "show_graph": 592, "sink_parquet": 593, "with_context": 606, "lazygroupbi": [609, 610, 611, 612], "read": 617, "write": 617, "logic": 617, "plan": 617, "arg_tru": 635, "chunk_length": 671, "flag": 738, "get_chunk": 740, "has_valid": 741, "inner_dtyp": 744, "is_boolean": 746, "is_datelik": 747, "is_float": 752, "is_numer": 759, "is_sort": 760, "is_utf8": 762, "new_from_index": 779, "peak_max": 782, "peak_min": 783, "series_equ": 805, "set_at_idx": 807, "to_fram": [854, 864], "time_unit": 861, "to_list": 865, "view": 874, "zip_with": 875, "method": 890, "assert": 891, "properti": 891, "base": 891, "strategi": 891, "helper": 891, "util": 892}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.exceptions.RowsException": [[73, "polars-exceptions-rowsexception"]], "polars.threadpool_size": [[112, "polars-threadpool-size"]], "polars.scan_delta": [[100, "polars-scan-delta"]], "polars.exceptions.SchemaError": [[74, "polars-exceptions-schemaerror"]], "polars.exceptions.ComputeError": [[66, "polars-exceptions-computeerror"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[85, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.DataFrame.explode": [[127, "polars-dataframe-explode"]], "polars.exceptions.ShapeError": [[75, "polars-exceptions-shapeerror"]], "polars.read_avro": [[87, "polars-read-avro"]], "polars.read_csv_batched": [[89, "polars-read-csv-batched"]], "polars.read_parquet_schema": [[97, "polars-read-parquet-schema"]], "polars.DataFrame.fill_nan": [[129, "polars-dataframe-fill-nan"]], "polars.read_sql": [[98, "polars-read-sql"]], "polars.testing.parametric.column": [[108, "polars-testing-parametric-column"]], "polars.ones": [[86, "polars-ones"]], "polars.exceptions.PanicException": [[72, "polars-exceptions-panicexception"]], "polars.zeros": [[114, "polars-zeros"]], "polars.from_pandas": [[81, "polars-from-pandas"]], "polars.DataFrame.drop_in_place": [[123, "polars-dataframe-drop-in-place"]], "polars.read_ndjson": [[95, "polars-read-ndjson"]], "polars.DataFrame.apply": [[117, "polars-dataframe-apply"]], "polars.DataFrame.filter": [[131, "polars-dataframe-filter"]], "polars.show_versions": [[105, "polars-show-versions"]], "polars.DataFrame.drop_nulls": [[124, "polars-dataframe-drop-nulls"]], "polars.scan_ndjson": [[103, "polars-scan-ndjson"]], "polars.exceptions.DuplicateError": [[67, "polars-exceptions-duplicateerror"]], "Aggregation": [[116, "aggregation"], [619, "aggregation"], [546, "aggregation"], [245, "aggregation"]], "polars.testing.assert_frame_equal": [[106, "polars-testing-assert-frame-equal"]], "polars.exceptions.NotFoundError": [[71, "polars-exceptions-notfounderror"]], "polars.scan_csv": [[99, "polars-scan-csv"]], "polars.DataFrame.estimated_size": [[126, "polars-dataframe-estimated-size"]], "polars.testing.assert_series_equal": [[107, "polars-testing-assert-series-equal"]], "polars.read_csv": [[88, "polars-read-csv"]], "polars.toggle_string_cache": [[113, "polars-toggle-string-cache"]], "polars.DataFrame.drop": [[122, "polars-dataframe-drop"]], "polars.DataFrame.dtypes": [[125, "polars-dataframe-dtypes"]], "polars.read_ipc_schema": [[93, "polars-read-ipc-schema"]], "polars.get_dummies": [[83, "polars-get-dummies"]], "polars.from_numpy": [[80, "polars-from-numpy"]], "polars.scan_ipc": [[102, "polars-scan-ipc"]], "polars.DataFrame.describe": [[121, "polars-dataframe-describe"]], "polars.read_parquet": [[96, "polars-read-parquet"]], "polars.exceptions.TooManyRowsReturned": [[76, "polars-exceptions-toomanyrowsreturned"]], "polars.DataFrame.cleared": [[118, "polars-dataframe-cleared"]], "polars.DataFrame.extend": [[128, "polars-dataframe-extend"]], "polars.scan_ds": [[101, "polars-scan-ds"]], "polars.exceptions.NoRowsReturned": [[70, "polars-exceptions-norowsreturned"]], "polars.DataFrame.columns": [[120, "polars-dataframe-columns"]], "polars.testing.parametric.columns": [[109, "polars-testing-parametric-columns"]], "polars.testing.parametric.dataframes": [[110, "polars-testing-parametric-dataframes"]], "polars.DataFrame.clone": [[119, "polars-dataframe-clone"]], "polars.DataFrame.fill_null": [[130, "polars-dataframe-fill-null"]], "polars.from_arrow": [[77, "polars-from-arrow"]], "polars.testing.parametric.series": [[111, "polars-testing-parametric-series"]], "polars.from_dicts": [[79, "polars-from-dicts"]], "polars.read_delta": [[90, "polars-read-delta"]], "polars.read_json": [[94, "polars-read-json"]], "polars.get_idx_type": [[84, "polars-get-idx-type"]], "polars.exceptions.InvalidOperationError": [[68, "polars-exceptions-invalidoperationerror"]], "polars.from_records": [[82, "polars-from-records"]], "polars.read_excel": [[91, "polars-read-excel"]], "polars.exceptions.NoDataError": [[69, "polars-exceptions-nodataerror"]], "polars.from_dict": [[78, "polars-from-dict"]], "polars.read_ipc": [[92, "polars-read-ipc"]], "polars.scan_parquet": [[104, "polars-scan-parquet"]], "Config": [[115, "config"]], "Config options (set/unset)": [[115, "config-options-set-unset"]], "Config load, save, and current state": [[115, "config-load-save-and-current-state"]], "polars.Config.set_tbl_cell_alignment": [[10, "polars-config-set-tbl-cell-alignment"]], "polars.Time": [[47, "polars-time"]], "polars.Config.set_tbl_dataframe_shape_below": [[13, "polars-config-set-tbl-dataframe-shape-below"]], "polars.DataFrame.write_csv": [[24, "polars-dataframe-write-csv"]], "polars.Int64": [[37, "polars-int64"]], "polars.Int16": [[35, "polars-int16"]], "polars.SQLContext.query": [[43, "polars-sqlcontext-query"]], "polars.Config.set_tbl_rows": [[19, "polars-config-set-tbl-rows"]], "polars.SQLContext.register": [[44, "polars-sqlcontext-register"]], "polars.UInt16": [[48, "polars-uint16"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.Config.set_verbose": [[21, "polars-config-set-verbose"]], "polars.cut": [[63, "polars-cut"]], "polars.DataFrame.write_json": [[26, "polars-dataframe-write-json"]], "polars.Config.set_tbl_column_data_type_inline": [[12, "polars-config-set-tbl-column-data-type-inline"]], "polars.Struct": [[46, "polars-struct"]], "polars.StringCache": [[45, "polars-stringcache"]], "polars.DataFrame.write_parquet": [[28, "polars-dataframe-write-parquet"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Utf8": [[53, "polars-utf8"]], "polars.UInt8": [[51, "polars-uint8"]], "polars.build_info": [[60, "polars-build-info"]], "polars.UInt64": [[50, "polars-uint64"]], "polars.Config.set_tbl_hide_column_data_types": [[15, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_formatting": [[14, "polars-config-set-tbl-formatting"]], "polars.date_range": [[64, "polars-date-range"]], "polars.Config.set_fmt_str_lengths": [[9, "polars-config-set-fmt-str-lengths"]], "polars.api.register_dataframe_namespace": [[55, "polars-api-register-dataframe-namespace"]], "polars.exceptions.ArrowError": [[65, "polars-exceptions-arrowerror"]], "polars.DataType": [[29, "polars-datatype"]], "polars.Config.save": [[7, "polars-config-save"]], "polars.arg_where": [[59, "polars-arg-where"]], "polars.api.register_expr_namespace": [[56, "polars-api-register-expr-namespace"]], "polars.DataFrame.write_ndjson": [[27, "polars-dataframe-write-ndjson"]], "polars.collect_all": [[61, "polars-collect-all"]], "polars.Config.set_tbl_cols": [[11, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_hide_dtype_separator": [[18, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_tbl_hide_column_names": [[16, "polars-config-set-tbl-hide-column-names"]], "polars.Config.set_tbl_width_chars": [[20, "polars-config-set-tbl-width-chars"]], "polars.Null": [[40, "polars-null"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Binary": [[2, "polars-binary"]], "polars.DataFrame.write_avro": [[23, "polars-dataframe-write-avro"]], "polars.concat": [[62, "polars-concat"]], "polars.Config.set_tbl_hide_dataframe_shape": [[17, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Date": [[30, "polars-date"]], "polars.Float64": [[34, "polars-float64"]], "polars.List": [[39, "polars-list"]], "polars.Object": [[41, "polars-object"]], "polars.api.register_lazyframe_namespace": [[57, "polars-api-register-lazyframe-namespace"]], "polars.Duration": [[32, "polars-duration"]], "polars.Float32": [[33, "polars-float32"]], "polars.Unknown": [[52, "polars-unknown"]], "polars.Int8": [[38, "polars-int8"]], "polars.Int32": [[36, "polars-int32"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Config.restore_defaults": [[6, "polars-config-restore-defaults"]], "polars.api.register_series_namespace": [[58, "polars-api-register-series-namespace"]], "polars.Datetime": [[31, "polars-datetime"]], "polars.align_frames": [[54, "polars-align-frames"]], "polars.Config.load": [[5, "polars-config-load"]], "polars.DataFrame.write_ipc": [[25, "polars-dataframe-write-ipc"]], "polars.SQLContext.execute": [[42, "polars-sqlcontext-execute"]], "polars.Config.state": [[22, "polars-config-state"]], "polars.UInt32": [[49, "polars-uint32"]], "polars.Series.rolling_std": [[799, "polars-series-rolling-std"]], "polars.Series.shape": [[809, "polars-series-shape"]], "polars.Series.struct.field": [[851, "polars-series-struct-field"]], "polars.Series.sign": [[815, "polars-series-sign"]], "polars.Series.str.replace": [[837, "polars-series-str-replace"]], "polars.Series.str.ljust": [[834, "polars-series-str-ljust"]], "polars.Series.str.to_lowercase": [[848, "polars-series-str-to-lowercase"]], "polars.Series.str.count_match": [[826, "polars-series-str-count-match"]], "polars.Series.str.concat": [[824, "polars-series-str-concat"]], "polars.Series.sinh": [[817, "polars-series-sinh"]], "polars.Series.rolling_max": [[793, "polars-series-rolling-max"]], "polars.Series.rolling_skew": [[798, "polars-series-rolling-skew"]], "polars.Series.set_sorted": [[808, "polars-series-set-sorted"]], "polars.Series.slice": [[819, "polars-series-slice"]], "polars.Series.str.strip": [[846, "polars-series-str-strip"]], "polars.Series.str.n_chars": [[836, "polars-series-str-n-chars"]], "polars.Series.str.replace_all": [[838, "polars-series-str-replace-all"]], "polars.Series.rolling_apply": [[792, "polars-series-rolling-apply"]], "polars.Series.std": [[822, "polars-series-std"]], "polars.Series.sum": [[855, "polars-series-sum"]], "polars.Series.str.extract_all": [[831, "polars-series-str-extract-all"]], "polars.Series.str.lstrip": [[835, "polars-series-str-lstrip"]], "polars.Series.shrink_dtype": [[812, "polars-series-shrink-dtype"]], "polars.Series.str": [[823, "polars-series-str"]], "polars.Series.str.split": [[842, "polars-series-str-split"]], "polars.Series.take": [[857, "polars-series-take"]], "polars.Series.struct.fields": [[852, "polars-series-struct-fields"]], "polars.Series.rolling_quantile": [[797, "polars-series-rolling-quantile"]], "polars.Series.struct.to_frame": [[854, "polars-series-struct-to-frame"]], "polars.Series.series_equal": [[805, "polars-series-series-equal"]], "polars.Series.str.rstrip": [[840, "polars-series-str-rstrip"]], "polars.Series.shuffle": [[814, "polars-series-shuffle"]], "polars.Series.set_at_idx": [[807, "polars-series-set-at-idx"]], "polars.Series.str.extract": [[830, "polars-series-str-extract"]], "polars.Series.rolling_min": [[796, "polars-series-rolling-min"]], "polars.Series.shift_and_fill": [[811, "polars-series-shift-and-fill"]], "polars.Series.str.lengths": [[833, "polars-series-str-lengths"]], "polars.Series.str.rjust": [[839, "polars-series-str-rjust"]], "polars.Series.str.splitn": [[844, "polars-series-str-splitn"]], "polars.Series.str.split_exact": [[843, "polars-series-str-split-exact"]], "polars.Series.sqrt": [[821, "polars-series-sqrt"]], "polars.Series.sin": [[816, "polars-series-sin"]], "polars.Series.skew": [[818, "polars-series-skew"]], "polars.Series.str.to_uppercase": [[849, "polars-series-str-to-uppercase"]], "polars.Series.str.contains": [[825, "polars-series-str-contains"]], "polars.Series.str.zfill": [[850, "polars-series-str-zfill"]], "polars.Series.str.json_path_match": [[832, "polars-series-str-json-path-match"]], "polars.Series.str.encode": [[828, "polars-series-str-encode"]], "polars.Series.str.ends_with": [[829, "polars-series-str-ends-with"]], "polars.Series.round": [[802, "polars-series-round"]], "polars.Series.shrink_to_fit": [[813, "polars-series-shrink-to-fit"]], "polars.Series.str.slice": [[841, "polars-series-str-slice"]], "polars.Series.shift": [[810, "polars-series-shift"]], "polars.Series.search_sorted": [[804, "polars-series-search-sorted"]], "polars.Series.rolling_sum": [[800, "polars-series-rolling-sum"]], "polars.Series.str.decode": [[827, "polars-series-str-decode"]], "polars.Series.struct.rename_fields": [[853, "polars-series-struct-rename-fields"]], "polars.Series.rolling_median": [[795, "polars-series-rolling-median"]], "polars.Series.sample": [[803, "polars-series-sample"]], "polars.Series.str.starts_with": [[845, "polars-series-str-starts-with"]], "polars.Series.tail": [[856, "polars-series-tail"]], "polars.Series.set": [[806, "polars-series-set"]], "polars.Series.rolling_var": [[801, "polars-series-rolling-var"]], "polars.Series.str.strptime": [[847, "polars-series-str-strptime"]], "polars.Series.rolling_mean": [[794, "polars-series-rolling-mean"]], "polars.Series.sort": [[820, "polars-series-sort"]], "polars.Series.flags": [[738, "polars-series-flags"]], "polars.Series.is_unique": [[761, "polars-series-is-unique"]], "polars.Series.item": [[763, "polars-series-item"]], "polars.Series.filter": [[737, "polars-series-filter"]], "polars.Series.is_not_nan": [[756, "polars-series-is-not-nan"]], "polars.Series.nan_min": [[778, "polars-series-nan-min"]], "polars.Series.reshape": [[790, "polars-series-reshape"]], "polars.Series.hash": [[742, "polars-series-hash"]], "polars.Series.estimated_size": [[728, "polars-series-estimated-size"]], "polars.Series.median": [[771, "polars-series-median"]], "polars.Series.n_unique": [[775, "polars-series-n-unique"]], "polars.Series.quantile": [[785, "polars-series-quantile"]], "polars.Series.rename": [[789, "polars-series-rename"]], "polars.Series.floor": [[739, "polars-series-floor"]], "polars.Series.head": [[743, "polars-series-head"]], "polars.Series.has_validity": [[741, "polars-series-has-validity"]], "polars.Series.n_chunks": [[774, "polars-series-n-chunks"]], "polars.Series.interpolate": [[745, "polars-series-interpolate"]], "polars.Series.is_first": [[751, "polars-series-is-first"]], "polars.Series.log": [[767, "polars-series-log"]], "polars.Series.null_count": [[780, "polars-series-null-count"]], "polars.Series.kurtosis": [[764, "polars-series-kurtosis"]], "polars.Series.is_datelike": [[747, "polars-series-is-datelike"]], "polars.Series.is_duplicated": [[748, "polars-series-is-duplicated"]], "polars.Series.nan_max": [[777, "polars-series-nan-max"]], "polars.Series.log10": [[768, "polars-series-log10"]], "polars.Series.is_infinite": [[754, "polars-series-is-infinite"]], "polars.Series.max": [[769, "polars-series-max"]], "polars.Series.inner_dtype": [[744, "polars-series-inner-dtype"]], "polars.Series.is_in": [[753, "polars-series-is-in"]], "polars.Series.reverse": [[791, "polars-series-reverse"]], "polars.Series.product": [[784, "polars-series-product"]], "polars.Series.rank": [[786, "polars-series-rank"]], "polars.Series.extend_constant": [[734, "polars-series-extend-constant"]], "polars.Series.fill_null": [[736, "polars-series-fill-null"]], "polars.Series.ewm_std": [[730, "polars-series-ewm-std"]], "polars.Series.is_nan": [[755, "polars-series-is-nan"]], "polars.Series.get_chunks": [[740, "polars-series-get-chunks"]], "polars.Series.is_float": [[752, "polars-series-is-float"]], "polars.Series.min": [[772, "polars-series-min"]], "polars.Series.mode": [[773, "polars-series-mode"]], "polars.Series.is_empty": [[749, "polars-series-is-empty"]], "polars.Series.len": [[765, "polars-series-len"]], "polars.Series.is_sorted": [[760, "polars-series-is-sorted"]], "polars.Series.peak_min": [[783, "polars-series-peak-min"]], "polars.Series.new_from_index": [[779, "polars-series-new-from-index"]], "polars.Series.is_numeric": [[759, "polars-series-is-numeric"]], "polars.Series.ewm_var": [[731, "polars-series-ewm-var"]], "polars.Series.ewm_mean": [[729, "polars-series-ewm-mean"]], "polars.Series.mean": [[770, "polars-series-mean"]], "polars.Series.peak_max": [[782, "polars-series-peak-max"]], "polars.Series.rechunk": [[787, "polars-series-rechunk"]], "polars.Series.fill_nan": [[735, "polars-series-fill-nan"]], "polars.Series.is_finite": [[750, "polars-series-is-finite"]], "polars.Series.entropy": [[727, "polars-series-entropy"]], "polars.Series.reinterpret": [[788, "polars-series-reinterpret"]], "polars.Series.is_utf8": [[762, "polars-series-is-utf8"]], "polars.Series.is_boolean": [[746, "polars-series-is-boolean"]], "polars.Series.is_not_null": [[757, "polars-series-is-not-null"]], "polars.Series.name": [[776, "polars-series-name"]], "polars.Series.limit": [[766, "polars-series-limit"]], "polars.Series.explode": [[733, "polars-series-explode"]], "polars.Series.is_null": [[758, "polars-series-is-null"]], "polars.Series.dtype": [[726, "polars-series-dtype"]], "polars.Series.pct_change": [[781, "polars-series-pct-change"]], "polars.Series.exp": [[732, "polars-series-exp"]], "polars.Series.bin.contains": [[662, "polars-series-bin-contains"]], "polars.Series.dt.milliseconds": [[704, "polars-series-dt-milliseconds"]], "polars.Series.dt.iso_year": [[697, "polars-series-dt-iso-year"]], "polars.Series.drop_nans": [[687, "polars-series-drop-nans"]], "polars.Series.dt.quarter": [[713, "polars-series-dt-quarter"]], "polars.Series.cumulative_eval": [[683, "polars-series-cumulative-eval"]], "polars.Series.arr.unique": [[661, "polars-series-arr-unique"]], "polars.Series.chunk_lengths": [[671, "polars-series-chunk-lengths"]], "polars.Series.dt.ordinal_day": [[712, "polars-series-dt-ordinal-day"]], "polars.Series.bin.starts_with": [[666, "polars-series-bin-starts-with"]], "polars.Series.dt.week": [[721, "polars-series-dt-week"]], "polars.Series.bin.ends_with": [[665, "polars-series-bin-ends-with"]], "polars.Series.dt.epoch": [[694, "polars-series-dt-epoch"]], "polars.Series.cast": [[667, "polars-series-cast"]], "polars.Series.diff": [[685, "polars-series-diff"]], "polars.Series.dt.minute": [[706, "polars-series-dt-minute"]], "polars.Series.cat": [[668, "polars-series-cat"]], "polars.Series.describe": [[684, "polars-series-describe"]], "polars.Series.cosh": [[678, "polars-series-cosh"]], "polars.Series.dt.timestamp": [[718, "polars-series-dt-timestamp"]], "polars.Series.dt.microsecond": [[701, "polars-series-dt-microsecond"]], "polars.Series.cummin": [[680, "polars-series-cummin"]], "polars.Series.dt.hours": [[696, "polars-series-dt-hours"]], "polars.Series.dt": [[689, "polars-series-dt"]], "polars.Series.dt.with_time_unit": [[723, "polars-series-dt-with-time-unit"]], "polars.Series.dt.nanosecond": [[709, "polars-series-dt-nanosecond"]], "polars.Series.dt.cast_time_unit": [[690, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.weekday": [[722, "polars-series-dt-weekday"]], "polars.Series.clone": [[676, "polars-series-clone"]], "polars.Series.cos": [[677, "polars-series-cos"]], "polars.Series.clip_max": [[674, "polars-series-clip-max"]], "polars.Series.dt.hour": [[695, "polars-series-dt-hour"]], "polars.Series.bin.decode": [[663, "polars-series-bin-decode"]], "polars.Series.dt.second": [[715, "polars-series-dt-second"]], "polars.Series.cummax": [[679, "polars-series-cummax"]], "polars.Series.dt.millisecond": [[703, "polars-series-dt-millisecond"]], "polars.Series.dt.with_time_zone": [[724, "polars-series-dt-with-time-zone"]], "polars.Series.dt.seconds": [[716, "polars-series-dt-seconds"]], "polars.Series.bin.encode": [[664, "polars-series-bin-encode"]], "polars.Series.dt.day": [[692, "polars-series-dt-day"]], "polars.Series.dt.median": [[700, "polars-series-dt-median"]], "polars.Series.dt.cast_time_zone": [[691, "polars-series-dt-cast-time-zone"]], "polars.Series.dt.round": [[714, "polars-series-dt-round"]], "polars.Series.clip": [[673, "polars-series-clip"]], "polars.Series.cumprod": [[681, "polars-series-cumprod"]], "polars.Series.drop_nulls": [[688, "polars-series-drop-nulls"]], "polars.Series.dt.min": [[705, "polars-series-dt-min"]], "polars.Series.dt.offset_by": [[711, "polars-series-dt-offset-by"]], "polars.Series.dt.year": [[725, "polars-series-dt-year"]], "polars.Series.dt.nanoseconds": [[710, "polars-series-dt-nanoseconds"]], "polars.Series.dot": [[686, "polars-series-dot"]], "polars.Series.clip_min": [[675, "polars-series-clip-min"]], "polars.Series.dt.minutes": [[707, "polars-series-dt-minutes"]], "polars.Series.cumsum": [[682, "polars-series-cumsum"]], "polars.Series.cleared": [[672, "polars-series-cleared"]], "polars.Series.dt.microseconds": [[702, "polars-series-dt-microseconds"]], "polars.Series.dt.max": [[698, "polars-series-dt-max"]], "polars.Series.dt.strftime": [[717, "polars-series-dt-strftime"]], "polars.Series.dt.tz_localize": [[720, "polars-series-dt-tz-localize"]], "polars.Series.dt.truncate": [[719, "polars-series-dt-truncate"]], "polars.Series.cat.set_ordering": [[669, "polars-series-cat-set-ordering"]], "polars.Series.dt.days": [[693, "polars-series-dt-days"]], "polars.Series.dt.mean": [[699, "polars-series-dt-mean"]], "polars.Series.dt.month": [[708, "polars-series-dt-month"]], "polars.Series.ceil": [[670, "polars-series-ceil"]], "polars.Series.arr.to_struct": [[660, "polars-series-arr-to-struct"]], "Utils": [[892, "utils"]], "polars.Series.to_arrow": [[862, "polars-series-to-arrow"]], "polars.Series.top_k": [[869, "polars-series-top-k"]], "Miscellaneous": [[885, "miscellaneous"], [617, "miscellaneous"], [537, "miscellaneous"], [543, "miscellaneous"], [240, "miscellaneous"]], "polars.Series.tan": [[859, "polars-series-tan"]], "polars.Series.take_every": [[858, "polars-series-take-every"]], "polars.Series.to_list": [[865, "polars-series-to-list"]], "Boolean": [[879, "boolean"], [530, "boolean"]], "Temporal": [[889, "temporal"], [541, "temporal"]], "polars.Series.time_unit": [[861, "polars-series-time-unit"]], "polars.Series.value_counts": [[872, "polars-series-value-counts"]], "Manipulation/selection": [[886, "manipulation-selection"], [618, "manipulation-selection"], [538, "manipulation-selection"], [241, "manipulation-selection"]], "Testing": [[891, "testing"]], "Asserts": [[891, "asserts"]], "Property-based testing": [[891, "property-based-testing"]], "Strategies": [[891, "strategies"]], "Strategy helpers": [[891, "strategy-helpers"]], "polars.Series.tanh": [[860, "polars-series-tanh"]], "polars.Series.var": [[873, "polars-series-var"]], "Array": [[876, "array"], [528, "array"]], "SQL": [[890, "sql"], [545, "sql"]], "Methods": [[890, "methods"]], "polars.Series.to_physical": [[868, "polars-series-to-physical"]], "Categories": [[880, "categories"], [531, "categories"]], "Export": [[883, "export"], [237, "export"]], "polars.Series.to_pandas": [[867, "polars-series-to-pandas"]], "polars.Series.to_dummies": [[863, "polars-series-to-dummies"]], "Struct": [[888, "struct"], [540, "struct"]], "Attributes": [[877, "attributes"], [613, "attributes"], [234, "attributes"]], "polars.Series.unique": [[870, "polars-series-unique"]], "Series": [[884, "series"]], "polars.Series.zip_with": [[875, "polars-series-zip-with"]], "Computation": [[881, "computation"], [533, "computation"], [235, "computation"]], "polars.Series.unique_counts": [[871, "polars-series-unique-counts"]], "polars.Series.to_numpy": [[866, "polars-series-to-numpy"]], "Binary": [[878, "binary"], [529, "binary"]], "Descriptive": [[882, "descriptive"], [614, "descriptive"], [236, "descriptive"]], "polars.Series.to_frame": [[864, "polars-series-to-frame"]], "polars.Series.view": [[874, "polars-series-view"]], "Strings": [[887, "strings"], [539, "strings"]], "polars.Series.arr.min": [[653, "polars-series-arr-min"]], "GroupBy": [[615, "groupby"], [238, "groupby"]], "polars.Series.arr.join": [[648, "polars-series-arr-join"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[609, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.arr.arg_max": [[639, "polars-series-arr-arg-max"]], "polars.Series.arg_sort": [[634, "polars-series-arg-sort"]], "polars.Series.arr.first": [[645, "polars-series-arr-first"]], "Read/write logical plan": [[617, "read-write-logical-plan"]], "polars.Series.append": [[624, "polars-series-append"]], "polars.Series.arcsin": [[628, "polars-series-arcsin"]], "polars.Series.arr.lengths": [[650, "polars-series-arr-lengths"]], "polars.Series.all": [[622, "polars-series-all"]], "polars.Series.arcsinh": [[629, "polars-series-arcsinh"]], "polars.Series.arr.concat": [[641, "polars-series-arr-concat"]], "polars.Series.arr.max": [[651, "polars-series-arr-max"]], "polars.Series.arr": [[638, "polars-series-arr"]], "polars.Series.arccosh": [[627, "polars-series-arccosh"]], "polars.Series.arr.contains": [[642, "polars-series-arr-contains"]], "polars.LazyFrame.write_json": [[608, "polars-lazyframe-write-json"]], "polars.Series.arr.eval": [[644, "polars-series-arr-eval"]], "polars.Series.arr.get": [[646, "polars-series-arr-get"]], "polars.LazyFrame.std": [[596, "polars-lazyframe-std"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[611, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.Series.arr.shift": [[655, "polars-series-arr-shift"]], "polars.LazyFrame.sum": [[597, "polars-lazyframe-sum"]], "polars.Series.arctanh": [[631, "polars-series-arctanh"]], "polars.Series.abs": [[620, "polars-series-abs"]], "polars.Series.arg_min": [[633, "polars-series-arg-min"]], "polars.Series.arr.mean": [[652, "polars-series-arr-mean"]], "polars.Series.arr.sort": [[657, "polars-series-arr-sort"]], "polars.Series.arg_max": [[632, "polars-series-arg-max"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[612, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.arr.sum": [[658, "polars-series-arr-sum"]], "polars.LazyFrame.take_every": [[599, "polars-lazyframe-take-every"]], "polars.LazyFrame.sort": [[595, "polars-lazyframe-sort"]], "polars.LazyFrame.unnest": [[601, "polars-lazyframe-unnest"]], "polars.Series.apply": [[625, "polars-series-apply"]], "polars.LazyFrame.tail": [[598, "polars-lazyframe-tail"]], "polars.LazyFrame.with_row_count": [[607, "polars-lazyframe-with-row-count"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[610, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.arctan": [[630, "polars-series-arctan"]], "polars.Series.alias": [[621, "polars-series-alias"]], "polars.LazyFrame.with_columns": [[605, "polars-lazyframe-with-columns"]], "polars.Series.arr.diff": [[643, "polars-series-arr-diff"]], "polars.Series.any": [[623, "polars-series-any"]], "polars.Series.arccos": [[626, "polars-series-arccos"]], "polars.Series.arr.last": [[649, "polars-series-arr-last"]], "polars.LazyFrame.with_context": [[606, "polars-lazyframe-with-context"]], "polars.Series.arr.slice": [[656, "polars-series-arr-slice"]], "polars.LazyFrame.width": [[603, "polars-lazyframe-width"]], "polars.LazyFrame.var": [[602, "polars-lazyframe-var"]], "polars.Series.argsort": [[637, "polars-series-argsort"]], "polars.Series.arr.reverse": [[654, "polars-series-arr-reverse"]], "polars.LazyFrame.unique": [[600, "polars-lazyframe-unique"]], "polars.Series.arr.head": [[647, "polars-series-arr-head"]], "polars.LazyFrame.slice": [[594, "polars-lazyframe-slice"]], "polars.Series.arr.arg_min": [[640, "polars-series-arr-arg-min"]], "polars.Series.arr.tail": [[659, "polars-series-arr-tail"]], "LazyFrame": [[616, "lazyframe"]], "polars.Series.arg_unique": [[636, "polars-series-arg-unique"]], "polars.Series.arg_true": [[635, "polars-series-arg-true"]], "polars.LazyFrame.with_column": [[604, "polars-lazyframe-with-column"]], "polars.apply": [[484, "polars-apply"]], "polars.col": [[489, "polars-col"]], "polars.quantile": [[517, "polars-quantile"]], "polars.Expr.str.zfill": [[464, "polars-expr-str-zfill"]], "polars.lit": [[509, "polars-lit"]], "polars.when": [[527, "polars-when"]], "polars.Expr.to_physical": [[474, "polars-expr-to-physical"]], "polars.std": [[522, "polars-std"]], "polars.cumfold": [[494, "polars-cumfold"]], "polars.date": [[497, "polars-date"]], "polars.duration": [[499, "polars-duration"]], "polars.groups": [[506, "polars-groups"]], "polars.Expr.tanh": [[473, "polars-expr-tanh"]], "polars.cov": [[493, "polars-cov"]], "polars.spearman_rank_corr": [[521, "polars-spearman-rank-corr"]], "polars.head": [[507, "polars-head"]], "polars.Expr.take_every": [[471, "polars-expr-take-every"]], "polars.count": [[492, "polars-count"]], "polars.all": [[482, "polars-all"]], "polars.Expr.struct.field": [[465, "polars-expr-struct-field"]], "polars.exclude": [[501, "polars-exclude"]], "polars.n_unique": [[515, "polars-n-unique"]], "polars.Expr.str.to_uppercase": [[463, "polars-expr-str-to-uppercase"]], "polars.coalesce": [[488, "polars-coalesce"]], "polars.Expr.tail": [[469, "polars-expr-tail"]], "polars.reduce": [[518, "polars-reduce"]], "polars.Expr.top_k": [[475, "polars-expr-top-k"]], "polars.first": [[502, "polars-first"]], "polars.repeat": [[519, "polars-repeat"]], "polars.select": [[520, "polars-select"]], "polars.pearson_corr": [[516, "polars-pearson-corr"]], "polars.var": [[526, "polars-var"]], "polars.Expr.suffix": [[467, "polars-expr-suffix"]], "polars.Expr.tan": [[472, "polars-expr-tan"]], "polars.Expr.struct.rename_fields": [[466, "polars-expr-struct-rename-fields"]], "polars.list": [[508, "polars-list"]], "polars.any": [[483, "polars-any"]], "polars.datetime": [[498, "polars-datetime"]], "polars.max": [[511, "polars-max"]], "polars.Expr.str.to_lowercase": [[462, "polars-expr-str-to-lowercase"]], "polars.mean": [[512, "polars-mean"]], "polars.min": [[514, "polars-min"]], "polars.tail": [[525, "polars-tail"]], "polars.format": [[504, "polars-format"]], "polars.Expr.take": [[470, "polars-expr-take"]], "polars.argsort_by": [[486, "polars-argsort-by"]], "polars.map": [[510, "polars-map"]], "polars.cumreduce": [[495, "polars-cumreduce"]], "polars.element": [[500, "polars-element"]], "polars.Expr.unique": [[476, "polars-expr-unique"]], "polars.Expr.where": [[481, "polars-expr-where"]], "polars.cumsum": [[496, "polars-cumsum"]], "polars.Expr.value_counts": [[479, "polars-expr-value-counts"]], "polars.fold": [[503, "polars-fold"]], "polars.Expr.sum": [[468, "polars-expr-sum"]], "polars.Expr.unique_counts": [[477, "polars-expr-unique-counts"]], "polars.from_epoch": [[505, "polars-from-epoch"]], "polars.struct": [[523, "polars-struct"]], "polars.sum": [[524, "polars-sum"]], "polars.median": [[513, "polars-median"]], "polars.arange": [[485, "polars-arange"]], "polars.Expr.upper_bound": [[478, "polars-expr-upper-bound"]], "polars.avg": [[487, "polars-avg"]], "polars.concat_str": [[491, "polars-concat-str"]], "polars.Expr.var": [[480, "polars-expr-var"]], "polars.concat_list": [[490, "polars-concat-list"]], "polars.Expr.rolling_max": [[412, "polars-expr-rolling-max"]], "polars.Expr.str.extract": [[444, "polars-expr-str-extract"]], "polars.Expr.slice": [[433, "polars-expr-slice"]], "polars.Expr.quantile": [[404, "polars-expr-quantile"]], "polars.Expr.rolling_sum": [[419, "polars-expr-rolling-sum"]], "polars.Expr.str.ends_with": [[443, "polars-expr-str-ends-with"]], "polars.Expr.str.strip": [[460, "polars-expr-str-strip"]], "polars.Expr.pow": [[401, "polars-expr-pow"]], "polars.Expr.shrink_dtype": [[427, "polars-expr-shrink-dtype"]], "polars.Expr.rank": [[405, "polars-expr-rank"]], "polars.Expr.product": [[403, "polars-expr-product"]], "polars.Expr.std": [[437, "polars-expr-std"]], "polars.Expr.rechunk": [[406, "polars-expr-rechunk"]], "polars.Expr.sign": [[429, "polars-expr-sign"]], "polars.Expr.str.ljust": [[448, "polars-expr-str-ljust"]], "polars.Expr.over": [[399, "polars-expr-over"]], "polars.Expr.str.contains": [[439, "polars-expr-str-contains"]], "polars.Expr.str.replace": [[451, "polars-expr-str-replace"]], "polars.Expr.str.encode": [[442, "polars-expr-str-encode"]], "polars.Expr.str.rjust": [[453, "polars-expr-str-rjust"]], "polars.Expr.str.rstrip": [[454, "polars-expr-str-rstrip"]], "polars.Expr.rolling_quantile": [[416, "polars-expr-rolling-quantile"]], "polars.Expr.str.concat": [[438, "polars-expr-str-concat"]], "polars.Expr.str.split": [[456, "polars-expr-str-split"]], "polars.Expr.str.starts_with": [[459, "polars-expr-str-starts-with"]], "polars.Expr.str.slice": [[455, "polars-expr-str-slice"]], "polars.Expr.str.strptime": [[461, "polars-expr-str-strptime"]], "polars.Expr.str.splitn": [[458, "polars-expr-str-splitn"]], "polars.Expr.sample": [[422, "polars-expr-sample"]], "polars.Expr.shift": [[425, "polars-expr-shift"]], "polars.Expr.rolling_skew": [[417, "polars-expr-rolling-skew"]], "polars.Expr.rolling_mean": [[413, "polars-expr-rolling-mean"]], "polars.Expr.rolling_var": [[420, "polars-expr-rolling-var"]], "polars.Expr.set_sorted": [[424, "polars-expr-set-sorted"]], "polars.Expr.str.lengths": [[447, "polars-expr-str-lengths"]], "polars.Expr.str.n_chars": [[450, "polars-expr-str-n-chars"]], "polars.Expr.search_sorted": [[423, "polars-expr-search-sorted"]], "polars.Expr.skew": [[432, "polars-expr-skew"]], "polars.Expr.prefix": [[402, "polars-expr-prefix"]], "polars.Expr.str.json_path_match": [[446, "polars-expr-str-json-path-match"]], "polars.Expr.str.replace_all": [[452, "polars-expr-str-replace-all"]], "polars.Expr.reshape": [[409, "polars-expr-reshape"]], "polars.Expr.str.lstrip": [[449, "polars-expr-str-lstrip"]], "polars.Expr.rolling_median": [[414, "polars-expr-rolling-median"]], "polars.Expr.reverse": [[410, "polars-expr-reverse"]], "polars.Expr.sort_by": [[435, "polars-expr-sort-by"]], "polars.Expr.str.decode": [[441, "polars-expr-str-decode"]], "polars.Expr.str.extract_all": [[445, "polars-expr-str-extract-all"]], "polars.Expr.repeat_by": [[408, "polars-expr-repeat-by"]], "polars.Expr.sin": [[430, "polars-expr-sin"]], "polars.Expr.round": [[421, "polars-expr-round"]], "polars.Expr.sort": [[434, "polars-expr-sort"]], "polars.Expr.pct_change": [[400, "polars-expr-pct-change"]], "polars.Expr.null_count": [[398, "polars-expr-null-count"]], "polars.Expr.nan_max": [[396, "polars-expr-nan-max"]], "polars.Expr.str.count_match": [[440, "polars-expr-str-count-match"]], "polars.Expr.nan_min": [[397, "polars-expr-nan-min"]], "polars.Expr.rolling_std": [[418, "polars-expr-rolling-std"]], "polars.Expr.sqrt": [[436, "polars-expr-sqrt"]], "polars.Expr.str.split_exact": [[457, "polars-expr-str-split-exact"]], "polars.Expr.rolling_apply": [[411, "polars-expr-rolling-apply"]], "polars.Expr.shuffle": [[428, "polars-expr-shuffle"]], "polars.Expr.sinh": [[431, "polars-expr-sinh"]], "polars.Expr.reinterpret": [[407, "polars-expr-reinterpret"]], "polars.Expr.rolling_min": [[415, "polars-expr-rolling-min"]], "polars.Expr.shift_and_fill": [[426, "polars-expr-shift-and-fill"]], "polars.Expr.extend_constant": [[351, "polars-expr-extend-constant"]], "polars.Expr.dt.seconds": [[334, "polars-expr-dt-seconds"]], "polars.Expr.dt.year": [[343, "polars-expr-dt-year"]], "polars.Expr.head": [[360, "polars-expr-head"]], "polars.Expr.filter": [[354, "polars-expr-filter"]], "polars.Expr.log": [[381, "polars-expr-log"]], "polars.Expr.max": [[386, "polars-expr-max"]], "polars.Expr.dt.timestamp": [[336, "polars-expr-dt-timestamp"]], "polars.Expr.list": [[380, "polars-expr-list"]], "polars.Expr.mean": [[387, "polars-expr-mean"]], "polars.Expr.dt.quarter": [[331, "polars-expr-dt-quarter"]], "polars.Expr.forward_fill": [[358, "polars-expr-forward-fill"]], "polars.Expr.is_not": [[370, "polars-expr-is-not"]], "polars.Expr.meta.root_names": [[391, "polars-expr-meta-root-names"]], "polars.Expr.fill_nan": [[352, "polars-expr-fill-nan"]], "polars.Expr.ewm_std": [[346, "polars-expr-ewm-std"]], "polars.Expr.fill_null": [[353, "polars-expr-fill-null"]], "polars.Expr.is_first": [[366, "polars-expr-is-first"]], "polars.Expr.last": [[377, "polars-expr-last"]], "polars.Expr.is_not_null": [[372, "polars-expr-is-not-null"]], "polars.Expr.dt.week": [[339, "polars-expr-dt-week"]], "polars.Expr.kurtosis": [[376, "polars-expr-kurtosis"]], "polars.Expr.dt.second": [[333, "polars-expr-dt-second"]], "polars.Expr.is_nan": [[369, "polars-expr-is-nan"]], "polars.Expr.meta.pop": [[390, "polars-expr-meta-pop"]], "polars.Expr.first": [[355, "polars-expr-first"]], "polars.Expr.is_not_nan": [[371, "polars-expr-is-not-nan"]], "polars.Expr.ewm_var": [[347, "polars-expr-ewm-var"]], "polars.Expr.n_unique": [[395, "polars-expr-n-unique"]], "polars.Expr.meta.undo_aliases": [[392, "polars-expr-meta-undo-aliases"]], "polars.Expr.dt.round": [[332, "polars-expr-dt-round"]], "polars.Expr.dt.strftime": [[335, "polars-expr-dt-strftime"]], "polars.Expr.dt.weekday": [[340, "polars-expr-dt-weekday"]], "polars.Expr.is_finite": [[365, "polars-expr-is-finite"]], "polars.Expr.median": [[388, "polars-expr-median"]], "polars.Expr.map_alias": [[385, "polars-expr-map-alias"]], "polars.Expr.limit": [[379, "polars-expr-limit"]], "polars.Expr.dt.with_time_zone": [[342, "polars-expr-dt-with-time-zone"]], "polars.Expr.min": [[393, "polars-expr-min"]], "polars.Expr.exclude": [[348, "polars-expr-exclude"]], "polars.Expr.dt.with_time_unit": [[341, "polars-expr-dt-with-time-unit"]], "polars.Expr.is_unique": [[374, "polars-expr-is-unique"]], "polars.Expr.mode": [[394, "polars-expr-mode"]], "polars.Expr.entropy": [[344, "polars-expr-entropy"]], "polars.Expr.exp": [[349, "polars-expr-exp"]], "polars.Expr.meta.output_name": [[389, "polars-expr-meta-output-name"]], "polars.Expr.is_between": [[363, "polars-expr-is-between"]], "polars.Expr.is_in": [[367, "polars-expr-is-in"]], "polars.Expr.log10": [[382, "polars-expr-log10"]], "polars.Expr.inspect": [[361, "polars-expr-inspect"]], "polars.Expr.flatten": [[356, "polars-expr-flatten"]], "polars.Expr.hash": [[359, "polars-expr-hash"]], "polars.Expr.floor": [[357, "polars-expr-floor"]], "polars.Expr.lower_bound": [[383, "polars-expr-lower-bound"]], "polars.Expr.is_duplicated": [[364, "polars-expr-is-duplicated"]], "polars.Expr.interpolate": [[362, "polars-expr-interpolate"]], "polars.Expr.dt.truncate": [[337, "polars-expr-dt-truncate"]], "polars.Expr.len": [[378, "polars-expr-len"]], "polars.Expr.map": [[384, "polars-expr-map"]], "polars.Expr.is_null": [[373, "polars-expr-is-null"]], "polars.Expr.dt.tz_localize": [[338, "polars-expr-dt-tz-localize"]], "polars.Expr.is_infinite": [[368, "polars-expr-is-infinite"]], "polars.Expr.keep_name": [[375, "polars-expr-keep-name"]], "polars.Expr.dt.ordinal_day": [[330, "polars-expr-dt-ordinal-day"]], "polars.Expr.ewm_mean": [[345, "polars-expr-ewm-mean"]], "polars.Expr.explode": [[350, "polars-expr-explode"]], "polars.Expr.arr.last": [[274, "polars-expr-arr-last"]], "polars.Expr.clip_max": [[297, "polars-expr-clip-max"]], "polars.Expr.cat.set_ordering": [[294, "polars-expr-cat-set-ordering"]], "polars.Expr.cumcount": [[302, "polars-expr-cumcount"]], "polars.Expr.dt.millisecond": [[322, "polars-expr-dt-millisecond"]], "polars.Expr.dt.epoch": [[316, "polars-expr-dt-epoch"]], "polars.Expr.dt.milliseconds": [[323, "polars-expr-dt-milliseconds"]], "polars.Expr.arr.slice": [[281, "polars-expr-arr-slice"]], "polars.Expr.dt.nanosecond": [[327, "polars-expr-dt-nanosecond"]], "polars.Expr.bin.starts_with": [[292, "polars-expr-bin-starts-with"]], "polars.Expr.cumsum": [[306, "polars-expr-cumsum"]], "polars.Expr.arr.contains": [[267, "polars-expr-arr-contains"]], "polars.Expr.cos": [[299, "polars-expr-cos"]], "polars.Expr.bin.encode": [[290, "polars-expr-bin-encode"]], "polars.Expr.dt.days": [[315, "polars-expr-dt-days"]], "polars.Expr.ceil": [[295, "polars-expr-ceil"]], "polars.Expr.arr.lengths": [[275, "polars-expr-arr-lengths"]], "polars.Expr.drop_nans": [[310, "polars-expr-drop-nans"]], "polars.Expr.clip_min": [[298, "polars-expr-clip-min"]], "polars.Expr.arr.reverse": [[279, "polars-expr-arr-reverse"]], "polars.Expr.bin.decode": [[289, "polars-expr-bin-decode"]], "polars.Expr.cast": [[293, "polars-expr-cast"]], "polars.Expr.diff": [[308, "polars-expr-diff"]], "polars.Expr.arr.max": [[276, "polars-expr-arr-max"]], "polars.Expr.dt.month": [[326, "polars-expr-dt-month"]], "polars.Expr.dt.cast_time_unit": [[312, "polars-expr-dt-cast-time-unit"]], "polars.Expr.cosh": [[300, "polars-expr-cosh"]], "polars.Expr.cumprod": [[305, "polars-expr-cumprod"]], "polars.Expr.arr.first": [[270, "polars-expr-arr-first"]], "polars.Expr.arr.tail": [[284, "polars-expr-arr-tail"]], "polars.Expr.dt.minutes": [[325, "polars-expr-dt-minutes"]], "polars.Expr.count": [[301, "polars-expr-count"]], "polars.Expr.arr.sort": [[282, "polars-expr-arr-sort"]], "polars.Expr.bin.contains": [[288, "polars-expr-bin-contains"]], "polars.Expr.dt.hour": [[317, "polars-expr-dt-hour"]], "polars.Expr.clip": [[296, "polars-expr-clip"]], "polars.Expr.arr.eval": [[269, "polars-expr-arr-eval"]], "polars.Expr.arr.join": [[273, "polars-expr-arr-join"]], "polars.Expr.cummin": [[304, "polars-expr-cummin"]], "polars.Expr.arr.shift": [[280, "polars-expr-arr-shift"]], "polars.Expr.cumulative_eval": [[307, "polars-expr-cumulative-eval"]], "polars.Expr.arr.to_struct": [[285, "polars-expr-arr-to-struct"]], "polars.Expr.arr.sum": [[283, "polars-expr-arr-sum"]], "polars.Expr.arr.head": [[272, "polars-expr-arr-head"]], "polars.Expr.arr.concat": [[266, "polars-expr-arr-concat"]], "polars.Expr.cummax": [[303, "polars-expr-cummax"]], "polars.Expr.dot": [[309, "polars-expr-dot"]], "polars.Expr.dt.iso_year": [[319, "polars-expr-dt-iso-year"]], "polars.Expr.arr.get": [[271, "polars-expr-arr-get"]], "polars.Expr.dt.microsecond": [[320, "polars-expr-dt-microsecond"]], "polars.Expr.arr.arg_min": [[265, "polars-expr-arr-arg-min"]], "polars.Expr.dt.nanoseconds": [[328, "polars-expr-dt-nanoseconds"]], "polars.Expr.drop_nulls": [[311, "polars-expr-drop-nulls"]], "polars.Expr.dt.hours": [[318, "polars-expr-dt-hours"]], "polars.Expr.dt.microseconds": [[321, "polars-expr-dt-microseconds"]], "polars.Expr.arr.unique": [[286, "polars-expr-arr-unique"]], "polars.Expr.dt.cast_time_zone": [[313, "polars-expr-dt-cast-time-zone"]], "polars.Expr.dt.day": [[314, "polars-expr-dt-day"]], "polars.Expr.backward_fill": [[287, "polars-expr-backward-fill"]], "polars.Expr.bin.ends_with": [[291, "polars-expr-bin-ends-with"]], "polars.Expr.arr.diff": [[268, "polars-expr-arr-diff"]], "polars.Expr.arr.mean": [[277, "polars-expr-arr-mean"]], "polars.Expr.arr.min": [[278, "polars-expr-arr-min"]], "polars.Expr.dt.minute": [[324, "polars-expr-dt-minute"]], "polars.Expr.dt.offset_by": [[329, "polars-expr-dt-offset-by"]], "polars.Expr.arr.arg_max": [[264, "polars-expr-arr-arg-max"]], "polars.LazyFrame.join_asof": [[571, "polars-lazyframe-join-asof"]], "polars.LazyFrame.fill_nan": [[559, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.min": [[581, "polars-lazyframe-min"]], "polars.LazyFrame.lazy": [[573, "polars-lazyframe-lazy"]], "Functions": [[534, "functions"], [543, "functions"], [243, "functions"]], "polars.LazyFrame.drop_nulls": [[555, "polars-lazyframe-drop-nulls"]], "API reference": [[544, "api-reference"]], "polars.LazyFrame.describe_optimized_plan": [[552, "polars-lazyframe-describe-optimized-plan"]], "polars.LazyFrame.limit": [[574, "polars-lazyframe-limit"]], "polars.LazyFrame.fill_null": [[560, "polars-lazyframe-fill-null"]], "polars.LazyFrame.first": [[562, "polars-lazyframe-first"]], "polars.LazyFrame.interpolate": [[569, "polars-lazyframe-interpolate"]], "polars.LazyFrame.fetch": [[558, "polars-lazyframe-fetch"]], "polars.LazyFrame.inspect": [[568, "polars-lazyframe-inspect"]], "polars.LazyFrame.melt": [[579, "polars-lazyframe-melt"]], "polars.LazyFrame.groupby_dynamic": [[565, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.shift": [[590, "polars-lazyframe-shift"]], "polars.LazyFrame.show_graph": [[592, "polars-lazyframe-show-graph"]], "polars.LazyFrame.columns": [[551, "polars-lazyframe-columns"]], "Expressions": [[535, "expressions"]], "polars.LazyFrame.cache": [[547, "polars-lazyframe-cache"]], "polars.LazyFrame.median": [[578, "polars-lazyframe-median"]], "polars.LazyFrame.dtypes": [[556, "polars-lazyframe-dtypes"]], "polars.LazyFrame.profile": [[583, "polars-lazyframe-profile"]], "polars.LazyFrame.sink_parquet": [[593, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.filter": [[561, "polars-lazyframe-filter"]], "polars.LazyFrame.merge_sorted": [[580, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.describe_plan": [[553, "polars-lazyframe-describe-plan"]], "polars.LazyFrame.quantile": [[584, "polars-lazyframe-quantile"]], "polars.LazyFrame.cleared": [[548, "polars-lazyframe-cleared"]], "polars.LazyFrame.from_json": [[563, "polars-lazyframe-from-json"]], "polars.LazyFrame.schema": [[588, "polars-lazyframe-schema"]], "polars.LazyFrame.groupby_rolling": [[566, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.join": [[570, "polars-lazyframe-join"]], "polars.LazyFrame.select": [[589, "polars-lazyframe-select"]], "Conversion": [[543, "conversion"]], "Eager/Lazy functions": [[543, "eager-lazy-functions"]], "Parallelization": [[543, "parallelization"]], "StringCache": [[543, "stringcache"]], "polars.LazyFrame.clone": [[549, "polars-lazyframe-clone"]], "Meta": [[536, "meta"]], "Input/output": [[545, "input-output"]], "CSV": [[545, "csv"]], "Feather/ IPC": [[545, "feather-ipc"]], "Parquet": [[545, "parquet"]], "JSON": [[545, "json"]], "AVRO": [[545, "avro"]], "Excel": [[545, "excel"]], "Delta Lake": [[545, "delta-lake"]], "Datasets": [[545, "datasets"]], "BatchedCsvReader": [[545, "batchedcsvreader"]], "polars.LazyFrame.explode": [[557, "polars-lazyframe-explode"]], "polars.LazyFrame.last": [[572, "polars-lazyframe-last"]], "polars.LazyFrame.reverse": [[587, "polars-lazyframe-reverse"]], "polars.LazyFrame.head": [[567, "polars-lazyframe-head"]], "polars.LazyFrame.shift_and_fill": [[591, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.collect": [[550, "polars-lazyframe-collect"]], "polars.LazyFrame.pipe": [[582, "polars-lazyframe-pipe"]], "polars.LazyFrame.read_json": [[585, "polars-lazyframe-read-json"]], "Window": [[542, "window"]], "polars.LazyFrame.drop": [[554, "polars-lazyframe-drop"]], "Columns / names": [[532, "columns-names"]], "polars.LazyFrame.mean": [[577, "polars-lazyframe-mean"]], "polars.LazyFrame.rename": [[586, "polars-lazyframe-rename"]], "polars.LazyFrame.max": [[576, "polars-lazyframe-max"]], "polars.LazyFrame.groupby": [[564, "polars-lazyframe-groupby"]], "polars.LazyFrame.map": [[575, "polars-lazyframe-map"]], "polars.DataFrame.slice": [[185, "polars-dataframe-slice"]], "polars.DataFrame.frame_equal": [[134, "polars-dataframe-frame-equal"]], "polars.DataFrame.join": [[152, "polars-dataframe-join"]], "polars.DataFrame.pipe": [[167, "polars-dataframe-pipe"]], "polars.DataFrame.product": [[169, "polars-dataframe-product"]], "polars.DataFrame.groupby_dynamic": [[139, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.replace_at_idx": [[174, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.reverse": [[175, "polars-dataframe-reverse"]], "polars.DataFrame.pearson_corr": [[166, "polars-dataframe-pearson-corr"]], "polars.DataFrame.schema": [[179, "polars-dataframe-schema"]], "polars.DataFrame.shrink_to_fit": [[184, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.std": [[187, "polars-dataframe-std"]], "polars.DataFrame.join_asof": [[153, "polars-dataframe-join-asof"]], "polars.DataFrame.to_dict": [[192, "polars-dataframe-to-dict"]], "polars.DataFrame.min": [[161, "polars-dataframe-min"]], "polars.DataFrame.hash_rows": [[141, "polars-dataframe-hash-rows"]], "polars.DataFrame.rechunk": [[171, "polars-dataframe-rechunk"]], "polars.DataFrame.partition_by": [[165, "polars-dataframe-partition-by"]], "polars.DataFrame.is_duplicated": [[147, "polars-dataframe-is-duplicated"]], "polars.DataFrame.to_numpy": [[195, "polars-dataframe-to-numpy"]], "polars.DataFrame.fold": [[133, "polars-dataframe-fold"]], "polars.DataFrame.select": [[180, "polars-dataframe-select"]], "polars.DataFrame.replace": [[173, "polars-dataframe-replace"]], "polars.DataFrame.null_count": [[164, "polars-dataframe-null-count"]], "polars.DataFrame.shift": [[182, "polars-dataframe-shift"]], "polars.DataFrame.mean": [[157, "polars-dataframe-mean"]], "polars.DataFrame.median": [[158, "polars-dataframe-median"]], "polars.DataFrame.is_empty": [[148, "polars-dataframe-is-empty"]], "polars.DataFrame.insert_at_idx": [[145, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.to_series": [[197, "polars-dataframe-to-series"]], "polars.DataFrame.limit": [[155, "polars-dataframe-limit"]], "polars.DataFrame.item": [[150, "polars-dataframe-item"]], "polars.DataFrame.rename": [[172, "polars-dataframe-rename"]], "polars.DataFrame.rows": [[177, "polars-dataframe-rows"]], "polars.DataFrame.shift_and_fill": [[183, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.glimpse": [[137, "polars-dataframe-glimpse"]], "polars.DataFrame.tail": [[189, "polars-dataframe-tail"]], "polars.DataFrame.to_arrow": [[191, "polars-dataframe-to-arrow"]], "polars.DataFrame.row": [[176, "polars-dataframe-row"]], "polars.DataFrame.melt": [[159, "polars-dataframe-melt"]], "polars.DataFrame.pivot": [[168, "polars-dataframe-pivot"]], "polars.DataFrame.quantile": [[170, "polars-dataframe-quantile"]], "polars.DataFrame.n_chunks": [[162, "polars-dataframe-n-chunks"]], "polars.DataFrame.groupby": [[138, "polars-dataframe-groupby"]], "polars.DataFrame.get_columns": [[136, "polars-dataframe-get-columns"]], "polars.DataFrame.lazy": [[154, "polars-dataframe-lazy"]], "polars.DataFrame.head": [[142, "polars-dataframe-head"]], "polars.DataFrame.max": [[156, "polars-dataframe-max"]], "polars.DataFrame.take_every": [[190, "polars-dataframe-take-every"]], "polars.DataFrame.groupby_rolling": [[140, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.sort": [[186, "polars-dataframe-sort"]], "polars.DataFrame.to_dummies": [[194, "polars-dataframe-to-dummies"]], "polars.DataFrame.sum": [[188, "polars-dataframe-sum"]], "polars.DataFrame.interpolate": [[146, "polars-dataframe-interpolate"]], "polars.DataFrame.sample": [[178, "polars-dataframe-sample"]], "polars.DataFrame.n_unique": [[163, "polars-dataframe-n-unique"]], "polars.DataFrame.get_column": [[135, "polars-dataframe-get-column"]], "polars.DataFrame.height": [[143, "polars-dataframe-height"]], "polars.DataFrame.find_idx_by_name": [[132, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.merge_sorted": [[160, "polars-dataframe-merge-sorted"]], "polars.DataFrame.to_dicts": [[193, "polars-dataframe-to-dicts"]], "polars.DataFrame.shape": [[181, "polars-dataframe-shape"]], "polars.DataFrame.to_pandas": [[196, "polars-dataframe-to-pandas"]], "polars.DataFrame.iterrows": [[151, "polars-dataframe-iterrows"]], "polars.DataFrame.is_unique": [[149, "polars-dataframe-is-unique"]], "polars.DataFrame.hstack": [[144, "polars-dataframe-hstack"]], "polars.Expr.apply": [[252, "polars-expr-apply"]], "polars.Expr.arg_min": [[260, "polars-expr-arg-min"]], "polars.internals.dataframe.groupby.GroupBy.count": [[213, "polars-internals-dataframe-groupby-groupby-count"]], "polars.DataFrame.width": [[206, "polars-dataframe-width"]], "polars.Expr.argsort": [[263, "polars-expr-argsort"]], "polars.DataFrame.transpose": [[199, "polars-dataframe-transpose"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[224, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.DataFrame.upsample": [[203, "polars-dataframe-upsample"]], "DataFrame": [[239, "dataframe"]], "polars.internals.dataframe.pivot.PivotOps.count": [[226, "polars-internals-dataframe-pivot-pivotops-count"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[212, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.Expr.arccosh": [[254, "polars-expr-arccosh"]], "polars.internals.dataframe.pivot.PivotOps.sum": [[233, "polars-internals-dataframe-pivot-pivotops-sum"]], "polars.DataFrame.to_struct": [[198, "polars-dataframe-to-struct"]], "polars.Expr.arcsinh": [[256, "polars-expr-arcsinh"]], "polars.Expr.arg_max": [[259, "polars-expr-arg-max"]], "polars.internals.dataframe.groupby.GroupBy.last": [[216, "polars-internals-dataframe-groupby-groupby-last"]], "polars.DataFrame.with_row_count": [[209, "polars-dataframe-with-row-count"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[225, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.Expr.alias": [[248, "polars-expr-alias"]], "polars.internals.dataframe.pivot.PivotOps.max": [[229, "polars-internals-dataframe-pivot-pivotops-max"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[221, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[210, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.Expr.append": [[251, "polars-expr-append"]], "Data types": [[243, "data-types"]], "Numeric": [[243, "numeric"]], "Date / Time": [[243, "date-time"]], "Nested": [[243, "nested"]], "Other": [[243, "other"]], "polars.Expr.arg_unique": [[262, "polars-expr-arg-unique"]], "polars.internals.dataframe.groupby.GroupBy.head": [[215, "polars-internals-dataframe-groupby-groupby-head"]], "polars.DataFrame.vstack": [[205, "polars-dataframe-vstack"]], "polars.internals.dataframe.groupby.GroupBy.median": [[219, "polars-internals-dataframe-groupby-groupby-median"]], "polars.internals.dataframe.groupby.GroupBy.agg_list": [[211, "polars-internals-dataframe-groupby-groupby-agg-list"]], "polars.Expr.arcsin": [[255, "polars-expr-arcsin"]], "polars.Expr.arctan": [[257, "polars-expr-arctan"]], "polars.DataFrame.unstack": [[202, "polars-dataframe-unstack"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[218, "polars-internals-dataframe-groupby-groupby-mean"]], "Pivot": [[242, "pivot"]], "polars.Expr.arccos": [[253, "polars-expr-arccos"]], "polars.internals.dataframe.groupby.GroupBy.first": [[214, "polars-internals-dataframe-groupby-groupby-first"]], "polars.internals.dataframe.pivot.PivotOps.median": [[231, "polars-internals-dataframe-pivot-pivotops-median"]], "polars.DataFrame.var": [[204, "polars-dataframe-var"]], "Exceptions": [[244, "exceptions"]], "polars.DataFrame.with_columns": [[208, "polars-dataframe-with-columns"]], "polars.internals.dataframe.groupby.GroupBy.min": [[220, "polars-internals-dataframe-groupby-groupby-min"]], "polars.internals.dataframe.groupby.GroupBy.pivot": [[222, "polars-internals-dataframe-groupby-groupby-pivot"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[223, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.Expr.arg_sort": [[261, "polars-expr-arg-sort"]], "polars.DataFrame.unnest": [[201, "polars-dataframe-unnest"]], "polars.internals.dataframe.pivot.PivotOps.first": [[227, "polars-internals-dataframe-pivot-pivotops-first"]], "polars.internals.dataframe.pivot.PivotOps.min": [[232, "polars-internals-dataframe-pivot-pivotops-min"]], "polars.DataFrame.with_column": [[207, "polars-dataframe-with-column"]], "polars.internals.dataframe.pivot.PivotOps.mean": [[230, "polars-internals-dataframe-pivot-pivotops-mean"]], "polars.Expr.any": [[250, "polars-expr-any"]], "polars.Expr.abs": [[246, "polars-expr-abs"]], "polars.Expr.agg_groups": [[247, "polars-expr-agg-groups"]], "polars.Expr.all": [[249, "polars-expr-all"]], "polars.internals.dataframe.groupby.GroupBy.max": [[217, "polars-internals-dataframe-groupby-groupby-max"]], "polars.Expr.arctanh": [[258, "polars-expr-arctanh"]], "polars.DataFrame.unique": [[200, "polars-dataframe-unique"]], "polars.internals.dataframe.pivot.PivotOps.last": [[228, "polars-internals-dataframe-pivot-pivotops-last"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[5, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[6, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[7, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_fmt_str_lengths() (polars.config class method)": [[9, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[10, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[11, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[12, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[13, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[14, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[15, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[19, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[20, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[21, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[22, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[23, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[24, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[25, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[26, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[27, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[28, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[29, "polars.DataType"]], "__init__() (polars.datatype method)": [[29, "polars.DataType.__init__"]], "date (class in polars)": [[30, "polars.Date"]], "__init__() (polars.date method)": [[30, "polars.Date.__init__"]], "datetime (class in polars)": [[31, "polars.Datetime"]], "__init__() (polars.datetime method)": [[31, "polars.Datetime.__init__"]], "duration (class in polars)": [[32, "polars.Duration"]], "__init__() (polars.duration method)": [[32, "polars.Duration.__init__"]], "float32 (class in polars)": [[33, "polars.Float32"]], "__init__() (polars.float32 method)": [[33, "polars.Float32.__init__"]], "float64 (class in polars)": [[34, "polars.Float64"]], "__init__() (polars.float64 method)": [[34, "polars.Float64.__init__"]], "int16 (class in polars)": [[35, "polars.Int16"]], "__init__() (polars.int16 method)": [[35, "polars.Int16.__init__"]], "int32 (class in polars)": [[36, "polars.Int32"]], "__init__() (polars.int32 method)": [[36, "polars.Int32.__init__"]], "int64 (class in polars)": [[37, "polars.Int64"]], "__init__() (polars.int64 method)": [[37, "polars.Int64.__init__"]], "int8 (class in polars)": [[38, "polars.Int8"]], "__init__() (polars.int8 method)": [[38, "polars.Int8.__init__"]], "list (class in polars)": [[39, "polars.List"]], "__init__() (polars.list method)": [[39, "polars.List.__init__"]], "null (class in polars)": [[40, "polars.Null"]], "__init__() (polars.null method)": [[40, "polars.Null.__init__"]], "object (class in polars)": [[41, "polars.Object"]], "__init__() (polars.object method)": [[41, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[42, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[43, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[44, "polars.SQLContext.register"]], "stringcache (class in polars)": [[45, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[45, "polars.StringCache.__init__"]], "struct (class in polars)": [[46, "polars.Struct"]], "__init__() (polars.struct method)": [[46, "polars.Struct.__init__"]], "time (class in polars)": [[47, "polars.Time"]], "__init__() (polars.time method)": [[47, "polars.Time.__init__"]], "uint16 (class in polars)": [[48, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[48, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[49, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[49, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[50, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[50, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[51, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[51, "polars.UInt8.__init__"]], "unknown (class in polars)": [[52, "polars.Unknown"]], "__init__() (polars.unknown method)": [[52, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[53, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[53, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[54, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[55, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[56, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[57, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[58, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[59, "polars.arg_where"]], "build_info() (in module polars)": [[60, "polars.build_info"]], "collect_all() (in module polars)": [[61, "polars.collect_all"]], "concat() (in module polars)": [[62, "polars.concat"]], "cut() (in module polars)": [[63, "polars.cut"]], "date_range() (in module polars)": [[64, "polars.date_range"]], "arrowerror": [[65, "polars.exceptions.ArrowError"]], "computeerror": [[66, "polars.exceptions.ComputeError"]], "duplicateerror": [[67, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[68, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[69, "polars.exceptions.NoDataError"]], "norowsreturned": [[70, "polars.exceptions.NoRowsReturned"]], "notfounderror": [[71, "polars.exceptions.NotFoundError"]], "panicexception": [[72, "polars.exceptions.PanicException"]], "rowsexception": [[73, "polars.exceptions.RowsException"]], "schemaerror": [[74, "polars.exceptions.SchemaError"]], "shapeerror": [[75, "polars.exceptions.ShapeError"]], "toomanyrowsreturned": [[76, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[77, "polars.from_arrow"]], "from_dict() (in module polars)": [[78, "polars.from_dict"]], "from_dicts() (in module polars)": [[79, "polars.from_dicts"]], "from_numpy() (in module polars)": [[80, "polars.from_numpy"]], "from_pandas() (in module polars)": [[81, "polars.from_pandas"]], "from_records() (in module polars)": [[82, "polars.from_records"]], "get_dummies() (in module polars)": [[83, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[84, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[85, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[86, "polars.ones"]], "read_avro() (in module polars)": [[87, "polars.read_avro"]], "read_csv() (in module polars)": [[88, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[89, "polars.read_csv_batched"]], "read_delta() (in module polars)": [[90, "polars.read_delta"]], "read_excel() (in module polars)": [[91, "polars.read_excel"]], "read_ipc() (in module polars)": [[92, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[93, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[94, "polars.read_json"]], "read_ndjson() (in module polars)": [[95, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[96, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[97, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[98, "polars.read_sql"]], "scan_csv() (in module polars)": [[99, "polars.scan_csv"]], "scan_delta() (in module polars)": [[100, "polars.scan_delta"]], "scan_ds() (in module polars)": [[101, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[102, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[103, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[104, "polars.scan_parquet"]], "show_versions() (in module polars)": [[105, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[106, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[107, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[108, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[108, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[109, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[110, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[111, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[112, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[113, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[114, "polars.zeros"]], "apply() (polars.dataframe method)": [[117, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[118, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[119, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[120, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[121, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[122, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[123, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[124, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[125, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[126, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[127, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[128, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[129, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[130, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[131, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[132, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[133, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[134, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[135, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[136, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[137, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[138, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[139, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[140, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[141, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[142, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[143, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[144, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[145, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[146, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[147, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[148, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[149, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[150, "polars.DataFrame.item"]], "iterrows() (polars.dataframe method)": [[151, "polars.DataFrame.iterrows"]], "join() (polars.dataframe method)": [[152, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[153, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[154, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[155, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[156, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[157, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[158, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[159, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[160, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[161, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[162, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[163, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[164, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[165, "polars.DataFrame.partition_by"]], "pearson_corr() (polars.dataframe method)": [[166, "polars.DataFrame.pearson_corr"]], "pipe() (polars.dataframe method)": [[167, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[168, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[169, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[170, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[171, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[172, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[173, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[174, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[175, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[176, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[177, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[178, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[179, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[180, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[181, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[182, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[183, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[184, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[185, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[186, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[187, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[188, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[189, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[190, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[191, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[192, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[193, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[194, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[195, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[196, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[197, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[198, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[199, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[200, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[201, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[202, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[203, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[204, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[205, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[206, "polars.DataFrame.width"]], "with_column() (polars.dataframe method)": [[207, "polars.DataFrame.with_column"]], "with_columns() (polars.dataframe method)": [[208, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[209, "polars.DataFrame.with_row_count"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[210, "polars.internals.dataframe.groupby.GroupBy.agg"]], "agg_list() (polars.internals.dataframe.groupby.groupby method)": [[211, "polars.internals.dataframe.groupby.GroupBy.agg_list"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[212, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[213, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[214, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[215, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[216, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[217, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[218, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[219, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "pivot() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.pivot"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[223, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[224, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[225, "polars.internals.dataframe.groupby.GroupBy.tail"]], "count() (polars.internals.dataframe.pivot.pivotops method)": [[226, "polars.internals.dataframe.pivot.PivotOps.count"]], "first() (polars.internals.dataframe.pivot.pivotops method)": [[227, "polars.internals.dataframe.pivot.PivotOps.first"]], "last() (polars.internals.dataframe.pivot.pivotops method)": [[228, "polars.internals.dataframe.pivot.PivotOps.last"]], "max() (polars.internals.dataframe.pivot.pivotops method)": [[229, "polars.internals.dataframe.pivot.PivotOps.max"]], "mean() (polars.internals.dataframe.pivot.pivotops method)": [[230, "polars.internals.dataframe.pivot.PivotOps.mean"]], "median() (polars.internals.dataframe.pivot.pivotops method)": [[231, "polars.internals.dataframe.pivot.PivotOps.median"]], "min() (polars.internals.dataframe.pivot.pivotops method)": [[232, "polars.internals.dataframe.pivot.PivotOps.min"]], "sum() (polars.internals.dataframe.pivot.pivotops method)": [[233, "polars.internals.dataframe.pivot.PivotOps.sum"]], "abs() (polars.expr method)": [[246, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[247, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[248, "polars.Expr.alias"]], "all() (polars.expr method)": [[249, "polars.Expr.all"]], "any() (polars.expr method)": [[250, "polars.Expr.any"]], "append() (polars.expr method)": [[251, "polars.Expr.append"]], "apply() (polars.expr method)": [[252, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[253, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[254, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[255, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[256, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[257, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[258, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[259, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[260, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[261, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[262, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[263, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[264, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[265, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[266, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[267, "polars.Expr.arr.contains"]], "diff() (polars.expr.arr method)": [[268, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[269, "polars.Expr.arr.eval"]], "first() (polars.expr.arr method)": [[270, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[271, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[272, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[273, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[274, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[275, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[276, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[277, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[278, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[279, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[280, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[281, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[282, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[283, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[284, "polars.Expr.arr.tail"]], "to_struct() (polars.expr.arr method)": [[285, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[286, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[287, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[288, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[289, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[290, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[291, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[292, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[293, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[294, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[295, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[296, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[297, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[298, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[299, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[300, "polars.Expr.cosh"]], "count() (polars.expr method)": [[301, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[302, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[303, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[304, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[305, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[306, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[307, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[308, "polars.Expr.diff"]], "dot() (polars.expr method)": [[309, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[310, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[311, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[312, "polars.Expr.dt.cast_time_unit"]], "cast_time_zone() (polars.expr.dt method)": [[313, "polars.Expr.dt.cast_time_zone"]], "day() (polars.expr.dt method)": [[314, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[315, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[316, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[317, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[318, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[319, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[320, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[321, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[322, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[323, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[324, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[325, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[326, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[327, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[328, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[329, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[330, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[331, "polars.Expr.dt.quarter"]], "round() (polars.expr.dt method)": [[332, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[333, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[334, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[335, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[336, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[337, "polars.Expr.dt.truncate"]], "tz_localize() (polars.expr.dt method)": [[338, "polars.Expr.dt.tz_localize"]], "week() (polars.expr.dt method)": [[339, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[340, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[341, "polars.Expr.dt.with_time_unit"]], "with_time_zone() (polars.expr.dt method)": [[342, "polars.Expr.dt.with_time_zone"]], "year() (polars.expr.dt method)": [[343, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[344, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[345, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[346, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[347, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[348, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[349, "polars.Expr.exp"]], "explode() (polars.expr method)": [[350, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[351, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[352, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[353, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[354, "polars.Expr.filter"]], "first() (polars.expr method)": [[355, "polars.Expr.first"]], "flatten() (polars.expr method)": [[356, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[357, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[358, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[359, "polars.Expr.hash"]], "head() (polars.expr method)": [[360, "polars.Expr.head"]], "inspect() (polars.expr method)": [[361, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[362, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[363, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[364, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[365, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[366, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[367, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[368, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[369, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[370, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[371, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[372, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[373, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[374, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[375, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[376, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[377, "polars.Expr.last"]], "len() (polars.expr method)": [[378, "polars.Expr.len"]], "limit() (polars.expr method)": [[379, "polars.Expr.limit"]], "list() (polars.expr method)": [[380, "polars.Expr.list"]], "log() (polars.expr method)": [[381, "polars.Expr.log"]], "log10() (polars.expr method)": [[382, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[383, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[384, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[385, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[386, "polars.Expr.max"]], "mean() (polars.expr method)": [[387, "polars.Expr.mean"]], "median() (polars.expr method)": [[388, "polars.Expr.median"]], "output_name() (polars.expr.meta method)": [[389, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[390, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[391, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[392, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[393, "polars.Expr.min"]], "mode() (polars.expr method)": [[394, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[395, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[396, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[397, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[398, "polars.Expr.null_count"]], "over() (polars.expr method)": [[399, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[400, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[401, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[402, "polars.Expr.prefix"]], "product() (polars.expr method)": [[403, "polars.Expr.product"]], "quantile() (polars.expr method)": [[404, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[405, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[406, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[407, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[408, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[409, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[410, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[411, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[412, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[413, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[414, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[415, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[416, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[417, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[418, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[419, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[420, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[421, "polars.Expr.round"]], "sample() (polars.expr method)": [[422, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[423, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[424, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[425, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[426, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[427, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[428, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[429, "polars.Expr.sign"]], "sin() (polars.expr method)": [[430, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[431, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[432, "polars.Expr.skew"]], "slice() (polars.expr method)": [[433, "polars.Expr.slice"]], "sort() (polars.expr method)": [[434, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[435, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[436, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[437, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[438, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[439, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[440, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[441, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[442, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[443, "polars.Expr.str.ends_with"]], "extract() (polars.expr.str method)": [[444, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[445, "polars.Expr.str.extract_all"]], "json_path_match() (polars.expr.str method)": [[446, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[447, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[448, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[449, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[450, "polars.Expr.str.n_chars"]], "replace() (polars.expr.str method)": [[451, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[452, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[453, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[454, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[455, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[456, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[457, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[458, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[459, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[460, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[461, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[462, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[463, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[464, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[465, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[466, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[467, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[468, "polars.Expr.sum"]], "tail() (polars.expr method)": [[469, "polars.Expr.tail"]], "take() (polars.expr method)": [[470, "polars.Expr.take"]], "take_every() (polars.expr method)": [[471, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[472, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[473, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[474, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[475, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[476, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[477, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[478, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[479, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[480, "polars.Expr.var"]], "where() (polars.expr method)": [[481, "polars.Expr.where"]], "all() (in module polars)": [[482, "polars.all"]], "any() (in module polars)": [[483, "polars.any"]], "apply() (in module polars)": [[484, "polars.apply"]], "arange() (in module polars)": [[485, "polars.arange"]], "argsort_by() (in module polars)": [[486, "polars.argsort_by"]], "avg() (in module polars)": [[487, "polars.avg"]], "coalesce() (in module polars)": [[488, "polars.coalesce"]], "col() (in module polars)": [[489, "polars.col"]], "concat_list() (in module polars)": [[490, "polars.concat_list"]], "concat_str() (in module polars)": [[491, "polars.concat_str"]], "count() (in module polars)": [[492, "polars.count"]], "cov() (in module polars)": [[493, "polars.cov"]], "cumfold() (in module polars)": [[494, "polars.cumfold"]], "cumreduce() (in module polars)": [[495, "polars.cumreduce"]], "cumsum() (in module polars)": [[496, "polars.cumsum"]], "date() (in module polars)": [[497, "polars.date"]], "datetime() (in module polars)": [[498, "polars.datetime"]], "duration() (in module polars)": [[499, "polars.duration"]], "element() (in module polars)": [[500, "polars.element"]], "exclude() (in module polars)": [[501, "polars.exclude"]], "first() (in module polars)": [[502, "polars.first"]], "fold() (in module polars)": [[503, "polars.fold"]], "format() (in module polars)": [[504, "polars.format"]], "from_epoch() (in module polars)": [[505, "polars.from_epoch"]], "groups() (in module polars)": [[506, "polars.groups"]], "head() (in module polars)": [[507, "polars.head"]], "list() (in module polars)": [[508, "polars.list"]], "lit() (in module polars)": [[509, "polars.lit"]], "map() (in module polars)": [[510, "polars.map"]], "max() (in module polars)": [[511, "polars.max"]], "mean() (in module polars)": [[512, "polars.mean"]], "median() (in module polars)": [[513, "polars.median"]], "min() (in module polars)": [[514, "polars.min"]], "n_unique() (in module polars)": [[515, "polars.n_unique"]], "pearson_corr() (in module polars)": [[516, "polars.pearson_corr"]], "quantile() (in module polars)": [[517, "polars.quantile"]], "reduce() (in module polars)": [[518, "polars.reduce"]], "repeat() (in module polars)": [[519, "polars.repeat"]], "select() (in module polars)": [[520, "polars.select"]], "spearman_rank_corr() (in module polars)": [[521, "polars.spearman_rank_corr"]], "std() (in module polars)": [[522, "polars.std"]], "struct() (in module polars)": [[523, "polars.struct"]], "sum() (in module polars)": [[524, "polars.sum"]], "tail() (in module polars)": [[525, "polars.tail"]], "var() (in module polars)": [[526, "polars.var"]], "when() (in module polars)": [[527, "polars.when"]], "cache() (polars.lazyframe method)": [[547, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[548, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[549, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[550, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[551, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[552, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[553, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[554, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[555, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[556, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[557, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[558, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[559, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[560, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[561, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[562, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[563, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[564, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[565, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[566, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[567, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[568, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[569, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[570, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[571, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[572, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[573, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[574, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[575, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[576, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[577, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[578, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[579, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[580, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[581, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[582, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[583, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[584, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[585, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[586, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[587, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[588, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[589, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[590, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[591, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[592, "polars.LazyFrame.show_graph"]], "sink_parquet() (polars.lazyframe method)": [[593, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[594, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[595, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[596, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[597, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[598, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[599, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[600, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[601, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[602, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[603, "polars.LazyFrame.width"]], "with_column() (polars.lazyframe method)": [[604, "polars.LazyFrame.with_column"]], "with_columns() (polars.lazyframe method)": [[605, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[606, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[607, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[608, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[609, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[610, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[611, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[612, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[620, "polars.Series.abs"]], "alias() (polars.series method)": [[621, "polars.Series.alias"]], "all() (polars.series method)": [[622, "polars.Series.all"]], "any() (polars.series method)": [[623, "polars.Series.any"]], "append() (polars.series method)": [[624, "polars.Series.append"]], "apply() (polars.series method)": [[625, "polars.Series.apply"]], "arccos() (polars.series method)": [[626, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[627, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[628, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[629, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[630, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[631, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[632, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[633, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[634, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[635, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[636, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[637, "polars.Series.argsort"]], "arr (polars.series attribute)": [[638, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[639, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[640, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[641, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[642, "polars.Series.arr.contains"]], "diff() (polars.series.arr method)": [[643, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[644, "polars.Series.arr.eval"]], "first() (polars.series.arr method)": [[645, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[646, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[647, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[648, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[649, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[650, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[651, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[652, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[653, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[654, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[655, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[656, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[657, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[658, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[659, "polars.Series.arr.tail"]], "to_struct() (polars.series.arr method)": [[660, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[661, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[662, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[663, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[664, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[665, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[666, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[667, "polars.Series.cast"]], "cat (polars.series attribute)": [[668, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[669, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[670, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[671, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[672, "polars.Series.cleared"]], "clip() (polars.series method)": [[673, "polars.Series.clip"]], "clip_max() (polars.series method)": [[674, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[675, "polars.Series.clip_min"]], "clone() (polars.series method)": [[676, "polars.Series.clone"]], "cos() (polars.series method)": [[677, "polars.Series.cos"]], "cosh() (polars.series method)": [[678, "polars.Series.cosh"]], "cummax() (polars.series method)": [[679, "polars.Series.cummax"]], "cummin() (polars.series method)": [[680, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[681, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[682, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[683, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[684, "polars.Series.describe"]], "diff() (polars.series method)": [[685, "polars.Series.diff"]], "dot() (polars.series method)": [[686, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[687, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[688, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[689, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[690, "polars.Series.dt.cast_time_unit"]], "cast_time_zone() (polars.series.dt method)": [[691, "polars.Series.dt.cast_time_zone"]], "day() (polars.series.dt method)": [[692, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[693, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[694, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[695, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[696, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[697, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[698, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[699, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[700, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[701, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[702, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[703, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[704, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[705, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[706, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[707, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[708, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[709, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[710, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[711, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[712, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[713, "polars.Series.dt.quarter"]], "round() (polars.series.dt method)": [[714, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[715, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[716, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[717, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[718, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[719, "polars.Series.dt.truncate"]], "tz_localize() (polars.series.dt method)": [[720, "polars.Series.dt.tz_localize"]], "week() (polars.series.dt method)": [[721, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[722, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[723, "polars.Series.dt.with_time_unit"]], "with_time_zone() (polars.series.dt method)": [[724, "polars.Series.dt.with_time_zone"]], "year() (polars.series.dt method)": [[725, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[726, "polars.Series.dtype"]], "entropy() (polars.series method)": [[727, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[728, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[729, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[730, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[731, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[732, "polars.Series.exp"]], "explode() (polars.series method)": [[733, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[734, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[735, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[736, "polars.Series.fill_null"]], "filter() (polars.series method)": [[737, "polars.Series.filter"]], "flags (polars.series attribute)": [[738, "polars.Series.flags"]], "floor() (polars.series method)": [[739, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[740, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[741, "polars.Series.has_validity"]], "hash() (polars.series method)": [[742, "polars.Series.hash"]], "head() (polars.series method)": [[743, "polars.Series.head"]], "inner_dtype (polars.series attribute)": [[744, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[745, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[746, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[747, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[748, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[749, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[750, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[751, "polars.Series.is_first"]], "is_float() (polars.series method)": [[752, "polars.Series.is_float"]], "is_in() (polars.series method)": [[753, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[754, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[755, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[756, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[757, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[758, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[759, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[760, "polars.Series.is_sorted"]], "is_unique() (polars.series method)": [[761, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[762, "polars.Series.is_utf8"]], "item() (polars.series method)": [[763, "polars.Series.item"]], "kurtosis() (polars.series method)": [[764, "polars.Series.kurtosis"]], "len() (polars.series method)": [[765, "polars.Series.len"]], "limit() (polars.series method)": [[766, "polars.Series.limit"]], "log() (polars.series method)": [[767, "polars.Series.log"]], "log10() (polars.series method)": [[768, "polars.Series.log10"]], "max() (polars.series method)": [[769, "polars.Series.max"]], "mean() (polars.series method)": [[770, "polars.Series.mean"]], "median() (polars.series method)": [[771, "polars.Series.median"]], "min() (polars.series method)": [[772, "polars.Series.min"]], "mode() (polars.series method)": [[773, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[774, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[775, "polars.Series.n_unique"]], "name (polars.series attribute)": [[776, "polars.Series.name"]], "nan_max() (polars.series method)": [[777, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[778, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[779, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[780, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[781, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[782, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[783, "polars.Series.peak_min"]], "product() (polars.series method)": [[784, "polars.Series.product"]], "quantile() (polars.series method)": [[785, "polars.Series.quantile"]], "rank() (polars.series method)": [[786, "polars.Series.rank"]], "rechunk() (polars.series method)": [[787, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[788, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[789, "polars.Series.rename"]], "reshape() (polars.series method)": [[790, "polars.Series.reshape"]], "reverse() (polars.series method)": [[791, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[792, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[793, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[794, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[795, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[796, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[797, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[798, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[799, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[800, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[801, "polars.Series.rolling_var"]], "round() (polars.series method)": [[802, "polars.Series.round"]], "sample() (polars.series method)": [[803, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[804, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[805, "polars.Series.series_equal"]], "set() (polars.series method)": [[806, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[807, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[808, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[809, "polars.Series.shape"]], "shift() (polars.series method)": [[810, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[811, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[812, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[813, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[814, "polars.Series.shuffle"]], "sign() (polars.series method)": [[815, "polars.Series.sign"]], "sin() (polars.series method)": [[816, "polars.Series.sin"]], "sinh() (polars.series method)": [[817, "polars.Series.sinh"]], "skew() (polars.series method)": [[818, "polars.Series.skew"]], "slice() (polars.series method)": [[819, "polars.Series.slice"]], "sort() (polars.series method)": [[820, "polars.Series.sort"]], "sqrt() (polars.series method)": [[821, "polars.Series.sqrt"]], "std() (polars.series method)": [[822, "polars.Series.std"]], "str (polars.series attribute)": [[823, "polars.Series.str"]], "concat() (polars.series.str method)": [[824, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[825, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[826, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[827, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[828, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[829, "polars.Series.str.ends_with"]], "extract() (polars.series.str method)": [[830, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[831, "polars.Series.str.extract_all"]], "json_path_match() (polars.series.str method)": [[832, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[833, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[834, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[835, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[836, "polars.Series.str.n_chars"]], "replace() (polars.series.str method)": [[837, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[838, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[839, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[840, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[841, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[842, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[843, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[844, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[845, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[846, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[847, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[848, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[849, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[850, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[851, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[852, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[853, "polars.Series.struct.rename_fields"]], "to_frame() (polars.series.struct method)": [[854, "polars.Series.struct.to_frame"]], "sum() (polars.series method)": [[855, "polars.Series.sum"]], "tail() (polars.series method)": [[856, "polars.Series.tail"]], "take() (polars.series method)": [[857, "polars.Series.take"]], "take_every() (polars.series method)": [[858, "polars.Series.take_every"]], "tan() (polars.series method)": [[859, "polars.Series.tan"]], "tanh() (polars.series method)": [[860, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[861, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[862, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[863, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[864, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[865, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[866, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[867, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[868, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[869, "polars.Series.top_k"]], "unique() (polars.series method)": [[870, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[871, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[872, "polars.Series.value_counts"]], "var() (polars.series method)": [[873, "polars.Series.var"]], "view() (polars.series method)": [[874, "polars.Series.view"]], "zip_with() (polars.series method)": [[875, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[890, "polars.SQLContext"]]}})